
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000065dc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004065dc  004065dc  000165dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  004065e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000003c4  204009b8  00406f9c  000209b8  2**2
                  ALLOC
  4 .stack        00002004  20400d7c  00407360  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402d80  00409364  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   000240f5  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004859  00000000  00000000  00044b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001098  00000000  00000000  0004938d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00022971  00000000  00000000  0004a425  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012ef8  00000000  00000000  0006cd96  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00097534  00000000  00000000  0007fc8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a6f3  00000000  00000000  001171c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f0  00000000  00000000  001218b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000033fc  00000000  00000000  00122aa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	80 2d 40 20 39 0e 40 00 37 0e 40 00 37 0e 40 00     .-@ 9.@.7.@.7.@.
  400010:	37 0e 40 00 37 0e 40 00 37 0e 40 00 00 00 00 00     7.@.7.@.7.@.....
	...
  40002c:	11 12 40 00 37 0e 40 00 00 00 00 00 b1 12 40 00     ..@.7.@.......@.
  40003c:	19 13 40 00 37 0e 40 00 37 0e 40 00 37 0e 40 00     ..@.7.@.7.@.7.@.
  40004c:	75 2f 40 00 37 0e 40 00 37 0e 40 00 37 0e 40 00     u/@.7.@.7.@.7.@.
  40005c:	37 0e 40 00 37 0e 40 00 00 00 00 00 29 0b 40 00     7.@.7.@.....).@.
  40006c:	3d 0b 40 00 51 0b 40 00 37 0e 40 00 37 0e 40 00     =.@.Q.@.7.@.7.@.
  40007c:	37 0e 40 00 65 0b 40 00 79 0b 40 00 37 0e 40 00     7.@.e.@.y.@.7.@.
  40008c:	37 0e 40 00 37 0e 40 00 37 0e 40 00 37 0e 40 00     7.@.7.@.7.@.7.@.
  40009c:	37 0e 40 00 37 0e 40 00 37 0e 40 00 37 0e 40 00     7.@.7.@.7.@.7.@.
  4000ac:	37 0e 40 00 37 0e 40 00 21 04 40 00 37 0e 40 00     7.@.7.@.!.@.7.@.
  4000bc:	37 0e 40 00 37 0e 40 00 37 0e 40 00 37 0e 40 00     7.@.7.@.7.@.7.@.
  4000cc:	37 0e 40 00 00 00 00 00 37 0e 40 00 00 00 00 00     7.@.....7.@.....
  4000dc:	37 0e 40 00 35 04 40 00 37 0e 40 00 37 0e 40 00     7.@.5.@.7.@.7.@.
  4000ec:	37 0e 40 00 37 0e 40 00 37 0e 40 00 37 0e 40 00     7.@.7.@.7.@.7.@.
  4000fc:	37 0e 40 00 37 0e 40 00 37 0e 40 00 37 0e 40 00     7.@.7.@.7.@.7.@.
  40010c:	37 0e 40 00 37 0e 40 00 00 00 00 00 00 00 00 00     7.@.7.@.........
  40011c:	00 00 00 00 37 0e 40 00 37 0e 40 00 37 0e 40 00     ....7.@.7.@.7.@.
  40012c:	37 0e 40 00 37 0e 40 00 00 00 00 00 37 0e 40 00     7.@.7.@.....7.@.
  40013c:	37 0e 40 00                                         7.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b8 	.word	0x204009b8
  40015c:	00000000 	.word	0x00000000
  400160:	004065e4 	.word	0x004065e4

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004065e4 	.word	0x004065e4
  4001a0:	204009bc 	.word	0x204009bc
  4001a4:	004065e4 	.word	0x004065e4
  4001a8:	00000000 	.word	0x00000000

004001ac <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001ac:	b570      	push	{r4, r5, r6, lr}
  4001ae:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001b4:	4013      	ands	r3, r2
  4001b6:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001b8:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001ba:	4e1c      	ldr	r6, [pc, #112]	; (40022c <afec_process_callback+0x80>)
  4001bc:	4d1c      	ldr	r5, [pc, #112]	; (400230 <afec_process_callback+0x84>)
  4001be:	42a8      	cmp	r0, r5
  4001c0:	bf14      	ite	ne
  4001c2:	2000      	movne	r0, #0
  4001c4:	2001      	moveq	r0, #1
  4001c6:	0105      	lsls	r5, r0, #4
  4001c8:	e00b      	b.n	4001e2 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001ca:	2c0e      	cmp	r4, #14
  4001cc:	d81e      	bhi.n	40020c <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001ce:	9a01      	ldr	r2, [sp, #4]
  4001d0:	f104 010c 	add.w	r1, r4, #12
  4001d4:	2301      	movs	r3, #1
  4001d6:	408b      	lsls	r3, r1
  4001d8:	4213      	tst	r3, r2
  4001da:	d110      	bne.n	4001fe <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001dc:	3401      	adds	r4, #1
  4001de:	2c10      	cmp	r4, #16
  4001e0:	d022      	beq.n	400228 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4001e2:	2c0b      	cmp	r4, #11
  4001e4:	d8f1      	bhi.n	4001ca <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4001e6:	9a01      	ldr	r2, [sp, #4]
  4001e8:	2301      	movs	r3, #1
  4001ea:	40a3      	lsls	r3, r4
  4001ec:	4213      	tst	r3, r2
  4001ee:	d0f5      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001f0:	192b      	adds	r3, r5, r4
  4001f2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4001f6:	2b00      	cmp	r3, #0
  4001f8:	d0f0      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4001fa:	4798      	blx	r3
  4001fc:	e7ee      	b.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001fe:	192b      	adds	r3, r5, r4
  400200:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400204:	2b00      	cmp	r3, #0
  400206:	d0e9      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400208:	4798      	blx	r3
  40020a:	e7e7      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40020c:	9a01      	ldr	r2, [sp, #4]
  40020e:	f104 010f 	add.w	r1, r4, #15
  400212:	2301      	movs	r3, #1
  400214:	408b      	lsls	r3, r1
  400216:	4213      	tst	r3, r2
  400218:	d0e0      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40021a:	192b      	adds	r3, r5, r4
  40021c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400220:	2b00      	cmp	r3, #0
  400222:	d0db      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400224:	4798      	blx	r3
  400226:	e7d9      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400228:	b002      	add	sp, #8
  40022a:	bd70      	pop	{r4, r5, r6, pc}
  40022c:	20400c80 	.word	0x20400c80
  400230:	40064000 	.word	0x40064000

00400234 <afec_ch_set_config>:
{
  400234:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400236:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400238:	2301      	movs	r3, #1
  40023a:	408b      	lsls	r3, r1
  40023c:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400240:	7815      	ldrb	r5, [r2, #0]
  400242:	2d00      	cmp	r5, #0
  400244:	bf08      	it	eq
  400246:	2300      	moveq	r3, #0
  400248:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40024a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40024c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40024e:	004b      	lsls	r3, r1, #1
  400250:	2103      	movs	r1, #3
  400252:	4099      	lsls	r1, r3
  400254:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400258:	7851      	ldrb	r1, [r2, #1]
  40025a:	4099      	lsls	r1, r3
  40025c:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  40025e:	6541      	str	r1, [r0, #84]	; 0x54
}
  400260:	bc30      	pop	{r4, r5}
  400262:	4770      	bx	lr

00400264 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  400264:	784b      	ldrb	r3, [r1, #1]
  400266:	780a      	ldrb	r2, [r1, #0]
  400268:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  40026a:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  40026c:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  40026e:	884b      	ldrh	r3, [r1, #2]
  400270:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400274:	6743      	str	r3, [r0, #116]	; 0x74
  400276:	4770      	bx	lr

00400278 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400278:	2200      	movs	r2, #0
  40027a:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  40027c:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <afec_get_config_defaults+0x28>)
  40027e:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400280:	4b08      	ldr	r3, [pc, #32]	; (4002a4 <afec_get_config_defaults+0x2c>)
  400282:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400288:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  40028a:	2302      	movs	r3, #2
  40028c:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40028e:	2301      	movs	r3, #1
  400290:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  400292:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400294:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400296:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400298:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  40029a:	7583      	strb	r3, [r0, #22]
  40029c:	4770      	bx	lr
  40029e:	bf00      	nop
  4002a0:	11e1a300 	.word	0x11e1a300
  4002a4:	005b8d80 	.word	0x005b8d80

004002a8 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4002a8:	2300      	movs	r3, #0
  4002aa:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4002ac:	2301      	movs	r3, #1
  4002ae:	7043      	strb	r3, [r0, #1]
  4002b0:	4770      	bx	lr

004002b2 <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  4002b2:	2300      	movs	r3, #0
  4002b4:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  4002b6:	2320      	movs	r3, #32
  4002b8:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  4002ba:	23ff      	movs	r3, #255	; 0xff
  4002bc:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  4002be:	f640 73ff 	movw	r3, #4095	; 0xfff
  4002c2:	8083      	strh	r3, [r0, #4]
  4002c4:	4770      	bx	lr
	...

004002c8 <afec_init>:
	return afec->AFEC_ISR;
  4002c8:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4002ca:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  4002ce:	d001      	beq.n	4002d4 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4002d0:	2019      	movs	r0, #25
  4002d2:	4770      	bx	lr
{
  4002d4:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4002d6:	2301      	movs	r3, #1
  4002d8:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002da:	7ccb      	ldrb	r3, [r1, #19]
  4002dc:	2b00      	cmp	r3, #0
  4002de:	bf18      	it	ne
  4002e0:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4002e4:	684b      	ldr	r3, [r1, #4]
  4002e6:	688c      	ldr	r4, [r1, #8]
  4002e8:	fbb3 f3f4 	udiv	r3, r3, r4
  4002ec:	3b01      	subs	r3, #1
  4002ee:	021b      	lsls	r3, r3, #8
  4002f0:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002f2:	68cc      	ldr	r4, [r1, #12]
  4002f4:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  4002f8:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002fa:	7c0c      	ldrb	r4, [r1, #16]
  4002fc:	0624      	lsls	r4, r4, #24
  4002fe:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400302:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400304:	7c4c      	ldrb	r4, [r1, #17]
  400306:	0724      	lsls	r4, r4, #28
  400308:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40030c:	4323      	orrs	r3, r4
  40030e:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400310:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400312:	7d0b      	ldrb	r3, [r1, #20]
  400314:	2b00      	cmp	r3, #0
  400316:	bf14      	ite	ne
  400318:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  40031c:	2300      	moveq	r3, #0
  40031e:	680a      	ldr	r2, [r1, #0]
  400320:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400322:	7d4a      	ldrb	r2, [r1, #21]
  400324:	2a00      	cmp	r2, #0
  400326:	bf14      	ite	ne
  400328:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  40032c:	2200      	moveq	r2, #0
			(config->resolution) |
  40032e:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400330:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400332:	7d8b      	ldrb	r3, [r1, #22]
  400334:	021b      	lsls	r3, r3, #8
  400336:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40033a:	f043 030c 	orr.w	r3, r3, #12
  40033e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400342:	4b0f      	ldr	r3, [pc, #60]	; (400380 <afec_init+0xb8>)
  400344:	4298      	cmp	r0, r3
  400346:	d006      	beq.n	400356 <afec_init+0x8e>
	if(afec == AFEC1) {
  400348:	4b0e      	ldr	r3, [pc, #56]	; (400384 <afec_init+0xbc>)
  40034a:	4298      	cmp	r0, r3
  40034c:	d00d      	beq.n	40036a <afec_init+0xa2>
	return STATUS_OK;
  40034e:	2000      	movs	r0, #0
}
  400350:	f85d 4b04 	ldr.w	r4, [sp], #4
  400354:	4770      	bx	lr
  400356:	4b0c      	ldr	r3, [pc, #48]	; (400388 <afec_init+0xc0>)
  400358:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  40035c:	2200      	movs	r2, #0
  40035e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400362:	428b      	cmp	r3, r1
  400364:	d1fb      	bne.n	40035e <afec_init+0x96>
	return STATUS_OK;
  400366:	2000      	movs	r0, #0
  400368:	e7f2      	b.n	400350 <afec_init+0x88>
  40036a:	4b08      	ldr	r3, [pc, #32]	; (40038c <afec_init+0xc4>)
  40036c:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400370:	2200      	movs	r2, #0
  400372:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400376:	428b      	cmp	r3, r1
  400378:	d1fb      	bne.n	400372 <afec_init+0xaa>
	return STATUS_OK;
  40037a:	2000      	movs	r0, #0
  40037c:	e7e8      	b.n	400350 <afec_init+0x88>
  40037e:	bf00      	nop
  400380:	4003c000 	.word	0x4003c000
  400384:	40064000 	.word	0x40064000
  400388:	20400c7c 	.word	0x20400c7c
  40038c:	20400cc0 	.word	0x20400cc0

00400390 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400390:	4b0c      	ldr	r3, [pc, #48]	; (4003c4 <afec_enable_interrupt+0x34>)
  400392:	4299      	cmp	r1, r3
  400394:	d007      	beq.n	4003a6 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400396:	290b      	cmp	r1, #11
  400398:	d80b      	bhi.n	4003b2 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40039a:	d006      	beq.n	4003aa <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  40039c:	2301      	movs	r3, #1
  40039e:	fa03 f101 	lsl.w	r1, r3, r1
  4003a2:	6241      	str	r1, [r0, #36]	; 0x24
  4003a4:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4003a6:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4003a8:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4003aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003ae:	6243      	str	r3, [r0, #36]	; 0x24
  4003b0:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4003b2:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4003b4:	bf94      	ite	ls
  4003b6:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  4003b8:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4003ba:	2301      	movs	r3, #1
  4003bc:	fa03 f101 	lsl.w	r1, r3, r1
  4003c0:	6241      	str	r1, [r0, #36]	; 0x24
  4003c2:	4770      	bx	lr
  4003c4:	47000fff 	.word	0x47000fff

004003c8 <afec_set_callback>:
{
  4003c8:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4003ca:	4c11      	ldr	r4, [pc, #68]	; (400410 <afec_set_callback+0x48>)
  4003cc:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4003ce:	bf0c      	ite	eq
  4003d0:	2410      	moveq	r4, #16
  4003d2:	2400      	movne	r4, #0
  4003d4:	440c      	add	r4, r1
  4003d6:	4d0f      	ldr	r5, [pc, #60]	; (400414 <afec_set_callback+0x4c>)
  4003d8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4003dc:	d10a      	bne.n	4003f4 <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003de:	4a0e      	ldr	r2, [pc, #56]	; (400418 <afec_set_callback+0x50>)
  4003e0:	f44f 7480 	mov.w	r4, #256	; 0x100
  4003e4:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003e8:	015b      	lsls	r3, r3, #5
  4003ea:	b2db      	uxtb	r3, r3
  4003ec:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4003f0:	6054      	str	r4, [r2, #4]
  4003f2:	e009      	b.n	400408 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003f4:	4a08      	ldr	r2, [pc, #32]	; (400418 <afec_set_callback+0x50>)
  4003f6:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  4003fa:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003fe:	015b      	lsls	r3, r3, #5
  400400:	b2db      	uxtb	r3, r3
  400402:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400406:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400408:	4b04      	ldr	r3, [pc, #16]	; (40041c <afec_set_callback+0x54>)
  40040a:	4798      	blx	r3
  40040c:	bd38      	pop	{r3, r4, r5, pc}
  40040e:	bf00      	nop
  400410:	40064000 	.word	0x40064000
  400414:	20400c80 	.word	0x20400c80
  400418:	e000e100 	.word	0xe000e100
  40041c:	00400391 	.word	0x00400391

00400420 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400420:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400422:	4802      	ldr	r0, [pc, #8]	; (40042c <AFEC0_Handler+0xc>)
  400424:	4b02      	ldr	r3, [pc, #8]	; (400430 <AFEC0_Handler+0x10>)
  400426:	4798      	blx	r3
  400428:	bd08      	pop	{r3, pc}
  40042a:	bf00      	nop
  40042c:	4003c000 	.word	0x4003c000
  400430:	004001ad 	.word	0x004001ad

00400434 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400434:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400436:	4802      	ldr	r0, [pc, #8]	; (400440 <AFEC1_Handler+0xc>)
  400438:	4b02      	ldr	r3, [pc, #8]	; (400444 <AFEC1_Handler+0x10>)
  40043a:	4798      	blx	r3
  40043c:	bd08      	pop	{r3, pc}
  40043e:	bf00      	nop
  400440:	40064000 	.word	0x40064000
  400444:	004001ad 	.word	0x004001ad

00400448 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400448:	b500      	push	{lr}
  40044a:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  40044c:	4b13      	ldr	r3, [pc, #76]	; (40049c <afec_enable+0x54>)
  40044e:	4298      	cmp	r0, r3
  400450:	bf0c      	ite	eq
  400452:	2028      	moveq	r0, #40	; 0x28
  400454:	201d      	movne	r0, #29
  400456:	4b12      	ldr	r3, [pc, #72]	; (4004a0 <afec_enable+0x58>)
  400458:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40045a:	4b12      	ldr	r3, [pc, #72]	; (4004a4 <afec_enable+0x5c>)
  40045c:	789b      	ldrb	r3, [r3, #2]
  40045e:	2bff      	cmp	r3, #255	; 0xff
  400460:	d01a      	beq.n	400498 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400462:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400466:	fab3 f383 	clz	r3, r3
  40046a:	095b      	lsrs	r3, r3, #5
  40046c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40046e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400470:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400474:	2200      	movs	r2, #0
  400476:	4b0c      	ldr	r3, [pc, #48]	; (4004a8 <afec_enable+0x60>)
  400478:	701a      	strb	r2, [r3, #0]
	return flags;
  40047a:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40047c:	4a09      	ldr	r2, [pc, #36]	; (4004a4 <afec_enable+0x5c>)
  40047e:	7893      	ldrb	r3, [r2, #2]
  400480:	3301      	adds	r3, #1
  400482:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400484:	b129      	cbz	r1, 400492 <afec_enable+0x4a>
		cpu_irq_enable();
  400486:	2201      	movs	r2, #1
  400488:	4b07      	ldr	r3, [pc, #28]	; (4004a8 <afec_enable+0x60>)
  40048a:	701a      	strb	r2, [r3, #0]
  40048c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400490:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400492:	b003      	add	sp, #12
  400494:	f85d fb04 	ldr.w	pc, [sp], #4
  400498:	e7fe      	b.n	400498 <afec_enable+0x50>
  40049a:	bf00      	nop
  40049c:	40064000 	.word	0x40064000
  4004a0:	00400cad 	.word	0x00400cad
  4004a4:	20400c78 	.word	0x20400c78
  4004a8:	20400000 	.word	0x20400000

004004ac <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  4004ac:	b4f0      	push	{r4, r5, r6, r7}
  4004ae:	b08c      	sub	sp, #48	; 0x30
  4004b0:	4607      	mov	r7, r0
  4004b2:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  4004b4:	ac01      	add	r4, sp, #4
  4004b6:	4d11      	ldr	r5, [pc, #68]	; (4004fc <pwm_clocks_generate+0x50>)
  4004b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4004ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4004bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4004be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4004c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4004c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4004c8:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  4004ca:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  4004cc:	f852 0b04 	ldr.w	r0, [r2], #4
  4004d0:	fbb6 f0f0 	udiv	r0, r6, r0
  4004d4:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  4004d8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  4004dc:	d907      	bls.n	4004ee <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
  4004de:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  4004e0:	2b0b      	cmp	r3, #11
  4004e2:	d1f3      	bne.n	4004cc <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  4004e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
  4004e8:	b00c      	add	sp, #48	; 0x30
  4004ea:	bcf0      	pop	{r4, r5, r6, r7}
  4004ec:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  4004ee:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
  4004f0:	bf94      	ite	ls
  4004f2:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
  4004f6:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
  4004fa:	e7f5      	b.n	4004e8 <pwm_clocks_generate+0x3c>
  4004fc:	00406358 	.word	0x00406358

00400500 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  400500:	b570      	push	{r4, r5, r6, lr}
  400502:	4606      	mov	r6, r0
  400504:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  400506:	680c      	ldr	r4, [r1, #0]
  400508:	b144      	cbz	r4, 40051c <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  40050a:	6889      	ldr	r1, [r1, #8]
  40050c:	4620      	mov	r0, r4
  40050e:	4b0c      	ldr	r3, [pc, #48]	; (400540 <pwm_init+0x40>)
  400510:	4798      	blx	r3
  400512:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
  400514:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400518:	4298      	cmp	r0, r3
  40051a:	d00c      	beq.n	400536 <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  40051c:	6868      	ldr	r0, [r5, #4]
  40051e:	b140      	cbz	r0, 400532 <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  400520:	68a9      	ldr	r1, [r5, #8]
  400522:	4b07      	ldr	r3, [pc, #28]	; (400540 <pwm_init+0x40>)
  400524:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  400526:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40052a:	4298      	cmp	r0, r3
  40052c:	d005      	beq.n	40053a <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
  40052e:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  400532:	6034      	str	r4, [r6, #0]
#endif
	return 0;
  400534:	2400      	movs	r4, #0
}
  400536:	4620      	mov	r0, r4
  400538:	bd70      	pop	{r4, r5, r6, pc}
			return result;
  40053a:	4604      	mov	r4, r0
  40053c:	e7fb      	b.n	400536 <pwm_init+0x36>
  40053e:	bf00      	nop
  400540:	004004ad 	.word	0x004004ad

00400544 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  400544:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  400546:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400548:	684b      	ldr	r3, [r1, #4]
  40054a:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  40054e:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400550:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  400552:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400554:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
  400556:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400558:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
  40055c:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40055e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
  400562:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400564:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
  400568:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40056a:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  40056e:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  400572:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  400576:	68cb      	ldr	r3, [r1, #12]
  400578:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  40057c:	690b      	ldr	r3, [r1, #16]
  40057e:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  400582:	7d8b      	ldrb	r3, [r1, #22]
  400584:	b13b      	cbz	r3, 400596 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  400586:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  400588:	8b4b      	ldrh	r3, [r1, #26]
  40058a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  40058e:	eb00 1442 	add.w	r4, r0, r2, lsl #5
  400592:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  400596:	6c85      	ldr	r5, [r0, #72]	; 0x48
  400598:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  40059c:	4093      	lsls	r3, r2
  40059e:	43db      	mvns	r3, r3
  4005a0:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  4005a2:	7fcc      	ldrb	r4, [r1, #31]
  4005a4:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  4005a8:	7f8c      	ldrb	r4, [r1, #30]
  4005aa:	4094      	lsls	r4, r2
  4005ac:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  4005b0:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  4005b2:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  4005b4:	6c44      	ldr	r4, [r0, #68]	; 0x44
  4005b6:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  4005b8:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  4005bc:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  4005c0:	f891 4020 	ldrb.w	r4, [r1, #32]
  4005c4:	4094      	lsls	r4, r2
  4005c6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4005ca:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  4005cc:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  4005ce:	2301      	movs	r3, #1
  4005d0:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
  4005d2:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  4005d6:	2c00      	cmp	r4, #0
  4005d8:	d051      	beq.n	40067e <pwm_channel_init+0x13a>
		p_pwm->PWM_SCM |= channel;
  4005da:	6a04      	ldr	r4, [r0, #32]
  4005dc:	431c      	orrs	r4, r3
  4005de:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
	}

	/* Fault Protection Value Register */
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (p_channel->ul_fault_output_pwmh == PWM_HIGHZ) {
  4005e0:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  4005e4:	2c02      	cmp	r4, #2
  4005e6:	d04f      	beq.n	400688 <pwm_channel_init+0x144>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
	} else {
		p_pwm->PWM_FPV2 &= ~(0x01 << ch_num);
  4005e8:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
  4005ec:	43dc      	mvns	r4, r3
  4005ee:	4025      	ands	r5, r4
  4005f0:	f8c0 50c0 	str.w	r5, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  4005f4:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
  4005f8:	2d01      	cmp	r5, #1
  4005fa:	d04b      	beq.n	400694 <pwm_channel_init+0x150>
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
		} else {
			p_pwm->PWM_FPV1 &= (~(0x01 << ch_num));
  4005fc:	6e85      	ldr	r5, [r0, #104]	; 0x68
  4005fe:	402c      	ands	r4, r5
  400600:	6684      	str	r4, [r0, #104]	; 0x68
		}
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGHZ) {
  400602:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  400606:	2c02      	cmp	r4, #2
  400608:	d048      	beq.n	40069c <pwm_channel_init+0x158>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV2 &= ~((0x01 << ch_num) << 16);
  40060a:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
  40060e:	041b      	lsls	r3, r3, #16
  400610:	43dc      	mvns	r4, r3
  400612:	4025      	ands	r5, r4
  400614:	f8c0 50c0 	str.w	r5, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  400618:	f891 5025 	ldrb.w	r5, [r1, #37]	; 0x25
  40061c:	2d01      	cmp	r5, #1
  40061e:	d044      	beq.n	4006aa <pwm_channel_init+0x166>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
  400620:	6e83      	ldr	r3, [r0, #104]	; 0x68
  400622:	401c      	ands	r4, r3
  400624:	6684      	str	r4, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  400626:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  400628:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  40062a:	23ff      	movs	r3, #255	; 0xff
  40062c:	4093      	lsls	r3, r2
  40062e:	ea24 0403 	bic.w	r4, r4, r3
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  400632:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
  400636:	fa03 f202 	lsl.w	r2, r3, r2
  40063a:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
  40063c:	66c2      	str	r2, [r0, #108]	; 0x6c
#endif
#endif

	ch_num = p_channel->channel;
  40063e:	680b      	ldr	r3, [r1, #0]
	}
	p_pwm->PWM_CH_NUM_0X400[ch_num].PWM_CAE =
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (!ch_num) {
  400640:	b953      	cbnz	r3, 400658 <pwm_channel_init+0x114>
		if (p_channel->spread_spectrum_mode ==
  400642:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
  400646:	2a01      	cmp	r2, #1
		PWM_SPREAD_SPECTRUM_MODE_RANDOM) {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread) |
  400648:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  40064a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  40064e:	bf08      	it	eq
  400650:	f042 7280 	orreq.w	r2, r2, #16777216	; 0x1000000
			PWM_SSPR_SPRDM;
			} else {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread);
  400654:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  400658:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		}
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
  40065c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  400660:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  400664:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
  400668:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
  40066c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  40066e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  400672:	4313      	orrs	r3, r2
  400674:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
#endif

	return 0;
}
  400678:	2000      	movs	r0, #0
  40067a:	bc70      	pop	{r4, r5, r6}
  40067c:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  40067e:	6a04      	ldr	r4, [r0, #32]
  400680:	ea24 0403 	bic.w	r4, r4, r3
  400684:	6204      	str	r4, [r0, #32]
  400686:	e7ab      	b.n	4005e0 <pwm_channel_init+0x9c>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
  400688:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  40068c:	431c      	orrs	r4, r3
  40068e:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
  400692:	e7b6      	b.n	400602 <pwm_channel_init+0xbe>
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
  400694:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400696:	431c      	orrs	r4, r3
  400698:	6684      	str	r4, [r0, #104]	; 0x68
  40069a:	e7b2      	b.n	400602 <pwm_channel_init+0xbe>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
  40069c:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  4006a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
  4006a4:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
  4006a8:	e7bd      	b.n	400626 <pwm_channel_init+0xe2>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
  4006aa:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4006ac:	4323      	orrs	r3, r4
  4006ae:	6683      	str	r3, [r0, #104]	; 0x68
  4006b0:	e7b9      	b.n	400626 <pwm_channel_init+0xe2>

004006b2 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  4006b2:	690b      	ldr	r3, [r1, #16]
  4006b4:	4293      	cmp	r3, r2
  4006b6:	d202      	bcs.n	4006be <pwm_channel_update_duty+0xc>
		return PWM_INVALID_ARGUMENT;
  4006b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  4006bc:	4770      	bx	lr
	uint32_t ch_num = p_channel->channel;
  4006be:	680b      	ldr	r3, [r1, #0]
		p_channel->ul_duty = ul_duty;
  4006c0:	60ca      	str	r2, [r1, #12]
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  4006c2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  4006c6:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
	return 0;
  4006ca:	2000      	movs	r0, #0
  4006cc:	4770      	bx	lr

004006ce <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  4006ce:	2301      	movs	r3, #1
  4006d0:	fa03 f101 	lsl.w	r1, r3, r1
  4006d4:	6041      	str	r1, [r0, #4]
  4006d6:	4770      	bx	lr

004006d8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  4006d8:	2301      	movs	r3, #1
  4006da:	fa03 f101 	lsl.w	r1, r3, r1
  4006de:	6081      	str	r1, [r0, #8]
  4006e0:	4770      	bx	lr
	...

004006e4 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4006e4:	4b03      	ldr	r3, [pc, #12]	; (4006f4 <rtt_init+0x10>)
  4006e6:	681b      	ldr	r3, [r3, #0]
  4006e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4006ec:	4319      	orrs	r1, r3
  4006ee:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4006f0:	2000      	movs	r0, #0
  4006f2:	4770      	bx	lr
  4006f4:	204009d4 	.word	0x204009d4

004006f8 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4006f8:	b941      	cbnz	r1, 40070c <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4006fa:	4a09      	ldr	r2, [pc, #36]	; (400720 <rtt_sel_source+0x28>)
  4006fc:	6813      	ldr	r3, [r2, #0]
  4006fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  400702:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400704:	6802      	ldr	r2, [r0, #0]
  400706:	4313      	orrs	r3, r2
  400708:	6003      	str	r3, [r0, #0]
  40070a:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  40070c:	4a04      	ldr	r2, [pc, #16]	; (400720 <rtt_sel_source+0x28>)
  40070e:	6813      	ldr	r3, [r2, #0]
  400710:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400714:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400716:	6802      	ldr	r2, [r0, #0]
  400718:	4313      	orrs	r3, r2
  40071a:	6003      	str	r3, [r0, #0]
  40071c:	4770      	bx	lr
  40071e:	bf00      	nop
  400720:	204009d4 	.word	0x204009d4

00400724 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  400724:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400726:	4b03      	ldr	r3, [pc, #12]	; (400734 <rtt_enable_interrupt+0x10>)
  400728:	681b      	ldr	r3, [r3, #0]
  40072a:	4319      	orrs	r1, r3
  40072c:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  40072e:	6001      	str	r1, [r0, #0]
  400730:	4770      	bx	lr
  400732:	bf00      	nop
  400734:	204009d4 	.word	0x204009d4

00400738 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400738:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  40073a:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40073e:	4b02      	ldr	r3, [pc, #8]	; (400748 <rtt_disable_interrupt+0x10>)
  400740:	681b      	ldr	r3, [r3, #0]
  400742:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400744:	6001      	str	r1, [r0, #0]
  400746:	4770      	bx	lr
  400748:	204009d4 	.word	0x204009d4

0040074c <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  40074c:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  40074e:	6883      	ldr	r3, [r0, #8]
  400750:	429a      	cmp	r2, r3
  400752:	d003      	beq.n	40075c <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  400754:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  400756:	6883      	ldr	r3, [r0, #8]
  400758:	4293      	cmp	r3, r2
  40075a:	d1fb      	bne.n	400754 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  40075c:	4618      	mov	r0, r3
  40075e:	4770      	bx	lr

00400760 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400760:	68c0      	ldr	r0, [r0, #12]
}
  400762:	4770      	bx	lr

00400764 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  400764:	b570      	push	{r4, r5, r6, lr}
  400766:	4606      	mov	r6, r0
  400768:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  40076a:	6804      	ldr	r4, [r0, #0]
  40076c:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400770:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400774:	4809      	ldr	r0, [pc, #36]	; (40079c <rtt_write_alarm_time+0x38>)
  400776:	4b0a      	ldr	r3, [pc, #40]	; (4007a0 <rtt_write_alarm_time+0x3c>)
  400778:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  40077a:	b92d      	cbnz	r5, 400788 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  40077c:	f04f 33ff 	mov.w	r3, #4294967295
  400780:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400782:	b924      	cbnz	r4, 40078e <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400784:	2000      	movs	r0, #0
  400786:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400788:	3d01      	subs	r5, #1
  40078a:	6075      	str	r5, [r6, #4]
  40078c:	e7f9      	b.n	400782 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  40078e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400792:	4802      	ldr	r0, [pc, #8]	; (40079c <rtt_write_alarm_time+0x38>)
  400794:	4b03      	ldr	r3, [pc, #12]	; (4007a4 <rtt_write_alarm_time+0x40>)
  400796:	4798      	blx	r3
  400798:	e7f4      	b.n	400784 <rtt_write_alarm_time+0x20>
  40079a:	bf00      	nop
  40079c:	400e1830 	.word	0x400e1830
  4007a0:	00400739 	.word	0x00400739
  4007a4:	00400725 	.word	0x00400725

004007a8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4007a8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4007aa:	4810      	ldr	r0, [pc, #64]	; (4007ec <sysclk_init+0x44>)
  4007ac:	4b10      	ldr	r3, [pc, #64]	; (4007f0 <sysclk_init+0x48>)
  4007ae:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4007b0:	213e      	movs	r1, #62	; 0x3e
  4007b2:	2000      	movs	r0, #0
  4007b4:	4b0f      	ldr	r3, [pc, #60]	; (4007f4 <sysclk_init+0x4c>)
  4007b6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4007b8:	4c0f      	ldr	r4, [pc, #60]	; (4007f8 <sysclk_init+0x50>)
  4007ba:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4007bc:	2800      	cmp	r0, #0
  4007be:	d0fc      	beq.n	4007ba <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4007c0:	4b0e      	ldr	r3, [pc, #56]	; (4007fc <sysclk_init+0x54>)
  4007c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4007c4:	4a0e      	ldr	r2, [pc, #56]	; (400800 <sysclk_init+0x58>)
  4007c6:	4b0f      	ldr	r3, [pc, #60]	; (400804 <sysclk_init+0x5c>)
  4007c8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4007ca:	4c0f      	ldr	r4, [pc, #60]	; (400808 <sysclk_init+0x60>)
  4007cc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4007ce:	2800      	cmp	r0, #0
  4007d0:	d0fc      	beq.n	4007cc <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4007d2:	2002      	movs	r0, #2
  4007d4:	4b0d      	ldr	r3, [pc, #52]	; (40080c <sysclk_init+0x64>)
  4007d6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4007d8:	2000      	movs	r0, #0
  4007da:	4b0d      	ldr	r3, [pc, #52]	; (400810 <sysclk_init+0x68>)
  4007dc:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4007de:	4b0d      	ldr	r3, [pc, #52]	; (400814 <sysclk_init+0x6c>)
  4007e0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4007e2:	4802      	ldr	r0, [pc, #8]	; (4007ec <sysclk_init+0x44>)
  4007e4:	4b02      	ldr	r3, [pc, #8]	; (4007f0 <sysclk_init+0x48>)
  4007e6:	4798      	blx	r3
  4007e8:	bd10      	pop	{r4, pc}
  4007ea:	bf00      	nop
  4007ec:	11e1a300 	.word	0x11e1a300
  4007f0:	0040100d 	.word	0x0040100d
  4007f4:	00400c29 	.word	0x00400c29
  4007f8:	00400c7d 	.word	0x00400c7d
  4007fc:	00400c8d 	.word	0x00400c8d
  400800:	20183f01 	.word	0x20183f01
  400804:	400e0600 	.word	0x400e0600
  400808:	00400c9d 	.word	0x00400c9d
  40080c:	00400b8d 	.word	0x00400b8d
  400810:	00400bc5 	.word	0x00400bc5
  400814:	00400f01 	.word	0x00400f01

00400818 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40081c:	b980      	cbnz	r0, 400840 <_read+0x28>
  40081e:	460c      	mov	r4, r1
  400820:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400822:	2a00      	cmp	r2, #0
  400824:	dd0f      	ble.n	400846 <_read+0x2e>
  400826:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400828:	4e08      	ldr	r6, [pc, #32]	; (40084c <_read+0x34>)
  40082a:	4d09      	ldr	r5, [pc, #36]	; (400850 <_read+0x38>)
  40082c:	6830      	ldr	r0, [r6, #0]
  40082e:	4621      	mov	r1, r4
  400830:	682b      	ldr	r3, [r5, #0]
  400832:	4798      	blx	r3
		ptr++;
  400834:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400836:	42bc      	cmp	r4, r7
  400838:	d1f8      	bne.n	40082c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40083a:	4640      	mov	r0, r8
  40083c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400840:	f04f 38ff 	mov.w	r8, #4294967295
  400844:	e7f9      	b.n	40083a <_read+0x22>
	for (; len > 0; --len) {
  400846:	4680      	mov	r8, r0
  400848:	e7f7      	b.n	40083a <_read+0x22>
  40084a:	bf00      	nop
  40084c:	20400d08 	.word	0x20400d08
  400850:	20400d00 	.word	0x20400d00

00400854 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400854:	3801      	subs	r0, #1
  400856:	2802      	cmp	r0, #2
  400858:	d815      	bhi.n	400886 <_write+0x32>
{
  40085a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40085e:	460e      	mov	r6, r1
  400860:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400862:	b19a      	cbz	r2, 40088c <_write+0x38>
  400864:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400866:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4008a0 <_write+0x4c>
  40086a:	4f0c      	ldr	r7, [pc, #48]	; (40089c <_write+0x48>)
  40086c:	f8d8 0000 	ldr.w	r0, [r8]
  400870:	f815 1b01 	ldrb.w	r1, [r5], #1
  400874:	683b      	ldr	r3, [r7, #0]
  400876:	4798      	blx	r3
  400878:	2800      	cmp	r0, #0
  40087a:	db0a      	blt.n	400892 <_write+0x3e>
  40087c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40087e:	3c01      	subs	r4, #1
  400880:	d1f4      	bne.n	40086c <_write+0x18>
  400882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400886:	f04f 30ff 	mov.w	r0, #4294967295
  40088a:	4770      	bx	lr
	for (; len != 0; --len) {
  40088c:	4610      	mov	r0, r2
  40088e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400892:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40089a:	bf00      	nop
  40089c:	20400d04 	.word	0x20400d04
  4008a0:	20400d08 	.word	0x20400d08

004008a4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4008a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4008a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4008aa:	4b5c      	ldr	r3, [pc, #368]	; (400a1c <board_init+0x178>)
  4008ac:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  4008ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4008b2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4008b6:	4b5a      	ldr	r3, [pc, #360]	; (400a20 <board_init+0x17c>)
  4008b8:	2200      	movs	r2, #0
  4008ba:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4008be:	695a      	ldr	r2, [r3, #20]
  4008c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4008c4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4008c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4008ca:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4008ce:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4008d2:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4008d6:	f007 0007 	and.w	r0, r7, #7
  4008da:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4008dc:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4008e0:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4008e4:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4008e8:	f3bf 8f4f 	dsb	sy
  4008ec:	f04f 34ff 	mov.w	r4, #4294967295
  4008f0:	fa04 fc00 	lsl.w	ip, r4, r0
  4008f4:	fa06 f000 	lsl.w	r0, r6, r0
  4008f8:	fa04 f40e 	lsl.w	r4, r4, lr
  4008fc:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400900:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400902:	463a      	mov	r2, r7
  400904:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400906:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  40090a:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  40090e:	3a01      	subs	r2, #1
  400910:	4423      	add	r3, r4
  400912:	f1b2 3fff 	cmp.w	r2, #4294967295
  400916:	d1f6      	bne.n	400906 <board_init+0x62>
        } while(sets--);
  400918:	3e01      	subs	r6, #1
  40091a:	4460      	add	r0, ip
  40091c:	f1b6 3fff 	cmp.w	r6, #4294967295
  400920:	d1ef      	bne.n	400902 <board_init+0x5e>
  400922:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400926:	4b3e      	ldr	r3, [pc, #248]	; (400a20 <board_init+0x17c>)
  400928:	695a      	ldr	r2, [r3, #20]
  40092a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40092e:	615a      	str	r2, [r3, #20]
  400930:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400934:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400938:	4a3a      	ldr	r2, [pc, #232]	; (400a24 <board_init+0x180>)
  40093a:	493b      	ldr	r1, [pc, #236]	; (400a28 <board_init+0x184>)
  40093c:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40093e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400942:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400944:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400948:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40094c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400950:	f022 0201 	bic.w	r2, r2, #1
  400954:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400958:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  40095c:	f022 0201 	bic.w	r2, r2, #1
  400960:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400964:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400968:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40096c:	200a      	movs	r0, #10
  40096e:	4c2f      	ldr	r4, [pc, #188]	; (400a2c <board_init+0x188>)
  400970:	47a0      	blx	r4
  400972:	200b      	movs	r0, #11
  400974:	47a0      	blx	r4
  400976:	200c      	movs	r0, #12
  400978:	47a0      	blx	r4
  40097a:	2010      	movs	r0, #16
  40097c:	47a0      	blx	r4
  40097e:	2011      	movs	r0, #17
  400980:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400982:	4b2b      	ldr	r3, [pc, #172]	; (400a30 <board_init+0x18c>)
  400984:	f44f 7280 	mov.w	r2, #256	; 0x100
  400988:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40098a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40098e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400990:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400994:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400998:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40099a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40099e:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4009a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009a4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4009a6:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4009a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4009ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4009ae:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4009b2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009b4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4009b6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4009ba:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4009bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4009c0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4009c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4009c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4009cc:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4009ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009d2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009d4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4009d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4009da:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4009dc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4009e0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009e2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4009e4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4009e8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4009ea:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4009ec:	4a11      	ldr	r2, [pc, #68]	; (400a34 <board_init+0x190>)
  4009ee:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4009f2:	f043 0310 	orr.w	r3, r3, #16
  4009f6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4009fa:	4b0f      	ldr	r3, [pc, #60]	; (400a38 <board_init+0x194>)
  4009fc:	2210      	movs	r2, #16
  4009fe:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400a00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a04:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a06:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400a0c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400a0e:	4311      	orrs	r1, r2
  400a10:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400a12:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400a14:	4311      	orrs	r1, r2
  400a16:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a18:	605a      	str	r2, [r3, #4]
  400a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a1c:	400e1850 	.word	0x400e1850
  400a20:	e000ed00 	.word	0xe000ed00
  400a24:	400e0c00 	.word	0x400e0c00
  400a28:	5a00080c 	.word	0x5a00080c
  400a2c:	00400cad 	.word	0x00400cad
  400a30:	400e1200 	.word	0x400e1200
  400a34:	40088000 	.word	0x40088000
  400a38:	400e1000 	.word	0x400e1000

00400a3c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400a3c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400a3e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400a42:	d03a      	beq.n	400aba <pio_set_peripheral+0x7e>
  400a44:	d813      	bhi.n	400a6e <pio_set_peripheral+0x32>
  400a46:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400a4a:	d025      	beq.n	400a98 <pio_set_peripheral+0x5c>
  400a4c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400a50:	d10a      	bne.n	400a68 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a52:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a54:	4313      	orrs	r3, r2
  400a56:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a58:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a5a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400a5c:	400b      	ands	r3, r1
  400a5e:	ea23 0302 	bic.w	r3, r3, r2
  400a62:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400a64:	6042      	str	r2, [r0, #4]
  400a66:	4770      	bx	lr
	switch (ul_type) {
  400a68:	2900      	cmp	r1, #0
  400a6a:	d1fb      	bne.n	400a64 <pio_set_peripheral+0x28>
  400a6c:	4770      	bx	lr
  400a6e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400a72:	d021      	beq.n	400ab8 <pio_set_peripheral+0x7c>
  400a74:	d809      	bhi.n	400a8a <pio_set_peripheral+0x4e>
  400a76:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400a7a:	d1f3      	bne.n	400a64 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a7c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a7e:	4313      	orrs	r3, r2
  400a80:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400a82:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400a84:	4313      	orrs	r3, r2
  400a86:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a88:	e7ec      	b.n	400a64 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400a8a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400a8e:	d013      	beq.n	400ab8 <pio_set_peripheral+0x7c>
  400a90:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400a94:	d010      	beq.n	400ab8 <pio_set_peripheral+0x7c>
  400a96:	e7e5      	b.n	400a64 <pio_set_peripheral+0x28>
{
  400a98:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a9a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400a9c:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400a9e:	43d3      	mvns	r3, r2
  400aa0:	4021      	ands	r1, r4
  400aa2:	461c      	mov	r4, r3
  400aa4:	4019      	ands	r1, r3
  400aa6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400aa8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400aaa:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400aac:	400b      	ands	r3, r1
  400aae:	4023      	ands	r3, r4
  400ab0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400ab2:	6042      	str	r2, [r0, #4]
}
  400ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ab8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400aba:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400abc:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400abe:	400b      	ands	r3, r1
  400ac0:	ea23 0302 	bic.w	r3, r3, r2
  400ac4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400ac6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ac8:	4313      	orrs	r3, r2
  400aca:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400acc:	e7ca      	b.n	400a64 <pio_set_peripheral+0x28>

00400ace <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400ace:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400ad0:	4770      	bx	lr

00400ad2 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400ad2:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400ad4:	4770      	bx	lr
	...

00400ad8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400adc:	4604      	mov	r4, r0
  400ade:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400ae0:	4b0e      	ldr	r3, [pc, #56]	; (400b1c <pio_handler_process+0x44>)
  400ae2:	4798      	blx	r3
  400ae4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400ae6:	4620      	mov	r0, r4
  400ae8:	4b0d      	ldr	r3, [pc, #52]	; (400b20 <pio_handler_process+0x48>)
  400aea:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400aec:	4005      	ands	r5, r0
  400aee:	d013      	beq.n	400b18 <pio_handler_process+0x40>
  400af0:	4c0c      	ldr	r4, [pc, #48]	; (400b24 <pio_handler_process+0x4c>)
  400af2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400af6:	e003      	b.n	400b00 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400af8:	42b4      	cmp	r4, r6
  400afa:	d00d      	beq.n	400b18 <pio_handler_process+0x40>
  400afc:	3410      	adds	r4, #16
		while (status != 0) {
  400afe:	b15d      	cbz	r5, 400b18 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400b00:	6820      	ldr	r0, [r4, #0]
  400b02:	4540      	cmp	r0, r8
  400b04:	d1f8      	bne.n	400af8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400b06:	6861      	ldr	r1, [r4, #4]
  400b08:	4229      	tst	r1, r5
  400b0a:	d0f5      	beq.n	400af8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400b0c:	68e3      	ldr	r3, [r4, #12]
  400b0e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400b10:	6863      	ldr	r3, [r4, #4]
  400b12:	ea25 0503 	bic.w	r5, r5, r3
  400b16:	e7ef      	b.n	400af8 <pio_handler_process+0x20>
  400b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b1c:	00400acf 	.word	0x00400acf
  400b20:	00400ad3 	.word	0x00400ad3
  400b24:	204009d8 	.word	0x204009d8

00400b28 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400b28:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400b2a:	210a      	movs	r1, #10
  400b2c:	4801      	ldr	r0, [pc, #4]	; (400b34 <PIOA_Handler+0xc>)
  400b2e:	4b02      	ldr	r3, [pc, #8]	; (400b38 <PIOA_Handler+0x10>)
  400b30:	4798      	blx	r3
  400b32:	bd08      	pop	{r3, pc}
  400b34:	400e0e00 	.word	0x400e0e00
  400b38:	00400ad9 	.word	0x00400ad9

00400b3c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400b3c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400b3e:	210b      	movs	r1, #11
  400b40:	4801      	ldr	r0, [pc, #4]	; (400b48 <PIOB_Handler+0xc>)
  400b42:	4b02      	ldr	r3, [pc, #8]	; (400b4c <PIOB_Handler+0x10>)
  400b44:	4798      	blx	r3
  400b46:	bd08      	pop	{r3, pc}
  400b48:	400e1000 	.word	0x400e1000
  400b4c:	00400ad9 	.word	0x00400ad9

00400b50 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400b50:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400b52:	210c      	movs	r1, #12
  400b54:	4801      	ldr	r0, [pc, #4]	; (400b5c <PIOC_Handler+0xc>)
  400b56:	4b02      	ldr	r3, [pc, #8]	; (400b60 <PIOC_Handler+0x10>)
  400b58:	4798      	blx	r3
  400b5a:	bd08      	pop	{r3, pc}
  400b5c:	400e1200 	.word	0x400e1200
  400b60:	00400ad9 	.word	0x00400ad9

00400b64 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400b64:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400b66:	2110      	movs	r1, #16
  400b68:	4801      	ldr	r0, [pc, #4]	; (400b70 <PIOD_Handler+0xc>)
  400b6a:	4b02      	ldr	r3, [pc, #8]	; (400b74 <PIOD_Handler+0x10>)
  400b6c:	4798      	blx	r3
  400b6e:	bd08      	pop	{r3, pc}
  400b70:	400e1400 	.word	0x400e1400
  400b74:	00400ad9 	.word	0x00400ad9

00400b78 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400b78:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400b7a:	2111      	movs	r1, #17
  400b7c:	4801      	ldr	r0, [pc, #4]	; (400b84 <PIOE_Handler+0xc>)
  400b7e:	4b02      	ldr	r3, [pc, #8]	; (400b88 <PIOE_Handler+0x10>)
  400b80:	4798      	blx	r3
  400b82:	bd08      	pop	{r3, pc}
  400b84:	400e1600 	.word	0x400e1600
  400b88:	00400ad9 	.word	0x00400ad9

00400b8c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400b8c:	2803      	cmp	r0, #3
  400b8e:	d011      	beq.n	400bb4 <pmc_mck_set_division+0x28>
  400b90:	2804      	cmp	r0, #4
  400b92:	d012      	beq.n	400bba <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b94:	2802      	cmp	r0, #2
  400b96:	bf0c      	ite	eq
  400b98:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400b9c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400b9e:	4a08      	ldr	r2, [pc, #32]	; (400bc0 <pmc_mck_set_division+0x34>)
  400ba0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400ba6:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400ba8:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400baa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400bac:	f013 0f08 	tst.w	r3, #8
  400bb0:	d0fb      	beq.n	400baa <pmc_mck_set_division+0x1e>
}
  400bb2:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400bb4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400bb8:	e7f1      	b.n	400b9e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400bba:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400bbe:	e7ee      	b.n	400b9e <pmc_mck_set_division+0x12>
  400bc0:	400e0600 	.word	0x400e0600

00400bc4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400bc4:	4a17      	ldr	r2, [pc, #92]	; (400c24 <pmc_switch_mck_to_pllack+0x60>)
  400bc6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400bcc:	4318      	orrs	r0, r3
  400bce:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bd0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400bd2:	f013 0f08 	tst.w	r3, #8
  400bd6:	d10a      	bne.n	400bee <pmc_switch_mck_to_pllack+0x2a>
  400bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400bdc:	4911      	ldr	r1, [pc, #68]	; (400c24 <pmc_switch_mck_to_pllack+0x60>)
  400bde:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400be0:	f012 0f08 	tst.w	r2, #8
  400be4:	d103      	bne.n	400bee <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400be6:	3b01      	subs	r3, #1
  400be8:	d1f9      	bne.n	400bde <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400bea:	2001      	movs	r0, #1
  400bec:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400bee:	4a0d      	ldr	r2, [pc, #52]	; (400c24 <pmc_switch_mck_to_pllack+0x60>)
  400bf0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400bf2:	f023 0303 	bic.w	r3, r3, #3
  400bf6:	f043 0302 	orr.w	r3, r3, #2
  400bfa:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bfc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400bfe:	f013 0f08 	tst.w	r3, #8
  400c02:	d10a      	bne.n	400c1a <pmc_switch_mck_to_pllack+0x56>
  400c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400c08:	4906      	ldr	r1, [pc, #24]	; (400c24 <pmc_switch_mck_to_pllack+0x60>)
  400c0a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400c0c:	f012 0f08 	tst.w	r2, #8
  400c10:	d105      	bne.n	400c1e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400c12:	3b01      	subs	r3, #1
  400c14:	d1f9      	bne.n	400c0a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400c16:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400c18:	4770      	bx	lr
	return 0;
  400c1a:	2000      	movs	r0, #0
  400c1c:	4770      	bx	lr
  400c1e:	2000      	movs	r0, #0
  400c20:	4770      	bx	lr
  400c22:	bf00      	nop
  400c24:	400e0600 	.word	0x400e0600

00400c28 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400c28:	b9a0      	cbnz	r0, 400c54 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400c2a:	480e      	ldr	r0, [pc, #56]	; (400c64 <pmc_switch_mainck_to_xtal+0x3c>)
  400c2c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400c2e:	0209      	lsls	r1, r1, #8
  400c30:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400c32:	4a0d      	ldr	r2, [pc, #52]	; (400c68 <pmc_switch_mainck_to_xtal+0x40>)
  400c34:	401a      	ands	r2, r3
  400c36:	4b0d      	ldr	r3, [pc, #52]	; (400c6c <pmc_switch_mainck_to_xtal+0x44>)
  400c38:	4313      	orrs	r3, r2
  400c3a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400c3c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400c3e:	4602      	mov	r2, r0
  400c40:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400c42:	f013 0f01 	tst.w	r3, #1
  400c46:	d0fb      	beq.n	400c40 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400c48:	4a06      	ldr	r2, [pc, #24]	; (400c64 <pmc_switch_mainck_to_xtal+0x3c>)
  400c4a:	6a11      	ldr	r1, [r2, #32]
  400c4c:	4b08      	ldr	r3, [pc, #32]	; (400c70 <pmc_switch_mainck_to_xtal+0x48>)
  400c4e:	430b      	orrs	r3, r1
  400c50:	6213      	str	r3, [r2, #32]
  400c52:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c54:	4903      	ldr	r1, [pc, #12]	; (400c64 <pmc_switch_mainck_to_xtal+0x3c>)
  400c56:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400c58:	4a06      	ldr	r2, [pc, #24]	; (400c74 <pmc_switch_mainck_to_xtal+0x4c>)
  400c5a:	401a      	ands	r2, r3
  400c5c:	4b06      	ldr	r3, [pc, #24]	; (400c78 <pmc_switch_mainck_to_xtal+0x50>)
  400c5e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c60:	620b      	str	r3, [r1, #32]
  400c62:	4770      	bx	lr
  400c64:	400e0600 	.word	0x400e0600
  400c68:	ffc8fffc 	.word	0xffc8fffc
  400c6c:	00370001 	.word	0x00370001
  400c70:	01370000 	.word	0x01370000
  400c74:	fec8fffc 	.word	0xfec8fffc
  400c78:	01370002 	.word	0x01370002

00400c7c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400c7c:	4b02      	ldr	r3, [pc, #8]	; (400c88 <pmc_osc_is_ready_mainck+0xc>)
  400c7e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c80:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400c84:	4770      	bx	lr
  400c86:	bf00      	nop
  400c88:	400e0600 	.word	0x400e0600

00400c8c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400c8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400c90:	4b01      	ldr	r3, [pc, #4]	; (400c98 <pmc_disable_pllack+0xc>)
  400c92:	629a      	str	r2, [r3, #40]	; 0x28
  400c94:	4770      	bx	lr
  400c96:	bf00      	nop
  400c98:	400e0600 	.word	0x400e0600

00400c9c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400c9c:	4b02      	ldr	r3, [pc, #8]	; (400ca8 <pmc_is_locked_pllack+0xc>)
  400c9e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ca0:	f000 0002 	and.w	r0, r0, #2
  400ca4:	4770      	bx	lr
  400ca6:	bf00      	nop
  400ca8:	400e0600 	.word	0x400e0600

00400cac <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400cac:	283f      	cmp	r0, #63	; 0x3f
  400cae:	d81e      	bhi.n	400cee <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400cb0:	281f      	cmp	r0, #31
  400cb2:	d80c      	bhi.n	400cce <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400cb4:	4b11      	ldr	r3, [pc, #68]	; (400cfc <pmc_enable_periph_clk+0x50>)
  400cb6:	699a      	ldr	r2, [r3, #24]
  400cb8:	2301      	movs	r3, #1
  400cba:	4083      	lsls	r3, r0
  400cbc:	4393      	bics	r3, r2
  400cbe:	d018      	beq.n	400cf2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400cc0:	2301      	movs	r3, #1
  400cc2:	fa03 f000 	lsl.w	r0, r3, r0
  400cc6:	4b0d      	ldr	r3, [pc, #52]	; (400cfc <pmc_enable_periph_clk+0x50>)
  400cc8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400cca:	2000      	movs	r0, #0
  400ccc:	4770      	bx	lr
		ul_id -= 32;
  400cce:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400cd0:	4b0a      	ldr	r3, [pc, #40]	; (400cfc <pmc_enable_periph_clk+0x50>)
  400cd2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400cd6:	2301      	movs	r3, #1
  400cd8:	4083      	lsls	r3, r0
  400cda:	4393      	bics	r3, r2
  400cdc:	d00b      	beq.n	400cf6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400cde:	2301      	movs	r3, #1
  400ce0:	fa03 f000 	lsl.w	r0, r3, r0
  400ce4:	4b05      	ldr	r3, [pc, #20]	; (400cfc <pmc_enable_periph_clk+0x50>)
  400ce6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400cea:	2000      	movs	r0, #0
  400cec:	4770      	bx	lr
		return 1;
  400cee:	2001      	movs	r0, #1
  400cf0:	4770      	bx	lr
	return 0;
  400cf2:	2000      	movs	r0, #0
  400cf4:	4770      	bx	lr
  400cf6:	2000      	movs	r0, #0
}
  400cf8:	4770      	bx	lr
  400cfa:	bf00      	nop
  400cfc:	400e0600 	.word	0x400e0600

00400d00 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400d00:	6943      	ldr	r3, [r0, #20]
  400d02:	f013 0f02 	tst.w	r3, #2
  400d06:	d002      	beq.n	400d0e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400d08:	61c1      	str	r1, [r0, #28]
	return 0;
  400d0a:	2000      	movs	r0, #0
  400d0c:	4770      	bx	lr
		return 1;
  400d0e:	2001      	movs	r0, #1
}
  400d10:	4770      	bx	lr

00400d12 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400d12:	6943      	ldr	r3, [r0, #20]
  400d14:	f013 0f01 	tst.w	r3, #1
  400d18:	d003      	beq.n	400d22 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400d1a:	6983      	ldr	r3, [r0, #24]
  400d1c:	700b      	strb	r3, [r1, #0]
	return 0;
  400d1e:	2000      	movs	r0, #0
  400d20:	4770      	bx	lr
		return 1;
  400d22:	2001      	movs	r0, #1
}
  400d24:	4770      	bx	lr

00400d26 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400d26:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400d28:	010b      	lsls	r3, r1, #4
  400d2a:	4293      	cmp	r3, r2
  400d2c:	d914      	bls.n	400d58 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400d2e:	00c9      	lsls	r1, r1, #3
  400d30:	084b      	lsrs	r3, r1, #1
  400d32:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400d36:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400d3a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400d3c:	1e5c      	subs	r4, r3, #1
  400d3e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400d42:	428c      	cmp	r4, r1
  400d44:	d901      	bls.n	400d4a <usart_set_async_baudrate+0x24>
		return 1;
  400d46:	2001      	movs	r0, #1
  400d48:	e017      	b.n	400d7a <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400d4a:	6841      	ldr	r1, [r0, #4]
  400d4c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400d50:	6041      	str	r1, [r0, #4]
  400d52:	e00c      	b.n	400d6e <usart_set_async_baudrate+0x48>
		return 1;
  400d54:	2001      	movs	r0, #1
  400d56:	e010      	b.n	400d7a <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400d58:	0859      	lsrs	r1, r3, #1
  400d5a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400d5e:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400d62:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400d64:	1e5c      	subs	r4, r3, #1
  400d66:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400d6a:	428c      	cmp	r4, r1
  400d6c:	d8f2      	bhi.n	400d54 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400d6e:	0412      	lsls	r2, r2, #16
  400d70:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400d74:	431a      	orrs	r2, r3
  400d76:	6202      	str	r2, [r0, #32]

	return 0;
  400d78:	2000      	movs	r0, #0
}
  400d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d7e:	4770      	bx	lr

00400d80 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400d80:	4b08      	ldr	r3, [pc, #32]	; (400da4 <usart_reset+0x24>)
  400d82:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400d86:	2300      	movs	r3, #0
  400d88:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400d8a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400d8c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400d8e:	2388      	movs	r3, #136	; 0x88
  400d90:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400d92:	2324      	movs	r3, #36	; 0x24
  400d94:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400d96:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d9a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400d9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400da0:	6003      	str	r3, [r0, #0]
  400da2:	4770      	bx	lr
  400da4:	55534100 	.word	0x55534100

00400da8 <usart_init_rs232>:
{
  400da8:	b570      	push	{r4, r5, r6, lr}
  400daa:	4605      	mov	r5, r0
  400dac:	460c      	mov	r4, r1
  400dae:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400db0:	4b0f      	ldr	r3, [pc, #60]	; (400df0 <usart_init_rs232+0x48>)
  400db2:	4798      	blx	r3
	ul_reg_val = 0;
  400db4:	2200      	movs	r2, #0
  400db6:	4b0f      	ldr	r3, [pc, #60]	; (400df4 <usart_init_rs232+0x4c>)
  400db8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400dba:	b1a4      	cbz	r4, 400de6 <usart_init_rs232+0x3e>
  400dbc:	4632      	mov	r2, r6
  400dbe:	6821      	ldr	r1, [r4, #0]
  400dc0:	4628      	mov	r0, r5
  400dc2:	4b0d      	ldr	r3, [pc, #52]	; (400df8 <usart_init_rs232+0x50>)
  400dc4:	4798      	blx	r3
  400dc6:	4602      	mov	r2, r0
  400dc8:	b978      	cbnz	r0, 400dea <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400dca:	6863      	ldr	r3, [r4, #4]
  400dcc:	68a1      	ldr	r1, [r4, #8]
  400dce:	430b      	orrs	r3, r1
  400dd0:	6921      	ldr	r1, [r4, #16]
  400dd2:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400dd4:	68e1      	ldr	r1, [r4, #12]
  400dd6:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400dd8:	4906      	ldr	r1, [pc, #24]	; (400df4 <usart_init_rs232+0x4c>)
  400dda:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400ddc:	6869      	ldr	r1, [r5, #4]
  400dde:	430b      	orrs	r3, r1
  400de0:	606b      	str	r3, [r5, #4]
}
  400de2:	4610      	mov	r0, r2
  400de4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400de6:	2201      	movs	r2, #1
  400de8:	e7fb      	b.n	400de2 <usart_init_rs232+0x3a>
  400dea:	2201      	movs	r2, #1
  400dec:	e7f9      	b.n	400de2 <usart_init_rs232+0x3a>
  400dee:	bf00      	nop
  400df0:	00400d81 	.word	0x00400d81
  400df4:	20400a48 	.word	0x20400a48
  400df8:	00400d27 	.word	0x00400d27

00400dfc <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400dfc:	2340      	movs	r3, #64	; 0x40
  400dfe:	6003      	str	r3, [r0, #0]
  400e00:	4770      	bx	lr

00400e02 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400e02:	2310      	movs	r3, #16
  400e04:	6003      	str	r3, [r0, #0]
  400e06:	4770      	bx	lr

00400e08 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400e08:	6943      	ldr	r3, [r0, #20]
  400e0a:	f013 0f02 	tst.w	r3, #2
  400e0e:	d004      	beq.n	400e1a <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400e10:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400e14:	61c1      	str	r1, [r0, #28]
	return 0;
  400e16:	2000      	movs	r0, #0
  400e18:	4770      	bx	lr
		return 1;
  400e1a:	2001      	movs	r0, #1
}
  400e1c:	4770      	bx	lr

00400e1e <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400e1e:	6943      	ldr	r3, [r0, #20]
  400e20:	f013 0f01 	tst.w	r3, #1
  400e24:	d005      	beq.n	400e32 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400e26:	6983      	ldr	r3, [r0, #24]
  400e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400e2c:	600b      	str	r3, [r1, #0]
	return 0;
  400e2e:	2000      	movs	r0, #0
  400e30:	4770      	bx	lr
		return 1;
  400e32:	2001      	movs	r0, #1
}
  400e34:	4770      	bx	lr

00400e36 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400e36:	e7fe      	b.n	400e36 <Dummy_Handler>

00400e38 <Reset_Handler>:
{
  400e38:	b500      	push	{lr}
  400e3a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400e3c:	4b25      	ldr	r3, [pc, #148]	; (400ed4 <Reset_Handler+0x9c>)
  400e3e:	4a26      	ldr	r2, [pc, #152]	; (400ed8 <Reset_Handler+0xa0>)
  400e40:	429a      	cmp	r2, r3
  400e42:	d010      	beq.n	400e66 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400e44:	4b25      	ldr	r3, [pc, #148]	; (400edc <Reset_Handler+0xa4>)
  400e46:	4a23      	ldr	r2, [pc, #140]	; (400ed4 <Reset_Handler+0x9c>)
  400e48:	429a      	cmp	r2, r3
  400e4a:	d20c      	bcs.n	400e66 <Reset_Handler+0x2e>
  400e4c:	3b01      	subs	r3, #1
  400e4e:	1a9b      	subs	r3, r3, r2
  400e50:	f023 0303 	bic.w	r3, r3, #3
  400e54:	3304      	adds	r3, #4
  400e56:	4413      	add	r3, r2
  400e58:	491f      	ldr	r1, [pc, #124]	; (400ed8 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400e5a:	f851 0b04 	ldr.w	r0, [r1], #4
  400e5e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400e62:	429a      	cmp	r2, r3
  400e64:	d1f9      	bne.n	400e5a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400e66:	4b1e      	ldr	r3, [pc, #120]	; (400ee0 <Reset_Handler+0xa8>)
  400e68:	4a1e      	ldr	r2, [pc, #120]	; (400ee4 <Reset_Handler+0xac>)
  400e6a:	429a      	cmp	r2, r3
  400e6c:	d20a      	bcs.n	400e84 <Reset_Handler+0x4c>
  400e6e:	3b01      	subs	r3, #1
  400e70:	1a9b      	subs	r3, r3, r2
  400e72:	f023 0303 	bic.w	r3, r3, #3
  400e76:	3304      	adds	r3, #4
  400e78:	4413      	add	r3, r2
                *pDest++ = 0;
  400e7a:	2100      	movs	r1, #0
  400e7c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400e80:	4293      	cmp	r3, r2
  400e82:	d1fb      	bne.n	400e7c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400e84:	4a18      	ldr	r2, [pc, #96]	; (400ee8 <Reset_Handler+0xb0>)
  400e86:	4b19      	ldr	r3, [pc, #100]	; (400eec <Reset_Handler+0xb4>)
  400e88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400e8c:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400e8e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400e92:	fab3 f383 	clz	r3, r3
  400e96:	095b      	lsrs	r3, r3, #5
  400e98:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400e9a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400e9c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400ea0:	2200      	movs	r2, #0
  400ea2:	4b13      	ldr	r3, [pc, #76]	; (400ef0 <Reset_Handler+0xb8>)
  400ea4:	701a      	strb	r2, [r3, #0]
	return flags;
  400ea6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400ea8:	4a12      	ldr	r2, [pc, #72]	; (400ef4 <Reset_Handler+0xbc>)
  400eaa:	6813      	ldr	r3, [r2, #0]
  400eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400eb0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400eb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400eb6:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400eba:	b129      	cbz	r1, 400ec8 <Reset_Handler+0x90>
		cpu_irq_enable();
  400ebc:	2201      	movs	r2, #1
  400ebe:	4b0c      	ldr	r3, [pc, #48]	; (400ef0 <Reset_Handler+0xb8>)
  400ec0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400ec2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400ec6:	b662      	cpsie	i
        __libc_init_array();
  400ec8:	4b0b      	ldr	r3, [pc, #44]	; (400ef8 <Reset_Handler+0xc0>)
  400eca:	4798      	blx	r3
        main();
  400ecc:	4b0b      	ldr	r3, [pc, #44]	; (400efc <Reset_Handler+0xc4>)
  400ece:	4798      	blx	r3
  400ed0:	e7fe      	b.n	400ed0 <Reset_Handler+0x98>
  400ed2:	bf00      	nop
  400ed4:	20400000 	.word	0x20400000
  400ed8:	004065e4 	.word	0x004065e4
  400edc:	204009b8 	.word	0x204009b8
  400ee0:	20400d7c 	.word	0x20400d7c
  400ee4:	204009b8 	.word	0x204009b8
  400ee8:	e000ed00 	.word	0xe000ed00
  400eec:	00400000 	.word	0x00400000
  400ef0:	20400000 	.word	0x20400000
  400ef4:	e000ed88 	.word	0xe000ed88
  400ef8:	004033dd 	.word	0x004033dd
  400efc:	00403289 	.word	0x00403289

00400f00 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400f00:	4b3b      	ldr	r3, [pc, #236]	; (400ff0 <SystemCoreClockUpdate+0xf0>)
  400f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f04:	f003 0303 	and.w	r3, r3, #3
  400f08:	2b01      	cmp	r3, #1
  400f0a:	d01d      	beq.n	400f48 <SystemCoreClockUpdate+0x48>
  400f0c:	b183      	cbz	r3, 400f30 <SystemCoreClockUpdate+0x30>
  400f0e:	2b02      	cmp	r3, #2
  400f10:	d036      	beq.n	400f80 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400f12:	4b37      	ldr	r3, [pc, #220]	; (400ff0 <SystemCoreClockUpdate+0xf0>)
  400f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f16:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f1a:	2b70      	cmp	r3, #112	; 0x70
  400f1c:	d05f      	beq.n	400fde <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400f1e:	4b34      	ldr	r3, [pc, #208]	; (400ff0 <SystemCoreClockUpdate+0xf0>)
  400f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400f22:	4934      	ldr	r1, [pc, #208]	; (400ff4 <SystemCoreClockUpdate+0xf4>)
  400f24:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400f28:	680b      	ldr	r3, [r1, #0]
  400f2a:	40d3      	lsrs	r3, r2
  400f2c:	600b      	str	r3, [r1, #0]
  400f2e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400f30:	4b31      	ldr	r3, [pc, #196]	; (400ff8 <SystemCoreClockUpdate+0xf8>)
  400f32:	695b      	ldr	r3, [r3, #20]
  400f34:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400f38:	bf14      	ite	ne
  400f3a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400f3e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400f42:	4b2c      	ldr	r3, [pc, #176]	; (400ff4 <SystemCoreClockUpdate+0xf4>)
  400f44:	601a      	str	r2, [r3, #0]
  400f46:	e7e4      	b.n	400f12 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400f48:	4b29      	ldr	r3, [pc, #164]	; (400ff0 <SystemCoreClockUpdate+0xf0>)
  400f4a:	6a1b      	ldr	r3, [r3, #32]
  400f4c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400f50:	d003      	beq.n	400f5a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400f52:	4a2a      	ldr	r2, [pc, #168]	; (400ffc <SystemCoreClockUpdate+0xfc>)
  400f54:	4b27      	ldr	r3, [pc, #156]	; (400ff4 <SystemCoreClockUpdate+0xf4>)
  400f56:	601a      	str	r2, [r3, #0]
  400f58:	e7db      	b.n	400f12 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f5a:	4a29      	ldr	r2, [pc, #164]	; (401000 <SystemCoreClockUpdate+0x100>)
  400f5c:	4b25      	ldr	r3, [pc, #148]	; (400ff4 <SystemCoreClockUpdate+0xf4>)
  400f5e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400f60:	4b23      	ldr	r3, [pc, #140]	; (400ff0 <SystemCoreClockUpdate+0xf0>)
  400f62:	6a1b      	ldr	r3, [r3, #32]
  400f64:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f68:	2b10      	cmp	r3, #16
  400f6a:	d005      	beq.n	400f78 <SystemCoreClockUpdate+0x78>
  400f6c:	2b20      	cmp	r3, #32
  400f6e:	d1d0      	bne.n	400f12 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400f70:	4a22      	ldr	r2, [pc, #136]	; (400ffc <SystemCoreClockUpdate+0xfc>)
  400f72:	4b20      	ldr	r3, [pc, #128]	; (400ff4 <SystemCoreClockUpdate+0xf4>)
  400f74:	601a      	str	r2, [r3, #0]
          break;
  400f76:	e7cc      	b.n	400f12 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400f78:	4a22      	ldr	r2, [pc, #136]	; (401004 <SystemCoreClockUpdate+0x104>)
  400f7a:	4b1e      	ldr	r3, [pc, #120]	; (400ff4 <SystemCoreClockUpdate+0xf4>)
  400f7c:	601a      	str	r2, [r3, #0]
          break;
  400f7e:	e7c8      	b.n	400f12 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400f80:	4b1b      	ldr	r3, [pc, #108]	; (400ff0 <SystemCoreClockUpdate+0xf0>)
  400f82:	6a1b      	ldr	r3, [r3, #32]
  400f84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400f88:	d016      	beq.n	400fb8 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400f8a:	4a1c      	ldr	r2, [pc, #112]	; (400ffc <SystemCoreClockUpdate+0xfc>)
  400f8c:	4b19      	ldr	r3, [pc, #100]	; (400ff4 <SystemCoreClockUpdate+0xf4>)
  400f8e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400f90:	4b17      	ldr	r3, [pc, #92]	; (400ff0 <SystemCoreClockUpdate+0xf0>)
  400f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f94:	f003 0303 	and.w	r3, r3, #3
  400f98:	2b02      	cmp	r3, #2
  400f9a:	d1ba      	bne.n	400f12 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f9c:	4a14      	ldr	r2, [pc, #80]	; (400ff0 <SystemCoreClockUpdate+0xf0>)
  400f9e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400fa0:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400fa2:	4814      	ldr	r0, [pc, #80]	; (400ff4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400fa4:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400fa8:	6803      	ldr	r3, [r0, #0]
  400faa:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400fae:	b2d2      	uxtb	r2, r2
  400fb0:	fbb3 f3f2 	udiv	r3, r3, r2
  400fb4:	6003      	str	r3, [r0, #0]
  400fb6:	e7ac      	b.n	400f12 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400fb8:	4a11      	ldr	r2, [pc, #68]	; (401000 <SystemCoreClockUpdate+0x100>)
  400fba:	4b0e      	ldr	r3, [pc, #56]	; (400ff4 <SystemCoreClockUpdate+0xf4>)
  400fbc:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400fbe:	4b0c      	ldr	r3, [pc, #48]	; (400ff0 <SystemCoreClockUpdate+0xf0>)
  400fc0:	6a1b      	ldr	r3, [r3, #32]
  400fc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400fc6:	2b10      	cmp	r3, #16
  400fc8:	d005      	beq.n	400fd6 <SystemCoreClockUpdate+0xd6>
  400fca:	2b20      	cmp	r3, #32
  400fcc:	d1e0      	bne.n	400f90 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400fce:	4a0b      	ldr	r2, [pc, #44]	; (400ffc <SystemCoreClockUpdate+0xfc>)
  400fd0:	4b08      	ldr	r3, [pc, #32]	; (400ff4 <SystemCoreClockUpdate+0xf4>)
  400fd2:	601a      	str	r2, [r3, #0]
          break;
  400fd4:	e7dc      	b.n	400f90 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400fd6:	4a0b      	ldr	r2, [pc, #44]	; (401004 <SystemCoreClockUpdate+0x104>)
  400fd8:	4b06      	ldr	r3, [pc, #24]	; (400ff4 <SystemCoreClockUpdate+0xf4>)
  400fda:	601a      	str	r2, [r3, #0]
          break;
  400fdc:	e7d8      	b.n	400f90 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400fde:	4a05      	ldr	r2, [pc, #20]	; (400ff4 <SystemCoreClockUpdate+0xf4>)
  400fe0:	6813      	ldr	r3, [r2, #0]
  400fe2:	4909      	ldr	r1, [pc, #36]	; (401008 <SystemCoreClockUpdate+0x108>)
  400fe4:	fba1 1303 	umull	r1, r3, r1, r3
  400fe8:	085b      	lsrs	r3, r3, #1
  400fea:	6013      	str	r3, [r2, #0]
  400fec:	4770      	bx	lr
  400fee:	bf00      	nop
  400ff0:	400e0600 	.word	0x400e0600
  400ff4:	20400004 	.word	0x20400004
  400ff8:	400e1810 	.word	0x400e1810
  400ffc:	00b71b00 	.word	0x00b71b00
  401000:	003d0900 	.word	0x003d0900
  401004:	007a1200 	.word	0x007a1200
  401008:	aaaaaaab 	.word	0xaaaaaaab

0040100c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40100c:	4b16      	ldr	r3, [pc, #88]	; (401068 <system_init_flash+0x5c>)
  40100e:	4298      	cmp	r0, r3
  401010:	d913      	bls.n	40103a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401012:	4b16      	ldr	r3, [pc, #88]	; (40106c <system_init_flash+0x60>)
  401014:	4298      	cmp	r0, r3
  401016:	d915      	bls.n	401044 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401018:	4b15      	ldr	r3, [pc, #84]	; (401070 <system_init_flash+0x64>)
  40101a:	4298      	cmp	r0, r3
  40101c:	d916      	bls.n	40104c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40101e:	4b15      	ldr	r3, [pc, #84]	; (401074 <system_init_flash+0x68>)
  401020:	4298      	cmp	r0, r3
  401022:	d917      	bls.n	401054 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401024:	4b14      	ldr	r3, [pc, #80]	; (401078 <system_init_flash+0x6c>)
  401026:	4298      	cmp	r0, r3
  401028:	d918      	bls.n	40105c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40102a:	4b14      	ldr	r3, [pc, #80]	; (40107c <system_init_flash+0x70>)
  40102c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40102e:	bf94      	ite	ls
  401030:	4a13      	ldrls	r2, [pc, #76]	; (401080 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401032:	4a14      	ldrhi	r2, [pc, #80]	; (401084 <system_init_flash+0x78>)
  401034:	4b14      	ldr	r3, [pc, #80]	; (401088 <system_init_flash+0x7c>)
  401036:	601a      	str	r2, [r3, #0]
  401038:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40103a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40103e:	4b12      	ldr	r3, [pc, #72]	; (401088 <system_init_flash+0x7c>)
  401040:	601a      	str	r2, [r3, #0]
  401042:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401044:	4a11      	ldr	r2, [pc, #68]	; (40108c <system_init_flash+0x80>)
  401046:	4b10      	ldr	r3, [pc, #64]	; (401088 <system_init_flash+0x7c>)
  401048:	601a      	str	r2, [r3, #0]
  40104a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40104c:	4a10      	ldr	r2, [pc, #64]	; (401090 <system_init_flash+0x84>)
  40104e:	4b0e      	ldr	r3, [pc, #56]	; (401088 <system_init_flash+0x7c>)
  401050:	601a      	str	r2, [r3, #0]
  401052:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401054:	4a0f      	ldr	r2, [pc, #60]	; (401094 <system_init_flash+0x88>)
  401056:	4b0c      	ldr	r3, [pc, #48]	; (401088 <system_init_flash+0x7c>)
  401058:	601a      	str	r2, [r3, #0]
  40105a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40105c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401060:	4b09      	ldr	r3, [pc, #36]	; (401088 <system_init_flash+0x7c>)
  401062:	601a      	str	r2, [r3, #0]
  401064:	4770      	bx	lr
  401066:	bf00      	nop
  401068:	015ef3bf 	.word	0x015ef3bf
  40106c:	02bde77f 	.word	0x02bde77f
  401070:	041cdb3f 	.word	0x041cdb3f
  401074:	057bceff 	.word	0x057bceff
  401078:	06dac2bf 	.word	0x06dac2bf
  40107c:	0839b67f 	.word	0x0839b67f
  401080:	04000500 	.word	0x04000500
  401084:	04000600 	.word	0x04000600
  401088:	400e0c00 	.word	0x400e0c00
  40108c:	04000100 	.word	0x04000100
  401090:	04000200 	.word	0x04000200
  401094:	04000300 	.word	0x04000300

00401098 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401098:	4b0a      	ldr	r3, [pc, #40]	; (4010c4 <_sbrk+0x2c>)
  40109a:	681b      	ldr	r3, [r3, #0]
  40109c:	b153      	cbz	r3, 4010b4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40109e:	4b09      	ldr	r3, [pc, #36]	; (4010c4 <_sbrk+0x2c>)
  4010a0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4010a2:	181a      	adds	r2, r3, r0
  4010a4:	4908      	ldr	r1, [pc, #32]	; (4010c8 <_sbrk+0x30>)
  4010a6:	4291      	cmp	r1, r2
  4010a8:	db08      	blt.n	4010bc <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4010aa:	4610      	mov	r0, r2
  4010ac:	4a05      	ldr	r2, [pc, #20]	; (4010c4 <_sbrk+0x2c>)
  4010ae:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4010b0:	4618      	mov	r0, r3
  4010b2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4010b4:	4a05      	ldr	r2, [pc, #20]	; (4010cc <_sbrk+0x34>)
  4010b6:	4b03      	ldr	r3, [pc, #12]	; (4010c4 <_sbrk+0x2c>)
  4010b8:	601a      	str	r2, [r3, #0]
  4010ba:	e7f0      	b.n	40109e <_sbrk+0x6>
		return (caddr_t) -1;	
  4010bc:	f04f 30ff 	mov.w	r0, #4294967295
}
  4010c0:	4770      	bx	lr
  4010c2:	bf00      	nop
  4010c4:	20400a4c 	.word	0x20400a4c
  4010c8:	2045fffc 	.word	0x2045fffc
  4010cc:	20402f80 	.word	0x20402f80

004010d0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4010d0:	f04f 30ff 	mov.w	r0, #4294967295
  4010d4:	4770      	bx	lr

004010d6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4010d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4010da:	604b      	str	r3, [r1, #4]

	return 0;
}
  4010dc:	2000      	movs	r0, #0
  4010de:	4770      	bx	lr

004010e0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4010e0:	2001      	movs	r0, #1
  4010e2:	4770      	bx	lr

004010e4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4010e4:	2000      	movs	r0, #0
  4010e6:	4770      	bx	lr

004010e8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4010e8:	f100 0308 	add.w	r3, r0, #8
  4010ec:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4010ee:	f04f 32ff 	mov.w	r2, #4294967295
  4010f2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4010f4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4010f6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4010f8:	2300      	movs	r3, #0
  4010fa:	6003      	str	r3, [r0, #0]
  4010fc:	4770      	bx	lr

004010fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4010fe:	2300      	movs	r3, #0
  401100:	6103      	str	r3, [r0, #16]
  401102:	4770      	bx	lr

00401104 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401104:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401106:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401108:	689a      	ldr	r2, [r3, #8]
  40110a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  40110c:	689a      	ldr	r2, [r3, #8]
  40110e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401110:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401112:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401114:	6803      	ldr	r3, [r0, #0]
  401116:	3301      	adds	r3, #1
  401118:	6003      	str	r3, [r0, #0]
  40111a:	4770      	bx	lr

0040111c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  40111c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40111e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401120:	f1b5 3fff 	cmp.w	r5, #4294967295
  401124:	d002      	beq.n	40112c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401126:	f100 0208 	add.w	r2, r0, #8
  40112a:	e002      	b.n	401132 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  40112c:	6902      	ldr	r2, [r0, #16]
  40112e:	e004      	b.n	40113a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401130:	461a      	mov	r2, r3
  401132:	6853      	ldr	r3, [r2, #4]
  401134:	681c      	ldr	r4, [r3, #0]
  401136:	42a5      	cmp	r5, r4
  401138:	d2fa      	bcs.n	401130 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40113a:	6853      	ldr	r3, [r2, #4]
  40113c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40113e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401140:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  401142:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401144:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401146:	6803      	ldr	r3, [r0, #0]
  401148:	3301      	adds	r3, #1
  40114a:	6003      	str	r3, [r0, #0]
}
  40114c:	bc30      	pop	{r4, r5}
  40114e:	4770      	bx	lr

00401150 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401150:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  401152:	6842      	ldr	r2, [r0, #4]
  401154:	6881      	ldr	r1, [r0, #8]
  401156:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401158:	6882      	ldr	r2, [r0, #8]
  40115a:	6841      	ldr	r1, [r0, #4]
  40115c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40115e:	685a      	ldr	r2, [r3, #4]
  401160:	4290      	cmp	r0, r2
  401162:	d005      	beq.n	401170 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401164:	2200      	movs	r2, #0
  401166:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  401168:	6818      	ldr	r0, [r3, #0]
  40116a:	3801      	subs	r0, #1
  40116c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  40116e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401170:	6882      	ldr	r2, [r0, #8]
  401172:	605a      	str	r2, [r3, #4]
  401174:	e7f6      	b.n	401164 <uxListRemove+0x14>
	...

00401178 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401178:	4b0d      	ldr	r3, [pc, #52]	; (4011b0 <prvTaskExitError+0x38>)
  40117a:	681b      	ldr	r3, [r3, #0]
  40117c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401180:	d00a      	beq.n	401198 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401182:	f04f 0380 	mov.w	r3, #128	; 0x80
  401186:	b672      	cpsid	i
  401188:	f383 8811 	msr	BASEPRI, r3
  40118c:	f3bf 8f6f 	isb	sy
  401190:	f3bf 8f4f 	dsb	sy
  401194:	b662      	cpsie	i
  401196:	e7fe      	b.n	401196 <prvTaskExitError+0x1e>
  401198:	f04f 0380 	mov.w	r3, #128	; 0x80
  40119c:	b672      	cpsid	i
  40119e:	f383 8811 	msr	BASEPRI, r3
  4011a2:	f3bf 8f6f 	isb	sy
  4011a6:	f3bf 8f4f 	dsb	sy
  4011aa:	b662      	cpsie	i
  4011ac:	e7fe      	b.n	4011ac <prvTaskExitError+0x34>
  4011ae:	bf00      	nop
  4011b0:	20400008 	.word	0x20400008

004011b4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4011b4:	4806      	ldr	r0, [pc, #24]	; (4011d0 <prvPortStartFirstTask+0x1c>)
  4011b6:	6800      	ldr	r0, [r0, #0]
  4011b8:	6800      	ldr	r0, [r0, #0]
  4011ba:	f380 8808 	msr	MSP, r0
  4011be:	b662      	cpsie	i
  4011c0:	b661      	cpsie	f
  4011c2:	f3bf 8f4f 	dsb	sy
  4011c6:	f3bf 8f6f 	isb	sy
  4011ca:	df00      	svc	0
  4011cc:	bf00      	nop
  4011ce:	0000      	.short	0x0000
  4011d0:	e000ed08 	.word	0xe000ed08

004011d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4011d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4011e4 <vPortEnableVFP+0x10>
  4011d8:	6801      	ldr	r1, [r0, #0]
  4011da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4011de:	6001      	str	r1, [r0, #0]
  4011e0:	4770      	bx	lr
  4011e2:	0000      	.short	0x0000
  4011e4:	e000ed88 	.word	0xe000ed88

004011e8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4011e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4011ec:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4011f0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4011f4:	4b05      	ldr	r3, [pc, #20]	; (40120c <pxPortInitialiseStack+0x24>)
  4011f6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4011fa:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4011fe:	f06f 0302 	mvn.w	r3, #2
  401202:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401206:	3844      	subs	r0, #68	; 0x44
  401208:	4770      	bx	lr
  40120a:	bf00      	nop
  40120c:	00401179 	.word	0x00401179

00401210 <SVC_Handler>:
	__asm volatile (
  401210:	4b06      	ldr	r3, [pc, #24]	; (40122c <pxCurrentTCBConst2>)
  401212:	6819      	ldr	r1, [r3, #0]
  401214:	6808      	ldr	r0, [r1, #0]
  401216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40121a:	f380 8809 	msr	PSP, r0
  40121e:	f3bf 8f6f 	isb	sy
  401222:	f04f 0000 	mov.w	r0, #0
  401226:	f380 8811 	msr	BASEPRI, r0
  40122a:	4770      	bx	lr

0040122c <pxCurrentTCBConst2>:
  40122c:	20400a58 	.word	0x20400a58
  401230:	4770      	bx	lr
  401232:	bf00      	nop

00401234 <vPortEnterCritical>:
  401234:	f04f 0380 	mov.w	r3, #128	; 0x80
  401238:	b672      	cpsid	i
  40123a:	f383 8811 	msr	BASEPRI, r3
  40123e:	f3bf 8f6f 	isb	sy
  401242:	f3bf 8f4f 	dsb	sy
  401246:	b662      	cpsie	i
	uxCriticalNesting++;
  401248:	4a0b      	ldr	r2, [pc, #44]	; (401278 <vPortEnterCritical+0x44>)
  40124a:	6813      	ldr	r3, [r2, #0]
  40124c:	3301      	adds	r3, #1
  40124e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401250:	2b01      	cmp	r3, #1
  401252:	d10f      	bne.n	401274 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  401254:	4b09      	ldr	r3, [pc, #36]	; (40127c <vPortEnterCritical+0x48>)
  401256:	681b      	ldr	r3, [r3, #0]
  401258:	f013 0fff 	tst.w	r3, #255	; 0xff
  40125c:	d00a      	beq.n	401274 <vPortEnterCritical+0x40>
  40125e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401262:	b672      	cpsid	i
  401264:	f383 8811 	msr	BASEPRI, r3
  401268:	f3bf 8f6f 	isb	sy
  40126c:	f3bf 8f4f 	dsb	sy
  401270:	b662      	cpsie	i
  401272:	e7fe      	b.n	401272 <vPortEnterCritical+0x3e>
  401274:	4770      	bx	lr
  401276:	bf00      	nop
  401278:	20400008 	.word	0x20400008
  40127c:	e000ed04 	.word	0xe000ed04

00401280 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401280:	4b0a      	ldr	r3, [pc, #40]	; (4012ac <vPortExitCritical+0x2c>)
  401282:	681b      	ldr	r3, [r3, #0]
  401284:	b953      	cbnz	r3, 40129c <vPortExitCritical+0x1c>
  401286:	f04f 0380 	mov.w	r3, #128	; 0x80
  40128a:	b672      	cpsid	i
  40128c:	f383 8811 	msr	BASEPRI, r3
  401290:	f3bf 8f6f 	isb	sy
  401294:	f3bf 8f4f 	dsb	sy
  401298:	b662      	cpsie	i
  40129a:	e7fe      	b.n	40129a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40129c:	3b01      	subs	r3, #1
  40129e:	4a03      	ldr	r2, [pc, #12]	; (4012ac <vPortExitCritical+0x2c>)
  4012a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4012a2:	b90b      	cbnz	r3, 4012a8 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4012a4:	f383 8811 	msr	BASEPRI, r3
  4012a8:	4770      	bx	lr
  4012aa:	bf00      	nop
  4012ac:	20400008 	.word	0x20400008

004012b0 <PendSV_Handler>:
	__asm volatile
  4012b0:	f3ef 8009 	mrs	r0, PSP
  4012b4:	f3bf 8f6f 	isb	sy
  4012b8:	4b15      	ldr	r3, [pc, #84]	; (401310 <pxCurrentTCBConst>)
  4012ba:	681a      	ldr	r2, [r3, #0]
  4012bc:	f01e 0f10 	tst.w	lr, #16
  4012c0:	bf08      	it	eq
  4012c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4012c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012ca:	6010      	str	r0, [r2, #0]
  4012cc:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4012d0:	f04f 0080 	mov.w	r0, #128	; 0x80
  4012d4:	b672      	cpsid	i
  4012d6:	f380 8811 	msr	BASEPRI, r0
  4012da:	f3bf 8f4f 	dsb	sy
  4012de:	f3bf 8f6f 	isb	sy
  4012e2:	b662      	cpsie	i
  4012e4:	f001 f846 	bl	402374 <vTaskSwitchContext>
  4012e8:	f04f 0000 	mov.w	r0, #0
  4012ec:	f380 8811 	msr	BASEPRI, r0
  4012f0:	bc08      	pop	{r3}
  4012f2:	6819      	ldr	r1, [r3, #0]
  4012f4:	6808      	ldr	r0, [r1, #0]
  4012f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012fa:	f01e 0f10 	tst.w	lr, #16
  4012fe:	bf08      	it	eq
  401300:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401304:	f380 8809 	msr	PSP, r0
  401308:	f3bf 8f6f 	isb	sy
  40130c:	4770      	bx	lr
  40130e:	bf00      	nop

00401310 <pxCurrentTCBConst>:
  401310:	20400a58 	.word	0x20400a58
  401314:	4770      	bx	lr
  401316:	bf00      	nop

00401318 <SysTick_Handler>:
{
  401318:	b508      	push	{r3, lr}
	__asm volatile
  40131a:	f3ef 8311 	mrs	r3, BASEPRI
  40131e:	f04f 0280 	mov.w	r2, #128	; 0x80
  401322:	b672      	cpsid	i
  401324:	f382 8811 	msr	BASEPRI, r2
  401328:	f3bf 8f6f 	isb	sy
  40132c:	f3bf 8f4f 	dsb	sy
  401330:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  401332:	4b05      	ldr	r3, [pc, #20]	; (401348 <SysTick_Handler+0x30>)
  401334:	4798      	blx	r3
  401336:	b118      	cbz	r0, 401340 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40133c:	4b03      	ldr	r3, [pc, #12]	; (40134c <SysTick_Handler+0x34>)
  40133e:	601a      	str	r2, [r3, #0]
	__asm volatile
  401340:	2300      	movs	r3, #0
  401342:	f383 8811 	msr	BASEPRI, r3
  401346:	bd08      	pop	{r3, pc}
  401348:	00402071 	.word	0x00402071
  40134c:	e000ed04 	.word	0xe000ed04

00401350 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401350:	4a03      	ldr	r2, [pc, #12]	; (401360 <vPortSetupTimerInterrupt+0x10>)
  401352:	4b04      	ldr	r3, [pc, #16]	; (401364 <vPortSetupTimerInterrupt+0x14>)
  401354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  401356:	2207      	movs	r2, #7
  401358:	3b04      	subs	r3, #4
  40135a:	601a      	str	r2, [r3, #0]
  40135c:	4770      	bx	lr
  40135e:	bf00      	nop
  401360:	000927bf 	.word	0x000927bf
  401364:	e000e014 	.word	0xe000e014

00401368 <xPortStartScheduler>:
{
  401368:	b500      	push	{lr}
  40136a:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  40136c:	4b25      	ldr	r3, [pc, #148]	; (401404 <xPortStartScheduler+0x9c>)
  40136e:	781a      	ldrb	r2, [r3, #0]
  401370:	b2d2      	uxtb	r2, r2
  401372:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  401374:	22ff      	movs	r2, #255	; 0xff
  401376:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401378:	781b      	ldrb	r3, [r3, #0]
  40137a:	b2db      	uxtb	r3, r3
  40137c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401380:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401384:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401388:	4a1f      	ldr	r2, [pc, #124]	; (401408 <xPortStartScheduler+0xa0>)
  40138a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  40138c:	2207      	movs	r2, #7
  40138e:	4b1f      	ldr	r3, [pc, #124]	; (40140c <xPortStartScheduler+0xa4>)
  401390:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401392:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401396:	f013 0f80 	tst.w	r3, #128	; 0x80
  40139a:	d010      	beq.n	4013be <xPortStartScheduler+0x56>
  40139c:	2206      	movs	r2, #6
  40139e:	e000      	b.n	4013a2 <xPortStartScheduler+0x3a>
  4013a0:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4013a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4013a6:	005b      	lsls	r3, r3, #1
  4013a8:	b2db      	uxtb	r3, r3
  4013aa:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4013ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4013b2:	1e51      	subs	r1, r2, #1
  4013b4:	f013 0f80 	tst.w	r3, #128	; 0x80
  4013b8:	d1f2      	bne.n	4013a0 <xPortStartScheduler+0x38>
  4013ba:	4b14      	ldr	r3, [pc, #80]	; (40140c <xPortStartScheduler+0xa4>)
  4013bc:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4013be:	4a13      	ldr	r2, [pc, #76]	; (40140c <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4013c0:	6813      	ldr	r3, [r2, #0]
  4013c2:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4013c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4013c8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4013ca:	9b01      	ldr	r3, [sp, #4]
  4013cc:	b2db      	uxtb	r3, r3
  4013ce:	4a0d      	ldr	r2, [pc, #52]	; (401404 <xPortStartScheduler+0x9c>)
  4013d0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4013d2:	4b0f      	ldr	r3, [pc, #60]	; (401410 <xPortStartScheduler+0xa8>)
  4013d4:	681a      	ldr	r2, [r3, #0]
  4013d6:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4013da:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4013dc:	681a      	ldr	r2, [r3, #0]
  4013de:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4013e2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4013e4:	4b0b      	ldr	r3, [pc, #44]	; (401414 <xPortStartScheduler+0xac>)
  4013e6:	4798      	blx	r3
	uxCriticalNesting = 0;
  4013e8:	2200      	movs	r2, #0
  4013ea:	4b0b      	ldr	r3, [pc, #44]	; (401418 <xPortStartScheduler+0xb0>)
  4013ec:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4013ee:	4b0b      	ldr	r3, [pc, #44]	; (40141c <xPortStartScheduler+0xb4>)
  4013f0:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4013f2:	4a0b      	ldr	r2, [pc, #44]	; (401420 <xPortStartScheduler+0xb8>)
  4013f4:	6813      	ldr	r3, [r2, #0]
  4013f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4013fa:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4013fc:	4b09      	ldr	r3, [pc, #36]	; (401424 <xPortStartScheduler+0xbc>)
  4013fe:	4798      	blx	r3
	prvTaskExitError();
  401400:	4b09      	ldr	r3, [pc, #36]	; (401428 <xPortStartScheduler+0xc0>)
  401402:	4798      	blx	r3
  401404:	e000e400 	.word	0xe000e400
  401408:	20400a50 	.word	0x20400a50
  40140c:	20400a54 	.word	0x20400a54
  401410:	e000ed20 	.word	0xe000ed20
  401414:	00401351 	.word	0x00401351
  401418:	20400008 	.word	0x20400008
  40141c:	004011d5 	.word	0x004011d5
  401420:	e000ef34 	.word	0xe000ef34
  401424:	004011b5 	.word	0x004011b5
  401428:	00401179 	.word	0x00401179

0040142c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  40142c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401430:	2b0f      	cmp	r3, #15
  401432:	d911      	bls.n	401458 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401434:	4a12      	ldr	r2, [pc, #72]	; (401480 <vPortValidateInterruptPriority+0x54>)
  401436:	5c9b      	ldrb	r3, [r3, r2]
  401438:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40143a:	4a12      	ldr	r2, [pc, #72]	; (401484 <vPortValidateInterruptPriority+0x58>)
  40143c:	7812      	ldrb	r2, [r2, #0]
  40143e:	429a      	cmp	r2, r3
  401440:	d90a      	bls.n	401458 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401442:	f04f 0380 	mov.w	r3, #128	; 0x80
  401446:	b672      	cpsid	i
  401448:	f383 8811 	msr	BASEPRI, r3
  40144c:	f3bf 8f6f 	isb	sy
  401450:	f3bf 8f4f 	dsb	sy
  401454:	b662      	cpsie	i
  401456:	e7fe      	b.n	401456 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401458:	4b0b      	ldr	r3, [pc, #44]	; (401488 <vPortValidateInterruptPriority+0x5c>)
  40145a:	681b      	ldr	r3, [r3, #0]
  40145c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401460:	4a0a      	ldr	r2, [pc, #40]	; (40148c <vPortValidateInterruptPriority+0x60>)
  401462:	6812      	ldr	r2, [r2, #0]
  401464:	4293      	cmp	r3, r2
  401466:	d90a      	bls.n	40147e <vPortValidateInterruptPriority+0x52>
  401468:	f04f 0380 	mov.w	r3, #128	; 0x80
  40146c:	b672      	cpsid	i
  40146e:	f383 8811 	msr	BASEPRI, r3
  401472:	f3bf 8f6f 	isb	sy
  401476:	f3bf 8f4f 	dsb	sy
  40147a:	b662      	cpsie	i
  40147c:	e7fe      	b.n	40147c <vPortValidateInterruptPriority+0x50>
  40147e:	4770      	bx	lr
  401480:	e000e3f0 	.word	0xe000e3f0
  401484:	20400a50 	.word	0x20400a50
  401488:	e000ed0c 	.word	0xe000ed0c
  40148c:	20400a54 	.word	0x20400a54

00401490 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401490:	b510      	push	{r4, lr}
  401492:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401494:	4b06      	ldr	r3, [pc, #24]	; (4014b0 <pvPortMalloc+0x20>)
  401496:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401498:	4620      	mov	r0, r4
  40149a:	4b06      	ldr	r3, [pc, #24]	; (4014b4 <pvPortMalloc+0x24>)
  40149c:	4798      	blx	r3
  40149e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4014a0:	4b05      	ldr	r3, [pc, #20]	; (4014b8 <pvPortMalloc+0x28>)
  4014a2:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4014a4:	b10c      	cbz	r4, 4014aa <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  4014a6:	4620      	mov	r0, r4
  4014a8:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  4014aa:	4b04      	ldr	r3, [pc, #16]	; (4014bc <pvPortMalloc+0x2c>)
  4014ac:	4798      	blx	r3
	return pvReturn;
  4014ae:	e7fa      	b.n	4014a6 <pvPortMalloc+0x16>
  4014b0:	00402055 	.word	0x00402055
  4014b4:	00403455 	.word	0x00403455
  4014b8:	004021bd 	.word	0x004021bd
  4014bc:	00402f5f 	.word	0x00402f5f

004014c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  4014c0:	b148      	cbz	r0, 4014d6 <vPortFree+0x16>
{
  4014c2:	b510      	push	{r4, lr}
  4014c4:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  4014c6:	4b04      	ldr	r3, [pc, #16]	; (4014d8 <vPortFree+0x18>)
  4014c8:	4798      	blx	r3
		{
			free( pv );
  4014ca:	4620      	mov	r0, r4
  4014cc:	4b03      	ldr	r3, [pc, #12]	; (4014dc <vPortFree+0x1c>)
  4014ce:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  4014d0:	4b03      	ldr	r3, [pc, #12]	; (4014e0 <vPortFree+0x20>)
  4014d2:	4798      	blx	r3
  4014d4:	bd10      	pop	{r4, pc}
  4014d6:	4770      	bx	lr
  4014d8:	00402055 	.word	0x00402055
  4014dc:	00403465 	.word	0x00403465
  4014e0:	004021bd 	.word	0x004021bd

004014e4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4014e4:	b538      	push	{r3, r4, r5, lr}
  4014e6:	4604      	mov	r4, r0
  4014e8:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4014ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4014ec:	b95a      	cbnz	r2, 401506 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4014ee:	6803      	ldr	r3, [r0, #0]
  4014f0:	2b00      	cmp	r3, #0
  4014f2:	d12e      	bne.n	401552 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4014f4:	6840      	ldr	r0, [r0, #4]
  4014f6:	4b1b      	ldr	r3, [pc, #108]	; (401564 <prvCopyDataToQueue+0x80>)
  4014f8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4014fa:	2300      	movs	r3, #0
  4014fc:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4014fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401500:	3301      	adds	r3, #1
  401502:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401504:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401506:	b96d      	cbnz	r5, 401524 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401508:	6880      	ldr	r0, [r0, #8]
  40150a:	4b17      	ldr	r3, [pc, #92]	; (401568 <prvCopyDataToQueue+0x84>)
  40150c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40150e:	68a3      	ldr	r3, [r4, #8]
  401510:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401512:	4413      	add	r3, r2
  401514:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401516:	6862      	ldr	r2, [r4, #4]
  401518:	4293      	cmp	r3, r2
  40151a:	d31c      	bcc.n	401556 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40151c:	6823      	ldr	r3, [r4, #0]
  40151e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401520:	2000      	movs	r0, #0
  401522:	e7ec      	b.n	4014fe <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401524:	68c0      	ldr	r0, [r0, #12]
  401526:	4b10      	ldr	r3, [pc, #64]	; (401568 <prvCopyDataToQueue+0x84>)
  401528:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40152a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40152c:	425b      	negs	r3, r3
  40152e:	68e2      	ldr	r2, [r4, #12]
  401530:	441a      	add	r2, r3
  401532:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401534:	6821      	ldr	r1, [r4, #0]
  401536:	428a      	cmp	r2, r1
  401538:	d202      	bcs.n	401540 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40153a:	6862      	ldr	r2, [r4, #4]
  40153c:	4413      	add	r3, r2
  40153e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401540:	2d02      	cmp	r5, #2
  401542:	d10a      	bne.n	40155a <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401544:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401546:	b153      	cbz	r3, 40155e <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401548:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40154a:	3b01      	subs	r3, #1
  40154c:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  40154e:	2000      	movs	r0, #0
  401550:	e7d5      	b.n	4014fe <prvCopyDataToQueue+0x1a>
  401552:	2000      	movs	r0, #0
  401554:	e7d3      	b.n	4014fe <prvCopyDataToQueue+0x1a>
  401556:	2000      	movs	r0, #0
  401558:	e7d1      	b.n	4014fe <prvCopyDataToQueue+0x1a>
  40155a:	2000      	movs	r0, #0
  40155c:	e7cf      	b.n	4014fe <prvCopyDataToQueue+0x1a>
  40155e:	2000      	movs	r0, #0
  401560:	e7cd      	b.n	4014fe <prvCopyDataToQueue+0x1a>
  401562:	bf00      	nop
  401564:	00402775 	.word	0x00402775
  401568:	004039d5 	.word	0x004039d5

0040156c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  40156c:	b530      	push	{r4, r5, lr}
  40156e:	b083      	sub	sp, #12
  401570:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401572:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401574:	b174      	cbz	r4, 401594 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401576:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401578:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40157a:	429a      	cmp	r2, r3
  40157c:	d315      	bcc.n	4015aa <prvNotifyQueueSetContainer+0x3e>
  40157e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401582:	b672      	cpsid	i
  401584:	f383 8811 	msr	BASEPRI, r3
  401588:	f3bf 8f6f 	isb	sy
  40158c:	f3bf 8f4f 	dsb	sy
  401590:	b662      	cpsie	i
  401592:	e7fe      	b.n	401592 <prvNotifyQueueSetContainer+0x26>
  401594:	f04f 0380 	mov.w	r3, #128	; 0x80
  401598:	b672      	cpsid	i
  40159a:	f383 8811 	msr	BASEPRI, r3
  40159e:	f3bf 8f6f 	isb	sy
  4015a2:	f3bf 8f4f 	dsb	sy
  4015a6:	b662      	cpsie	i
  4015a8:	e7fe      	b.n	4015a8 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4015aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4015ac:	4293      	cmp	r3, r2
  4015ae:	d803      	bhi.n	4015b8 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  4015b0:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4015b2:	4628      	mov	r0, r5
  4015b4:	b003      	add	sp, #12
  4015b6:	bd30      	pop	{r4, r5, pc}
  4015b8:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4015ba:	a901      	add	r1, sp, #4
  4015bc:	4620      	mov	r0, r4
  4015be:	4b0b      	ldr	r3, [pc, #44]	; (4015ec <prvNotifyQueueSetContainer+0x80>)
  4015c0:	4798      	blx	r3
  4015c2:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4015c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015c6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015ca:	d10a      	bne.n	4015e2 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4015cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4015ce:	2b00      	cmp	r3, #0
  4015d0:	d0ef      	beq.n	4015b2 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4015d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4015d6:	4b06      	ldr	r3, [pc, #24]	; (4015f0 <prvNotifyQueueSetContainer+0x84>)
  4015d8:	4798      	blx	r3
  4015da:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4015dc:	bf18      	it	ne
  4015de:	2501      	movne	r5, #1
  4015e0:	e7e7      	b.n	4015b2 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  4015e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015e4:	3301      	adds	r3, #1
  4015e6:	64a3      	str	r3, [r4, #72]	; 0x48
  4015e8:	e7e3      	b.n	4015b2 <prvNotifyQueueSetContainer+0x46>
  4015ea:	bf00      	nop
  4015ec:	004014e5 	.word	0x004014e5
  4015f0:	00402549 	.word	0x00402549

004015f4 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4015f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4015f6:	b172      	cbz	r2, 401616 <prvCopyDataFromQueue+0x22>
{
  4015f8:	b510      	push	{r4, lr}
  4015fa:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4015fc:	68c4      	ldr	r4, [r0, #12]
  4015fe:	4414      	add	r4, r2
  401600:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401602:	6840      	ldr	r0, [r0, #4]
  401604:	4284      	cmp	r4, r0
  401606:	d301      	bcc.n	40160c <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401608:	6818      	ldr	r0, [r3, #0]
  40160a:	60d8      	str	r0, [r3, #12]
  40160c:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40160e:	68d9      	ldr	r1, [r3, #12]
  401610:	4b01      	ldr	r3, [pc, #4]	; (401618 <prvCopyDataFromQueue+0x24>)
  401612:	4798      	blx	r3
  401614:	bd10      	pop	{r4, pc}
  401616:	4770      	bx	lr
  401618:	004039d5 	.word	0x004039d5

0040161c <prvUnlockQueue>:
{
  40161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40161e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401620:	4b22      	ldr	r3, [pc, #136]	; (4016ac <prvUnlockQueue+0x90>)
  401622:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401624:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401626:	2b00      	cmp	r3, #0
  401628:	dd1b      	ble.n	401662 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40162a:	4d21      	ldr	r5, [pc, #132]	; (4016b0 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  40162c:	4f21      	ldr	r7, [pc, #132]	; (4016b4 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40162e:	4e22      	ldr	r6, [pc, #136]	; (4016b8 <prvUnlockQueue+0x9c>)
  401630:	e00b      	b.n	40164a <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401632:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401634:	b1ab      	cbz	r3, 401662 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401636:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40163a:	47b0      	blx	r6
  40163c:	b978      	cbnz	r0, 40165e <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  40163e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401640:	3b01      	subs	r3, #1
  401642:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401644:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401646:	2b00      	cmp	r3, #0
  401648:	dd0b      	ble.n	401662 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  40164a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40164c:	2b00      	cmp	r3, #0
  40164e:	d0f0      	beq.n	401632 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401650:	2100      	movs	r1, #0
  401652:	4620      	mov	r0, r4
  401654:	47a8      	blx	r5
  401656:	2801      	cmp	r0, #1
  401658:	d1f1      	bne.n	40163e <prvUnlockQueue+0x22>
						vTaskMissedYield();
  40165a:	47b8      	blx	r7
  40165c:	e7ef      	b.n	40163e <prvUnlockQueue+0x22>
							vTaskMissedYield();
  40165e:	47b8      	blx	r7
  401660:	e7ed      	b.n	40163e <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  401662:	f04f 33ff 	mov.w	r3, #4294967295
  401666:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401668:	4b14      	ldr	r3, [pc, #80]	; (4016bc <prvUnlockQueue+0xa0>)
  40166a:	4798      	blx	r3
	taskENTER_CRITICAL();
  40166c:	4b0f      	ldr	r3, [pc, #60]	; (4016ac <prvUnlockQueue+0x90>)
  40166e:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401670:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401672:	2b00      	cmp	r3, #0
  401674:	dd14      	ble.n	4016a0 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401676:	6923      	ldr	r3, [r4, #16]
  401678:	b193      	cbz	r3, 4016a0 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40167a:	f104 0610 	add.w	r6, r4, #16
  40167e:	4d0e      	ldr	r5, [pc, #56]	; (4016b8 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401680:	4f0c      	ldr	r7, [pc, #48]	; (4016b4 <prvUnlockQueue+0x98>)
  401682:	e007      	b.n	401694 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  401684:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401686:	3b01      	subs	r3, #1
  401688:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40168a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40168c:	2b00      	cmp	r3, #0
  40168e:	dd07      	ble.n	4016a0 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401690:	6923      	ldr	r3, [r4, #16]
  401692:	b12b      	cbz	r3, 4016a0 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401694:	4630      	mov	r0, r6
  401696:	47a8      	blx	r5
  401698:	2800      	cmp	r0, #0
  40169a:	d0f3      	beq.n	401684 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  40169c:	47b8      	blx	r7
  40169e:	e7f1      	b.n	401684 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  4016a0:	f04f 33ff 	mov.w	r3, #4294967295
  4016a4:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  4016a6:	4b05      	ldr	r3, [pc, #20]	; (4016bc <prvUnlockQueue+0xa0>)
  4016a8:	4798      	blx	r3
  4016aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4016ac:	00401235 	.word	0x00401235
  4016b0:	0040156d 	.word	0x0040156d
  4016b4:	004026a5 	.word	0x004026a5
  4016b8:	00402549 	.word	0x00402549
  4016bc:	00401281 	.word	0x00401281

004016c0 <xQueueGenericReset>:
{
  4016c0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4016c2:	b308      	cbz	r0, 401708 <xQueueGenericReset+0x48>
  4016c4:	4604      	mov	r4, r0
  4016c6:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4016c8:	4b1d      	ldr	r3, [pc, #116]	; (401740 <xQueueGenericReset+0x80>)
  4016ca:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4016cc:	6822      	ldr	r2, [r4, #0]
  4016ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4016d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4016d2:	fb03 f301 	mul.w	r3, r3, r1
  4016d6:	18d0      	adds	r0, r2, r3
  4016d8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4016da:	2000      	movs	r0, #0
  4016dc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4016de:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4016e0:	1a5b      	subs	r3, r3, r1
  4016e2:	4413      	add	r3, r2
  4016e4:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4016e6:	f04f 33ff 	mov.w	r3, #4294967295
  4016ea:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4016ec:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  4016ee:	b9fd      	cbnz	r5, 401730 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4016f0:	6923      	ldr	r3, [r4, #16]
  4016f2:	b12b      	cbz	r3, 401700 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4016f4:	f104 0010 	add.w	r0, r4, #16
  4016f8:	4b12      	ldr	r3, [pc, #72]	; (401744 <xQueueGenericReset+0x84>)
  4016fa:	4798      	blx	r3
  4016fc:	2801      	cmp	r0, #1
  4016fe:	d00e      	beq.n	40171e <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401700:	4b11      	ldr	r3, [pc, #68]	; (401748 <xQueueGenericReset+0x88>)
  401702:	4798      	blx	r3
}
  401704:	2001      	movs	r0, #1
  401706:	bd38      	pop	{r3, r4, r5, pc}
  401708:	f04f 0380 	mov.w	r3, #128	; 0x80
  40170c:	b672      	cpsid	i
  40170e:	f383 8811 	msr	BASEPRI, r3
  401712:	f3bf 8f6f 	isb	sy
  401716:	f3bf 8f4f 	dsb	sy
  40171a:	b662      	cpsie	i
  40171c:	e7fe      	b.n	40171c <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  40171e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401722:	4b0a      	ldr	r3, [pc, #40]	; (40174c <xQueueGenericReset+0x8c>)
  401724:	601a      	str	r2, [r3, #0]
  401726:	f3bf 8f4f 	dsb	sy
  40172a:	f3bf 8f6f 	isb	sy
  40172e:	e7e7      	b.n	401700 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401730:	f104 0010 	add.w	r0, r4, #16
  401734:	4d06      	ldr	r5, [pc, #24]	; (401750 <xQueueGenericReset+0x90>)
  401736:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401738:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40173c:	47a8      	blx	r5
  40173e:	e7df      	b.n	401700 <xQueueGenericReset+0x40>
  401740:	00401235 	.word	0x00401235
  401744:	00402549 	.word	0x00402549
  401748:	00401281 	.word	0x00401281
  40174c:	e000ed04 	.word	0xe000ed04
  401750:	004010e9 	.word	0x004010e9

00401754 <xQueueGenericCreate>:
{
  401754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401756:	b950      	cbnz	r0, 40176e <xQueueGenericCreate+0x1a>
  401758:	f04f 0380 	mov.w	r3, #128	; 0x80
  40175c:	b672      	cpsid	i
  40175e:	f383 8811 	msr	BASEPRI, r3
  401762:	f3bf 8f6f 	isb	sy
  401766:	f3bf 8f4f 	dsb	sy
  40176a:	b662      	cpsie	i
  40176c:	e7fe      	b.n	40176c <xQueueGenericCreate+0x18>
  40176e:	4606      	mov	r6, r0
  401770:	4617      	mov	r7, r2
  401772:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401774:	b189      	cbz	r1, 40179a <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401776:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40177a:	3059      	adds	r0, #89	; 0x59
  40177c:	4b12      	ldr	r3, [pc, #72]	; (4017c8 <xQueueGenericCreate+0x74>)
  40177e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401780:	4604      	mov	r4, r0
  401782:	b9e8      	cbnz	r0, 4017c0 <xQueueGenericCreate+0x6c>
  401784:	f04f 0380 	mov.w	r3, #128	; 0x80
  401788:	b672      	cpsid	i
  40178a:	f383 8811 	msr	BASEPRI, r3
  40178e:	f3bf 8f6f 	isb	sy
  401792:	f3bf 8f4f 	dsb	sy
  401796:	b662      	cpsie	i
  401798:	e7fe      	b.n	401798 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40179a:	2058      	movs	r0, #88	; 0x58
  40179c:	4b0a      	ldr	r3, [pc, #40]	; (4017c8 <xQueueGenericCreate+0x74>)
  40179e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4017a0:	4604      	mov	r4, r0
  4017a2:	2800      	cmp	r0, #0
  4017a4:	d0ee      	beq.n	401784 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4017a6:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4017a8:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4017aa:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4017ac:	2101      	movs	r1, #1
  4017ae:	4620      	mov	r0, r4
  4017b0:	4b06      	ldr	r3, [pc, #24]	; (4017cc <xQueueGenericCreate+0x78>)
  4017b2:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4017b4:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  4017b8:	2300      	movs	r3, #0
  4017ba:	6563      	str	r3, [r4, #84]	; 0x54
}
  4017bc:	4620      	mov	r0, r4
  4017be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4017c0:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4017c4:	6003      	str	r3, [r0, #0]
  4017c6:	e7ef      	b.n	4017a8 <xQueueGenericCreate+0x54>
  4017c8:	00401491 	.word	0x00401491
  4017cc:	004016c1 	.word	0x004016c1

004017d0 <xQueueGenericSend>:
{
  4017d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4017d4:	b085      	sub	sp, #20
  4017d6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4017d8:	b1b8      	cbz	r0, 40180a <xQueueGenericSend+0x3a>
  4017da:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4017dc:	b301      	cbz	r1, 401820 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4017de:	2b02      	cmp	r3, #2
  4017e0:	d02c      	beq.n	40183c <xQueueGenericSend+0x6c>
  4017e2:	461d      	mov	r5, r3
  4017e4:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4017e6:	4b66      	ldr	r3, [pc, #408]	; (401980 <xQueueGenericSend+0x1b0>)
  4017e8:	4798      	blx	r3
  4017ea:	2800      	cmp	r0, #0
  4017ec:	d134      	bne.n	401858 <xQueueGenericSend+0x88>
  4017ee:	9b01      	ldr	r3, [sp, #4]
  4017f0:	2b00      	cmp	r3, #0
  4017f2:	d038      	beq.n	401866 <xQueueGenericSend+0x96>
  4017f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017f8:	b672      	cpsid	i
  4017fa:	f383 8811 	msr	BASEPRI, r3
  4017fe:	f3bf 8f6f 	isb	sy
  401802:	f3bf 8f4f 	dsb	sy
  401806:	b662      	cpsie	i
  401808:	e7fe      	b.n	401808 <xQueueGenericSend+0x38>
  40180a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40180e:	b672      	cpsid	i
  401810:	f383 8811 	msr	BASEPRI, r3
  401814:	f3bf 8f6f 	isb	sy
  401818:	f3bf 8f4f 	dsb	sy
  40181c:	b662      	cpsie	i
  40181e:	e7fe      	b.n	40181e <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401820:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401822:	2a00      	cmp	r2, #0
  401824:	d0db      	beq.n	4017de <xQueueGenericSend+0xe>
  401826:	f04f 0380 	mov.w	r3, #128	; 0x80
  40182a:	b672      	cpsid	i
  40182c:	f383 8811 	msr	BASEPRI, r3
  401830:	f3bf 8f6f 	isb	sy
  401834:	f3bf 8f4f 	dsb	sy
  401838:	b662      	cpsie	i
  40183a:	e7fe      	b.n	40183a <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40183c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  40183e:	2a01      	cmp	r2, #1
  401840:	d0cf      	beq.n	4017e2 <xQueueGenericSend+0x12>
  401842:	f04f 0380 	mov.w	r3, #128	; 0x80
  401846:	b672      	cpsid	i
  401848:	f383 8811 	msr	BASEPRI, r3
  40184c:	f3bf 8f6f 	isb	sy
  401850:	f3bf 8f4f 	dsb	sy
  401854:	b662      	cpsie	i
  401856:	e7fe      	b.n	401856 <xQueueGenericSend+0x86>
  401858:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  40185a:	4e4a      	ldr	r6, [pc, #296]	; (401984 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  40185c:	f8df a150 	ldr.w	sl, [pc, #336]	; 4019b0 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401860:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401990 <xQueueGenericSend+0x1c0>
  401864:	e042      	b.n	4018ec <xQueueGenericSend+0x11c>
  401866:	2700      	movs	r7, #0
  401868:	e7f7      	b.n	40185a <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40186a:	462a      	mov	r2, r5
  40186c:	4641      	mov	r1, r8
  40186e:	4620      	mov	r0, r4
  401870:	4b45      	ldr	r3, [pc, #276]	; (401988 <xQueueGenericSend+0x1b8>)
  401872:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401874:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401876:	b19b      	cbz	r3, 4018a0 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401878:	4629      	mov	r1, r5
  40187a:	4620      	mov	r0, r4
  40187c:	4b43      	ldr	r3, [pc, #268]	; (40198c <xQueueGenericSend+0x1bc>)
  40187e:	4798      	blx	r3
  401880:	2801      	cmp	r0, #1
  401882:	d107      	bne.n	401894 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401888:	4b41      	ldr	r3, [pc, #260]	; (401990 <xQueueGenericSend+0x1c0>)
  40188a:	601a      	str	r2, [r3, #0]
  40188c:	f3bf 8f4f 	dsb	sy
  401890:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401894:	4b3f      	ldr	r3, [pc, #252]	; (401994 <xQueueGenericSend+0x1c4>)
  401896:	4798      	blx	r3
				return pdPASS;
  401898:	2001      	movs	r0, #1
}
  40189a:	b005      	add	sp, #20
  40189c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4018a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4018a2:	b173      	cbz	r3, 4018c2 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4018a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4018a8:	4b3b      	ldr	r3, [pc, #236]	; (401998 <xQueueGenericSend+0x1c8>)
  4018aa:	4798      	blx	r3
  4018ac:	2801      	cmp	r0, #1
  4018ae:	d1f1      	bne.n	401894 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  4018b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018b4:	4b36      	ldr	r3, [pc, #216]	; (401990 <xQueueGenericSend+0x1c0>)
  4018b6:	601a      	str	r2, [r3, #0]
  4018b8:	f3bf 8f4f 	dsb	sy
  4018bc:	f3bf 8f6f 	isb	sy
  4018c0:	e7e8      	b.n	401894 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  4018c2:	2800      	cmp	r0, #0
  4018c4:	d0e6      	beq.n	401894 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4018c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018ca:	4b31      	ldr	r3, [pc, #196]	; (401990 <xQueueGenericSend+0x1c0>)
  4018cc:	601a      	str	r2, [r3, #0]
  4018ce:	f3bf 8f4f 	dsb	sy
  4018d2:	f3bf 8f6f 	isb	sy
  4018d6:	e7dd      	b.n	401894 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  4018d8:	4b2e      	ldr	r3, [pc, #184]	; (401994 <xQueueGenericSend+0x1c4>)
  4018da:	4798      	blx	r3
					return errQUEUE_FULL;
  4018dc:	2000      	movs	r0, #0
  4018de:	e7dc      	b.n	40189a <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  4018e0:	4620      	mov	r0, r4
  4018e2:	4b2e      	ldr	r3, [pc, #184]	; (40199c <xQueueGenericSend+0x1cc>)
  4018e4:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4018e6:	4b2e      	ldr	r3, [pc, #184]	; (4019a0 <xQueueGenericSend+0x1d0>)
  4018e8:	4798      	blx	r3
  4018ea:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  4018ec:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4018ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4018f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4018f2:	429a      	cmp	r2, r3
  4018f4:	d3b9      	bcc.n	40186a <xQueueGenericSend+0x9a>
  4018f6:	2d02      	cmp	r5, #2
  4018f8:	d0b7      	beq.n	40186a <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  4018fa:	9b01      	ldr	r3, [sp, #4]
  4018fc:	2b00      	cmp	r3, #0
  4018fe:	d0eb      	beq.n	4018d8 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401900:	b90f      	cbnz	r7, 401906 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  401902:	a802      	add	r0, sp, #8
  401904:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401906:	4b23      	ldr	r3, [pc, #140]	; (401994 <xQueueGenericSend+0x1c4>)
  401908:	4798      	blx	r3
		vTaskSuspendAll();
  40190a:	4b26      	ldr	r3, [pc, #152]	; (4019a4 <xQueueGenericSend+0x1d4>)
  40190c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40190e:	47b0      	blx	r6
  401910:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401912:	f1b3 3fff 	cmp.w	r3, #4294967295
  401916:	d101      	bne.n	40191c <xQueueGenericSend+0x14c>
  401918:	2300      	movs	r3, #0
  40191a:	6463      	str	r3, [r4, #68]	; 0x44
  40191c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40191e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401922:	d101      	bne.n	401928 <xQueueGenericSend+0x158>
  401924:	2300      	movs	r3, #0
  401926:	64a3      	str	r3, [r4, #72]	; 0x48
  401928:	4b1a      	ldr	r3, [pc, #104]	; (401994 <xQueueGenericSend+0x1c4>)
  40192a:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40192c:	a901      	add	r1, sp, #4
  40192e:	a802      	add	r0, sp, #8
  401930:	4b1d      	ldr	r3, [pc, #116]	; (4019a8 <xQueueGenericSend+0x1d8>)
  401932:	4798      	blx	r3
  401934:	b9e0      	cbnz	r0, 401970 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  401936:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401938:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  40193c:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  40193e:	4b15      	ldr	r3, [pc, #84]	; (401994 <xQueueGenericSend+0x1c4>)
  401940:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401942:	45bb      	cmp	fp, r7
  401944:	d1cc      	bne.n	4018e0 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401946:	9901      	ldr	r1, [sp, #4]
  401948:	f104 0010 	add.w	r0, r4, #16
  40194c:	4b17      	ldr	r3, [pc, #92]	; (4019ac <xQueueGenericSend+0x1dc>)
  40194e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401950:	4620      	mov	r0, r4
  401952:	4b12      	ldr	r3, [pc, #72]	; (40199c <xQueueGenericSend+0x1cc>)
  401954:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401956:	4b12      	ldr	r3, [pc, #72]	; (4019a0 <xQueueGenericSend+0x1d0>)
  401958:	4798      	blx	r3
  40195a:	2800      	cmp	r0, #0
  40195c:	d1c5      	bne.n	4018ea <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  40195e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401962:	f8c9 3000 	str.w	r3, [r9]
  401966:	f3bf 8f4f 	dsb	sy
  40196a:	f3bf 8f6f 	isb	sy
  40196e:	e7bc      	b.n	4018ea <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401970:	4620      	mov	r0, r4
  401972:	4b0a      	ldr	r3, [pc, #40]	; (40199c <xQueueGenericSend+0x1cc>)
  401974:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401976:	4b0a      	ldr	r3, [pc, #40]	; (4019a0 <xQueueGenericSend+0x1d0>)
  401978:	4798      	blx	r3
			return errQUEUE_FULL;
  40197a:	2000      	movs	r0, #0
  40197c:	e78d      	b.n	40189a <xQueueGenericSend+0xca>
  40197e:	bf00      	nop
  401980:	004026b1 	.word	0x004026b1
  401984:	00401235 	.word	0x00401235
  401988:	004014e5 	.word	0x004014e5
  40198c:	0040156d 	.word	0x0040156d
  401990:	e000ed04 	.word	0xe000ed04
  401994:	00401281 	.word	0x00401281
  401998:	00402549 	.word	0x00402549
  40199c:	0040161d 	.word	0x0040161d
  4019a0:	004021bd 	.word	0x004021bd
  4019a4:	00402055 	.word	0x00402055
  4019a8:	00402611 	.word	0x00402611
  4019ac:	00402445 	.word	0x00402445
  4019b0:	004025e1 	.word	0x004025e1

004019b4 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  4019b4:	2800      	cmp	r0, #0
  4019b6:	d036      	beq.n	401a26 <xQueueGenericSendFromISR+0x72>
{
  4019b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4019bc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4019be:	2900      	cmp	r1, #0
  4019c0:	d03c      	beq.n	401a3c <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4019c2:	2b02      	cmp	r3, #2
  4019c4:	d048      	beq.n	401a58 <xQueueGenericSendFromISR+0xa4>
  4019c6:	461e      	mov	r6, r3
  4019c8:	4615      	mov	r5, r2
  4019ca:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4019cc:	4b35      	ldr	r3, [pc, #212]	; (401aa4 <xQueueGenericSendFromISR+0xf0>)
  4019ce:	4798      	blx	r3
	__asm volatile
  4019d0:	f3ef 8711 	mrs	r7, BASEPRI
  4019d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019d8:	b672      	cpsid	i
  4019da:	f383 8811 	msr	BASEPRI, r3
  4019de:	f3bf 8f6f 	isb	sy
  4019e2:	f3bf 8f4f 	dsb	sy
  4019e6:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4019e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4019ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4019ec:	429a      	cmp	r2, r3
  4019ee:	d301      	bcc.n	4019f4 <xQueueGenericSendFromISR+0x40>
  4019f0:	2e02      	cmp	r6, #2
  4019f2:	d14f      	bne.n	401a94 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4019f4:	4632      	mov	r2, r6
  4019f6:	4641      	mov	r1, r8
  4019f8:	4620      	mov	r0, r4
  4019fa:	4b2b      	ldr	r3, [pc, #172]	; (401aa8 <xQueueGenericSendFromISR+0xf4>)
  4019fc:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  4019fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a00:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a04:	d141      	bne.n	401a8a <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  401a06:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401a08:	2b00      	cmp	r3, #0
  401a0a:	d033      	beq.n	401a74 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401a0c:	4631      	mov	r1, r6
  401a0e:	4620      	mov	r0, r4
  401a10:	4b26      	ldr	r3, [pc, #152]	; (401aac <xQueueGenericSendFromISR+0xf8>)
  401a12:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401a14:	2d00      	cmp	r5, #0
  401a16:	d03f      	beq.n	401a98 <xQueueGenericSendFromISR+0xe4>
  401a18:	2801      	cmp	r0, #1
  401a1a:	d13d      	bne.n	401a98 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401a1c:	6028      	str	r0, [r5, #0]
	__asm volatile
  401a1e:	f387 8811 	msr	BASEPRI, r7
}
  401a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  401a26:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a2a:	b672      	cpsid	i
  401a2c:	f383 8811 	msr	BASEPRI, r3
  401a30:	f3bf 8f6f 	isb	sy
  401a34:	f3bf 8f4f 	dsb	sy
  401a38:	b662      	cpsie	i
  401a3a:	e7fe      	b.n	401a3a <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401a3c:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401a3e:	2800      	cmp	r0, #0
  401a40:	d0bf      	beq.n	4019c2 <xQueueGenericSendFromISR+0xe>
  401a42:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a46:	b672      	cpsid	i
  401a48:	f383 8811 	msr	BASEPRI, r3
  401a4c:	f3bf 8f6f 	isb	sy
  401a50:	f3bf 8f4f 	dsb	sy
  401a54:	b662      	cpsie	i
  401a56:	e7fe      	b.n	401a56 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401a58:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401a5a:	2801      	cmp	r0, #1
  401a5c:	d0b3      	beq.n	4019c6 <xQueueGenericSendFromISR+0x12>
  401a5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a62:	b672      	cpsid	i
  401a64:	f383 8811 	msr	BASEPRI, r3
  401a68:	f3bf 8f6f 	isb	sy
  401a6c:	f3bf 8f4f 	dsb	sy
  401a70:	b662      	cpsie	i
  401a72:	e7fe      	b.n	401a72 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401a76:	b18b      	cbz	r3, 401a9c <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401a78:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a7c:	4b0c      	ldr	r3, [pc, #48]	; (401ab0 <xQueueGenericSendFromISR+0xfc>)
  401a7e:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401a80:	b175      	cbz	r5, 401aa0 <xQueueGenericSendFromISR+0xec>
  401a82:	b168      	cbz	r0, 401aa0 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401a84:	2001      	movs	r0, #1
  401a86:	6028      	str	r0, [r5, #0]
  401a88:	e7c9      	b.n	401a1e <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  401a8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a8c:	3301      	adds	r3, #1
  401a8e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401a90:	2001      	movs	r0, #1
  401a92:	e7c4      	b.n	401a1e <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401a94:	2000      	movs	r0, #0
  401a96:	e7c2      	b.n	401a1e <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401a98:	2001      	movs	r0, #1
  401a9a:	e7c0      	b.n	401a1e <xQueueGenericSendFromISR+0x6a>
  401a9c:	2001      	movs	r0, #1
  401a9e:	e7be      	b.n	401a1e <xQueueGenericSendFromISR+0x6a>
  401aa0:	2001      	movs	r0, #1
  401aa2:	e7bc      	b.n	401a1e <xQueueGenericSendFromISR+0x6a>
  401aa4:	0040142d 	.word	0x0040142d
  401aa8:	004014e5 	.word	0x004014e5
  401aac:	0040156d 	.word	0x0040156d
  401ab0:	00402549 	.word	0x00402549

00401ab4 <xQueueGenericReceive>:
{
  401ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401ab8:	b084      	sub	sp, #16
  401aba:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401abc:	b198      	cbz	r0, 401ae6 <xQueueGenericReceive+0x32>
  401abe:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401ac0:	b1e1      	cbz	r1, 401afc <xQueueGenericReceive+0x48>
  401ac2:	4698      	mov	r8, r3
  401ac4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401ac6:	4b61      	ldr	r3, [pc, #388]	; (401c4c <xQueueGenericReceive+0x198>)
  401ac8:	4798      	blx	r3
  401aca:	bb28      	cbnz	r0, 401b18 <xQueueGenericReceive+0x64>
  401acc:	9b01      	ldr	r3, [sp, #4]
  401ace:	b353      	cbz	r3, 401b26 <xQueueGenericReceive+0x72>
  401ad0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ad4:	b672      	cpsid	i
  401ad6:	f383 8811 	msr	BASEPRI, r3
  401ada:	f3bf 8f6f 	isb	sy
  401ade:	f3bf 8f4f 	dsb	sy
  401ae2:	b662      	cpsie	i
  401ae4:	e7fe      	b.n	401ae4 <xQueueGenericReceive+0x30>
  401ae6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aea:	b672      	cpsid	i
  401aec:	f383 8811 	msr	BASEPRI, r3
  401af0:	f3bf 8f6f 	isb	sy
  401af4:	f3bf 8f4f 	dsb	sy
  401af8:	b662      	cpsie	i
  401afa:	e7fe      	b.n	401afa <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401afc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401afe:	2a00      	cmp	r2, #0
  401b00:	d0df      	beq.n	401ac2 <xQueueGenericReceive+0xe>
  401b02:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b06:	b672      	cpsid	i
  401b08:	f383 8811 	msr	BASEPRI, r3
  401b0c:	f3bf 8f6f 	isb	sy
  401b10:	f3bf 8f4f 	dsb	sy
  401b14:	b662      	cpsie	i
  401b16:	e7fe      	b.n	401b16 <xQueueGenericReceive+0x62>
  401b18:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401b1a:	4d4d      	ldr	r5, [pc, #308]	; (401c50 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401b1c:	f8df a160 	ldr.w	sl, [pc, #352]	; 401c80 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401b20:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401c60 <xQueueGenericReceive+0x1ac>
  401b24:	e04b      	b.n	401bbe <xQueueGenericReceive+0x10a>
  401b26:	2600      	movs	r6, #0
  401b28:	e7f7      	b.n	401b1a <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401b2a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401b2c:	4639      	mov	r1, r7
  401b2e:	4620      	mov	r0, r4
  401b30:	4b48      	ldr	r3, [pc, #288]	; (401c54 <xQueueGenericReceive+0x1a0>)
  401b32:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401b34:	f1b8 0f00 	cmp.w	r8, #0
  401b38:	d11d      	bne.n	401b76 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401b3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b3c:	3b01      	subs	r3, #1
  401b3e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401b40:	6823      	ldr	r3, [r4, #0]
  401b42:	b913      	cbnz	r3, 401b4a <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401b44:	4b44      	ldr	r3, [pc, #272]	; (401c58 <xQueueGenericReceive+0x1a4>)
  401b46:	4798      	blx	r3
  401b48:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401b4a:	6923      	ldr	r3, [r4, #16]
  401b4c:	b16b      	cbz	r3, 401b6a <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401b4e:	f104 0010 	add.w	r0, r4, #16
  401b52:	4b42      	ldr	r3, [pc, #264]	; (401c5c <xQueueGenericReceive+0x1a8>)
  401b54:	4798      	blx	r3
  401b56:	2801      	cmp	r0, #1
  401b58:	d107      	bne.n	401b6a <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b5e:	4b40      	ldr	r3, [pc, #256]	; (401c60 <xQueueGenericReceive+0x1ac>)
  401b60:	601a      	str	r2, [r3, #0]
  401b62:	f3bf 8f4f 	dsb	sy
  401b66:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401b6a:	4b3e      	ldr	r3, [pc, #248]	; (401c64 <xQueueGenericReceive+0x1b0>)
  401b6c:	4798      	blx	r3
				return pdPASS;
  401b6e:	2001      	movs	r0, #1
}
  401b70:	b004      	add	sp, #16
  401b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401b76:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401b7a:	2b00      	cmp	r3, #0
  401b7c:	d0f5      	beq.n	401b6a <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401b7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b82:	4b36      	ldr	r3, [pc, #216]	; (401c5c <xQueueGenericReceive+0x1a8>)
  401b84:	4798      	blx	r3
  401b86:	2800      	cmp	r0, #0
  401b88:	d0ef      	beq.n	401b6a <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b8e:	4b34      	ldr	r3, [pc, #208]	; (401c60 <xQueueGenericReceive+0x1ac>)
  401b90:	601a      	str	r2, [r3, #0]
  401b92:	f3bf 8f4f 	dsb	sy
  401b96:	f3bf 8f6f 	isb	sy
  401b9a:	e7e6      	b.n	401b6a <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401b9c:	4b31      	ldr	r3, [pc, #196]	; (401c64 <xQueueGenericReceive+0x1b0>)
  401b9e:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401ba0:	2000      	movs	r0, #0
  401ba2:	e7e5      	b.n	401b70 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401ba4:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401ba6:	6860      	ldr	r0, [r4, #4]
  401ba8:	4b2f      	ldr	r3, [pc, #188]	; (401c68 <xQueueGenericReceive+0x1b4>)
  401baa:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401bac:	4b2d      	ldr	r3, [pc, #180]	; (401c64 <xQueueGenericReceive+0x1b0>)
  401bae:	4798      	blx	r3
  401bb0:	e030      	b.n	401c14 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  401bb2:	4620      	mov	r0, r4
  401bb4:	4b2d      	ldr	r3, [pc, #180]	; (401c6c <xQueueGenericReceive+0x1b8>)
  401bb6:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401bb8:	4b2d      	ldr	r3, [pc, #180]	; (401c70 <xQueueGenericReceive+0x1bc>)
  401bba:	4798      	blx	r3
  401bbc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401bbe:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401bc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401bc2:	2b00      	cmp	r3, #0
  401bc4:	d1b1      	bne.n	401b2a <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401bc6:	9b01      	ldr	r3, [sp, #4]
  401bc8:	2b00      	cmp	r3, #0
  401bca:	d0e7      	beq.n	401b9c <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  401bcc:	b90e      	cbnz	r6, 401bd2 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  401bce:	a802      	add	r0, sp, #8
  401bd0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401bd2:	4b24      	ldr	r3, [pc, #144]	; (401c64 <xQueueGenericReceive+0x1b0>)
  401bd4:	4798      	blx	r3
		vTaskSuspendAll();
  401bd6:	4b27      	ldr	r3, [pc, #156]	; (401c74 <xQueueGenericReceive+0x1c0>)
  401bd8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401bda:	47a8      	blx	r5
  401bdc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401bde:	f1b3 3fff 	cmp.w	r3, #4294967295
  401be2:	d101      	bne.n	401be8 <xQueueGenericReceive+0x134>
  401be4:	2300      	movs	r3, #0
  401be6:	6463      	str	r3, [r4, #68]	; 0x44
  401be8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401bea:	f1b3 3fff 	cmp.w	r3, #4294967295
  401bee:	d101      	bne.n	401bf4 <xQueueGenericReceive+0x140>
  401bf0:	2300      	movs	r3, #0
  401bf2:	64a3      	str	r3, [r4, #72]	; 0x48
  401bf4:	4b1b      	ldr	r3, [pc, #108]	; (401c64 <xQueueGenericReceive+0x1b0>)
  401bf6:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401bf8:	a901      	add	r1, sp, #4
  401bfa:	a802      	add	r0, sp, #8
  401bfc:	4b1e      	ldr	r3, [pc, #120]	; (401c78 <xQueueGenericReceive+0x1c4>)
  401bfe:	4798      	blx	r3
  401c00:	b9e8      	cbnz	r0, 401c3e <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  401c02:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401c04:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401c06:	4b17      	ldr	r3, [pc, #92]	; (401c64 <xQueueGenericReceive+0x1b0>)
  401c08:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401c0a:	2e00      	cmp	r6, #0
  401c0c:	d1d1      	bne.n	401bb2 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401c0e:	6823      	ldr	r3, [r4, #0]
  401c10:	2b00      	cmp	r3, #0
  401c12:	d0c7      	beq.n	401ba4 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401c14:	9901      	ldr	r1, [sp, #4]
  401c16:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c1a:	4b18      	ldr	r3, [pc, #96]	; (401c7c <xQueueGenericReceive+0x1c8>)
  401c1c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401c1e:	4620      	mov	r0, r4
  401c20:	4b12      	ldr	r3, [pc, #72]	; (401c6c <xQueueGenericReceive+0x1b8>)
  401c22:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401c24:	4b12      	ldr	r3, [pc, #72]	; (401c70 <xQueueGenericReceive+0x1bc>)
  401c26:	4798      	blx	r3
  401c28:	2800      	cmp	r0, #0
  401c2a:	d1c7      	bne.n	401bbc <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401c2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401c30:	f8c9 3000 	str.w	r3, [r9]
  401c34:	f3bf 8f4f 	dsb	sy
  401c38:	f3bf 8f6f 	isb	sy
  401c3c:	e7be      	b.n	401bbc <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401c3e:	4620      	mov	r0, r4
  401c40:	4b0a      	ldr	r3, [pc, #40]	; (401c6c <xQueueGenericReceive+0x1b8>)
  401c42:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401c44:	4b0a      	ldr	r3, [pc, #40]	; (401c70 <xQueueGenericReceive+0x1bc>)
  401c46:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401c48:	2000      	movs	r0, #0
  401c4a:	e791      	b.n	401b70 <xQueueGenericReceive+0xbc>
  401c4c:	004026b1 	.word	0x004026b1
  401c50:	00401235 	.word	0x00401235
  401c54:	004015f5 	.word	0x004015f5
  401c58:	00402831 	.word	0x00402831
  401c5c:	00402549 	.word	0x00402549
  401c60:	e000ed04 	.word	0xe000ed04
  401c64:	00401281 	.word	0x00401281
  401c68:	004026d1 	.word	0x004026d1
  401c6c:	0040161d 	.word	0x0040161d
  401c70:	004021bd 	.word	0x004021bd
  401c74:	00402055 	.word	0x00402055
  401c78:	00402611 	.word	0x00402611
  401c7c:	00402445 	.word	0x00402445
  401c80:	004025e1 	.word	0x004025e1

00401c84 <vQueueAddToRegistry>:
	{
  401c84:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401c86:	4b0b      	ldr	r3, [pc, #44]	; (401cb4 <vQueueAddToRegistry+0x30>)
  401c88:	681b      	ldr	r3, [r3, #0]
  401c8a:	b153      	cbz	r3, 401ca2 <vQueueAddToRegistry+0x1e>
  401c8c:	2301      	movs	r3, #1
  401c8e:	4c09      	ldr	r4, [pc, #36]	; (401cb4 <vQueueAddToRegistry+0x30>)
  401c90:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401c94:	b132      	cbz	r2, 401ca4 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401c96:	3301      	adds	r3, #1
  401c98:	2b08      	cmp	r3, #8
  401c9a:	d1f9      	bne.n	401c90 <vQueueAddToRegistry+0xc>
	}
  401c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401ca0:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401ca2:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401ca4:	4a03      	ldr	r2, [pc, #12]	; (401cb4 <vQueueAddToRegistry+0x30>)
  401ca6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401caa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401cae:	6058      	str	r0, [r3, #4]
				break;
  401cb0:	e7f4      	b.n	401c9c <vQueueAddToRegistry+0x18>
  401cb2:	bf00      	nop
  401cb4:	20400d0c 	.word	0x20400d0c

00401cb8 <vQueueWaitForMessageRestricted>:
	{
  401cb8:	b570      	push	{r4, r5, r6, lr}
  401cba:	4604      	mov	r4, r0
  401cbc:	460d      	mov	r5, r1
  401cbe:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401cc0:	4b0f      	ldr	r3, [pc, #60]	; (401d00 <vQueueWaitForMessageRestricted+0x48>)
  401cc2:	4798      	blx	r3
  401cc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
  401cca:	d00b      	beq.n	401ce4 <vQueueWaitForMessageRestricted+0x2c>
  401ccc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401cce:	f1b3 3fff 	cmp.w	r3, #4294967295
  401cd2:	d00a      	beq.n	401cea <vQueueWaitForMessageRestricted+0x32>
  401cd4:	4b0b      	ldr	r3, [pc, #44]	; (401d04 <vQueueWaitForMessageRestricted+0x4c>)
  401cd6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401cd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401cda:	b14b      	cbz	r3, 401cf0 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401cdc:	4620      	mov	r0, r4
  401cde:	4b0a      	ldr	r3, [pc, #40]	; (401d08 <vQueueWaitForMessageRestricted+0x50>)
  401ce0:	4798      	blx	r3
  401ce2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401ce4:	2300      	movs	r3, #0
  401ce6:	6463      	str	r3, [r4, #68]	; 0x44
  401ce8:	e7f0      	b.n	401ccc <vQueueWaitForMessageRestricted+0x14>
  401cea:	2300      	movs	r3, #0
  401cec:	64a3      	str	r3, [r4, #72]	; 0x48
  401cee:	e7f1      	b.n	401cd4 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401cf0:	4632      	mov	r2, r6
  401cf2:	4629      	mov	r1, r5
  401cf4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401cf8:	4b04      	ldr	r3, [pc, #16]	; (401d0c <vQueueWaitForMessageRestricted+0x54>)
  401cfa:	4798      	blx	r3
  401cfc:	e7ee      	b.n	401cdc <vQueueWaitForMessageRestricted+0x24>
  401cfe:	bf00      	nop
  401d00:	00401235 	.word	0x00401235
  401d04:	00401281 	.word	0x00401281
  401d08:	0040161d 	.word	0x0040161d
  401d0c:	004024c9 	.word	0x004024c9

00401d10 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401d10:	4b08      	ldr	r3, [pc, #32]	; (401d34 <prvResetNextTaskUnblockTime+0x24>)
  401d12:	681b      	ldr	r3, [r3, #0]
  401d14:	681b      	ldr	r3, [r3, #0]
  401d16:	b13b      	cbz	r3, 401d28 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401d18:	4b06      	ldr	r3, [pc, #24]	; (401d34 <prvResetNextTaskUnblockTime+0x24>)
  401d1a:	681b      	ldr	r3, [r3, #0]
  401d1c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401d1e:	68db      	ldr	r3, [r3, #12]
  401d20:	685a      	ldr	r2, [r3, #4]
  401d22:	4b05      	ldr	r3, [pc, #20]	; (401d38 <prvResetNextTaskUnblockTime+0x28>)
  401d24:	601a      	str	r2, [r3, #0]
  401d26:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401d28:	f04f 32ff 	mov.w	r2, #4294967295
  401d2c:	4b02      	ldr	r3, [pc, #8]	; (401d38 <prvResetNextTaskUnblockTime+0x28>)
  401d2e:	601a      	str	r2, [r3, #0]
  401d30:	4770      	bx	lr
  401d32:	bf00      	nop
  401d34:	20400a5c 	.word	0x20400a5c
  401d38:	20400b08 	.word	0x20400b08

00401d3c <prvAddCurrentTaskToDelayedList>:
{
  401d3c:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401d3e:	4b0f      	ldr	r3, [pc, #60]	; (401d7c <prvAddCurrentTaskToDelayedList+0x40>)
  401d40:	681b      	ldr	r3, [r3, #0]
  401d42:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401d44:	4b0e      	ldr	r3, [pc, #56]	; (401d80 <prvAddCurrentTaskToDelayedList+0x44>)
  401d46:	681b      	ldr	r3, [r3, #0]
  401d48:	4298      	cmp	r0, r3
  401d4a:	d30e      	bcc.n	401d6a <prvAddCurrentTaskToDelayedList+0x2e>
  401d4c:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401d4e:	4b0d      	ldr	r3, [pc, #52]	; (401d84 <prvAddCurrentTaskToDelayedList+0x48>)
  401d50:	6818      	ldr	r0, [r3, #0]
  401d52:	4b0a      	ldr	r3, [pc, #40]	; (401d7c <prvAddCurrentTaskToDelayedList+0x40>)
  401d54:	6819      	ldr	r1, [r3, #0]
  401d56:	3104      	adds	r1, #4
  401d58:	4b0b      	ldr	r3, [pc, #44]	; (401d88 <prvAddCurrentTaskToDelayedList+0x4c>)
  401d5a:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401d5c:	4b0b      	ldr	r3, [pc, #44]	; (401d8c <prvAddCurrentTaskToDelayedList+0x50>)
  401d5e:	681b      	ldr	r3, [r3, #0]
  401d60:	429c      	cmp	r4, r3
  401d62:	d201      	bcs.n	401d68 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401d64:	4b09      	ldr	r3, [pc, #36]	; (401d8c <prvAddCurrentTaskToDelayedList+0x50>)
  401d66:	601c      	str	r4, [r3, #0]
  401d68:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401d6a:	4b09      	ldr	r3, [pc, #36]	; (401d90 <prvAddCurrentTaskToDelayedList+0x54>)
  401d6c:	6818      	ldr	r0, [r3, #0]
  401d6e:	4b03      	ldr	r3, [pc, #12]	; (401d7c <prvAddCurrentTaskToDelayedList+0x40>)
  401d70:	6819      	ldr	r1, [r3, #0]
  401d72:	3104      	adds	r1, #4
  401d74:	4b04      	ldr	r3, [pc, #16]	; (401d88 <prvAddCurrentTaskToDelayedList+0x4c>)
  401d76:	4798      	blx	r3
  401d78:	bd10      	pop	{r4, pc}
  401d7a:	bf00      	nop
  401d7c:	20400a58 	.word	0x20400a58
  401d80:	20400b50 	.word	0x20400b50
  401d84:	20400a5c 	.word	0x20400a5c
  401d88:	0040111d 	.word	0x0040111d
  401d8c:	20400b08 	.word	0x20400b08
  401d90:	20400a60 	.word	0x20400a60

00401d94 <xTaskGenericCreate>:
{
  401d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d98:	b083      	sub	sp, #12
  401d9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401d9c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401da0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  401da2:	b160      	cbz	r0, 401dbe <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401da4:	2d04      	cmp	r5, #4
  401da6:	d915      	bls.n	401dd4 <xTaskGenericCreate+0x40>
  401da8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dac:	b672      	cpsid	i
  401dae:	f383 8811 	msr	BASEPRI, r3
  401db2:	f3bf 8f6f 	isb	sy
  401db6:	f3bf 8f4f 	dsb	sy
  401dba:	b662      	cpsie	i
  401dbc:	e7fe      	b.n	401dbc <xTaskGenericCreate+0x28>
  401dbe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dc2:	b672      	cpsid	i
  401dc4:	f383 8811 	msr	BASEPRI, r3
  401dc8:	f3bf 8f6f 	isb	sy
  401dcc:	f3bf 8f4f 	dsb	sy
  401dd0:	b662      	cpsie	i
  401dd2:	e7fe      	b.n	401dd2 <xTaskGenericCreate+0x3e>
  401dd4:	9001      	str	r0, [sp, #4]
  401dd6:	4698      	mov	r8, r3
  401dd8:	4691      	mov	r9, r2
  401dda:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ddc:	b936      	cbnz	r6, 401dec <xTaskGenericCreate+0x58>
  401dde:	0090      	lsls	r0, r2, #2
  401de0:	4b62      	ldr	r3, [pc, #392]	; (401f6c <xTaskGenericCreate+0x1d8>)
  401de2:	4798      	blx	r3
		if( pxStack != NULL )
  401de4:	4606      	mov	r6, r0
  401de6:	2800      	cmp	r0, #0
  401de8:	f000 809e 	beq.w	401f28 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401dec:	2058      	movs	r0, #88	; 0x58
  401dee:	4b5f      	ldr	r3, [pc, #380]	; (401f6c <xTaskGenericCreate+0x1d8>)
  401df0:	4798      	blx	r3
			if( pxNewTCB != NULL )
  401df2:	4604      	mov	r4, r0
  401df4:	2800      	cmp	r0, #0
  401df6:	f000 8094 	beq.w	401f22 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  401dfa:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401dfc:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401e00:	21a5      	movs	r1, #165	; 0xa5
  401e02:	4630      	mov	r0, r6
  401e04:	4b5a      	ldr	r3, [pc, #360]	; (401f70 <xTaskGenericCreate+0x1dc>)
  401e06:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401e08:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  401e0c:	444e      	add	r6, r9
  401e0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401e10:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401e14:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401e18:	783b      	ldrb	r3, [r7, #0]
  401e1a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401e1e:	783b      	ldrb	r3, [r7, #0]
  401e20:	2b00      	cmp	r3, #0
  401e22:	f040 8084 	bne.w	401f2e <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401e26:	2700      	movs	r7, #0
  401e28:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  401e2c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401e2e:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401e30:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401e32:	f104 0904 	add.w	r9, r4, #4
  401e36:	4648      	mov	r0, r9
  401e38:	f8df b184 	ldr.w	fp, [pc, #388]	; 401fc0 <xTaskGenericCreate+0x22c>
  401e3c:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401e3e:	f104 0018 	add.w	r0, r4, #24
  401e42:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401e44:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e46:	f1c5 0305 	rsb	r3, r5, #5
  401e4a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401e4c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  401e4e:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401e50:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401e54:	4642      	mov	r2, r8
  401e56:	9901      	ldr	r1, [sp, #4]
  401e58:	4630      	mov	r0, r6
  401e5a:	4b46      	ldr	r3, [pc, #280]	; (401f74 <xTaskGenericCreate+0x1e0>)
  401e5c:	4798      	blx	r3
  401e5e:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401e60:	f1ba 0f00 	cmp.w	sl, #0
  401e64:	d001      	beq.n	401e6a <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401e66:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  401e6a:	4b43      	ldr	r3, [pc, #268]	; (401f78 <xTaskGenericCreate+0x1e4>)
  401e6c:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401e6e:	4a43      	ldr	r2, [pc, #268]	; (401f7c <xTaskGenericCreate+0x1e8>)
  401e70:	6813      	ldr	r3, [r2, #0]
  401e72:	3301      	adds	r3, #1
  401e74:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401e76:	4b42      	ldr	r3, [pc, #264]	; (401f80 <xTaskGenericCreate+0x1ec>)
  401e78:	681b      	ldr	r3, [r3, #0]
  401e7a:	2b00      	cmp	r3, #0
  401e7c:	d166      	bne.n	401f4c <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  401e7e:	4b40      	ldr	r3, [pc, #256]	; (401f80 <xTaskGenericCreate+0x1ec>)
  401e80:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401e82:	6813      	ldr	r3, [r2, #0]
  401e84:	2b01      	cmp	r3, #1
  401e86:	d121      	bne.n	401ecc <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401e88:	4f3e      	ldr	r7, [pc, #248]	; (401f84 <xTaskGenericCreate+0x1f0>)
  401e8a:	4638      	mov	r0, r7
  401e8c:	4e3e      	ldr	r6, [pc, #248]	; (401f88 <xTaskGenericCreate+0x1f4>)
  401e8e:	47b0      	blx	r6
  401e90:	f107 0014 	add.w	r0, r7, #20
  401e94:	47b0      	blx	r6
  401e96:	f107 0028 	add.w	r0, r7, #40	; 0x28
  401e9a:	47b0      	blx	r6
  401e9c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  401ea0:	47b0      	blx	r6
  401ea2:	f107 0050 	add.w	r0, r7, #80	; 0x50
  401ea6:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  401ea8:	f8df 8118 	ldr.w	r8, [pc, #280]	; 401fc4 <xTaskGenericCreate+0x230>
  401eac:	4640      	mov	r0, r8
  401eae:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  401eb0:	4f36      	ldr	r7, [pc, #216]	; (401f8c <xTaskGenericCreate+0x1f8>)
  401eb2:	4638      	mov	r0, r7
  401eb4:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  401eb6:	4836      	ldr	r0, [pc, #216]	; (401f90 <xTaskGenericCreate+0x1fc>)
  401eb8:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  401eba:	4836      	ldr	r0, [pc, #216]	; (401f94 <xTaskGenericCreate+0x200>)
  401ebc:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  401ebe:	4836      	ldr	r0, [pc, #216]	; (401f98 <xTaskGenericCreate+0x204>)
  401ec0:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  401ec2:	4b36      	ldr	r3, [pc, #216]	; (401f9c <xTaskGenericCreate+0x208>)
  401ec4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401ec8:	4b35      	ldr	r3, [pc, #212]	; (401fa0 <xTaskGenericCreate+0x20c>)
  401eca:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  401ecc:	4a35      	ldr	r2, [pc, #212]	; (401fa4 <xTaskGenericCreate+0x210>)
  401ece:	6813      	ldr	r3, [r2, #0]
  401ed0:	3301      	adds	r3, #1
  401ed2:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401ed4:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401ed6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401ed8:	4a33      	ldr	r2, [pc, #204]	; (401fa8 <xTaskGenericCreate+0x214>)
  401eda:	6811      	ldr	r1, [r2, #0]
  401edc:	2301      	movs	r3, #1
  401ede:	4083      	lsls	r3, r0
  401ee0:	430b      	orrs	r3, r1
  401ee2:	6013      	str	r3, [r2, #0]
  401ee4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ee8:	4649      	mov	r1, r9
  401eea:	4b26      	ldr	r3, [pc, #152]	; (401f84 <xTaskGenericCreate+0x1f0>)
  401eec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ef0:	4b2e      	ldr	r3, [pc, #184]	; (401fac <xTaskGenericCreate+0x218>)
  401ef2:	4798      	blx	r3
		taskEXIT_CRITICAL();
  401ef4:	4b2e      	ldr	r3, [pc, #184]	; (401fb0 <xTaskGenericCreate+0x21c>)
  401ef6:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401ef8:	4b2e      	ldr	r3, [pc, #184]	; (401fb4 <xTaskGenericCreate+0x220>)
  401efa:	681b      	ldr	r3, [r3, #0]
  401efc:	2b00      	cmp	r3, #0
  401efe:	d031      	beq.n	401f64 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401f00:	4b1f      	ldr	r3, [pc, #124]	; (401f80 <xTaskGenericCreate+0x1ec>)
  401f02:	681b      	ldr	r3, [r3, #0]
  401f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401f06:	429d      	cmp	r5, r3
  401f08:	d92e      	bls.n	401f68 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  401f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f0e:	4b2a      	ldr	r3, [pc, #168]	; (401fb8 <xTaskGenericCreate+0x224>)
  401f10:	601a      	str	r2, [r3, #0]
  401f12:	f3bf 8f4f 	dsb	sy
  401f16:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401f1a:	2001      	movs	r0, #1
}
  401f1c:	b003      	add	sp, #12
  401f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401f22:	4630      	mov	r0, r6
  401f24:	4b25      	ldr	r3, [pc, #148]	; (401fbc <xTaskGenericCreate+0x228>)
  401f26:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401f28:	f04f 30ff 	mov.w	r0, #4294967295
  401f2c:	e7f6      	b.n	401f1c <xTaskGenericCreate+0x188>
  401f2e:	463b      	mov	r3, r7
  401f30:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401f34:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401f36:	7859      	ldrb	r1, [r3, #1]
  401f38:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401f3c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401f40:	2900      	cmp	r1, #0
  401f42:	f43f af70 	beq.w	401e26 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401f46:	42bb      	cmp	r3, r7
  401f48:	d1f5      	bne.n	401f36 <xTaskGenericCreate+0x1a2>
  401f4a:	e76c      	b.n	401e26 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  401f4c:	4b19      	ldr	r3, [pc, #100]	; (401fb4 <xTaskGenericCreate+0x220>)
  401f4e:	681b      	ldr	r3, [r3, #0]
  401f50:	2b00      	cmp	r3, #0
  401f52:	d1bb      	bne.n	401ecc <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401f54:	4b0a      	ldr	r3, [pc, #40]	; (401f80 <xTaskGenericCreate+0x1ec>)
  401f56:	681b      	ldr	r3, [r3, #0]
  401f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401f5a:	429d      	cmp	r5, r3
  401f5c:	d3b6      	bcc.n	401ecc <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  401f5e:	4b08      	ldr	r3, [pc, #32]	; (401f80 <xTaskGenericCreate+0x1ec>)
  401f60:	601c      	str	r4, [r3, #0]
  401f62:	e7b3      	b.n	401ecc <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401f64:	2001      	movs	r0, #1
  401f66:	e7d9      	b.n	401f1c <xTaskGenericCreate+0x188>
  401f68:	2001      	movs	r0, #1
	return xReturn;
  401f6a:	e7d7      	b.n	401f1c <xTaskGenericCreate+0x188>
  401f6c:	00401491 	.word	0x00401491
  401f70:	00403b09 	.word	0x00403b09
  401f74:	004011e9 	.word	0x004011e9
  401f78:	00401235 	.word	0x00401235
  401f7c:	20400ac8 	.word	0x20400ac8
  401f80:	20400a58 	.word	0x20400a58
  401f84:	20400a64 	.word	0x20400a64
  401f88:	004010e9 	.word	0x004010e9
  401f8c:	20400af4 	.word	0x20400af4
  401f90:	20400b10 	.word	0x20400b10
  401f94:	20400b3c 	.word	0x20400b3c
  401f98:	20400b28 	.word	0x20400b28
  401f9c:	20400a5c 	.word	0x20400a5c
  401fa0:	20400a60 	.word	0x20400a60
  401fa4:	20400ad4 	.word	0x20400ad4
  401fa8:	20400adc 	.word	0x20400adc
  401fac:	00401105 	.word	0x00401105
  401fb0:	00401281 	.word	0x00401281
  401fb4:	20400b24 	.word	0x20400b24
  401fb8:	e000ed04 	.word	0xe000ed04
  401fbc:	004014c1 	.word	0x004014c1
  401fc0:	004010ff 	.word	0x004010ff
  401fc4:	20400ae0 	.word	0x20400ae0

00401fc8 <vTaskStartScheduler>:
{
  401fc8:	b510      	push	{r4, lr}
  401fca:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401fcc:	2300      	movs	r3, #0
  401fce:	9303      	str	r3, [sp, #12]
  401fd0:	9302      	str	r3, [sp, #8]
  401fd2:	9301      	str	r3, [sp, #4]
  401fd4:	9300      	str	r3, [sp, #0]
  401fd6:	2282      	movs	r2, #130	; 0x82
  401fd8:	4916      	ldr	r1, [pc, #88]	; (402034 <vTaskStartScheduler+0x6c>)
  401fda:	4817      	ldr	r0, [pc, #92]	; (402038 <vTaskStartScheduler+0x70>)
  401fdc:	4c17      	ldr	r4, [pc, #92]	; (40203c <vTaskStartScheduler+0x74>)
  401fde:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401fe0:	2801      	cmp	r0, #1
  401fe2:	d00b      	beq.n	401ffc <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  401fe4:	bb20      	cbnz	r0, 402030 <vTaskStartScheduler+0x68>
  401fe6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fea:	b672      	cpsid	i
  401fec:	f383 8811 	msr	BASEPRI, r3
  401ff0:	f3bf 8f6f 	isb	sy
  401ff4:	f3bf 8f4f 	dsb	sy
  401ff8:	b662      	cpsie	i
  401ffa:	e7fe      	b.n	401ffa <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  401ffc:	4b10      	ldr	r3, [pc, #64]	; (402040 <vTaskStartScheduler+0x78>)
  401ffe:	4798      	blx	r3
	if( xReturn == pdPASS )
  402000:	2801      	cmp	r0, #1
  402002:	d1ef      	bne.n	401fe4 <vTaskStartScheduler+0x1c>
  402004:	f04f 0380 	mov.w	r3, #128	; 0x80
  402008:	b672      	cpsid	i
  40200a:	f383 8811 	msr	BASEPRI, r3
  40200e:	f3bf 8f6f 	isb	sy
  402012:	f3bf 8f4f 	dsb	sy
  402016:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402018:	f04f 32ff 	mov.w	r2, #4294967295
  40201c:	4b09      	ldr	r3, [pc, #36]	; (402044 <vTaskStartScheduler+0x7c>)
  40201e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402020:	2201      	movs	r2, #1
  402022:	4b09      	ldr	r3, [pc, #36]	; (402048 <vTaskStartScheduler+0x80>)
  402024:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402026:	2200      	movs	r2, #0
  402028:	4b08      	ldr	r3, [pc, #32]	; (40204c <vTaskStartScheduler+0x84>)
  40202a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40202c:	4b08      	ldr	r3, [pc, #32]	; (402050 <vTaskStartScheduler+0x88>)
  40202e:	4798      	blx	r3
}
  402030:	b004      	add	sp, #16
  402032:	bd10      	pop	{r4, pc}
  402034:	00406384 	.word	0x00406384
  402038:	004022dd 	.word	0x004022dd
  40203c:	00401d95 	.word	0x00401d95
  402040:	0040291d 	.word	0x0040291d
  402044:	20400b08 	.word	0x20400b08
  402048:	20400b24 	.word	0x20400b24
  40204c:	20400b50 	.word	0x20400b50
  402050:	00401369 	.word	0x00401369

00402054 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402054:	4a02      	ldr	r2, [pc, #8]	; (402060 <vTaskSuspendAll+0xc>)
  402056:	6813      	ldr	r3, [r2, #0]
  402058:	3301      	adds	r3, #1
  40205a:	6013      	str	r3, [r2, #0]
  40205c:	4770      	bx	lr
  40205e:	bf00      	nop
  402060:	20400ad0 	.word	0x20400ad0

00402064 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402064:	4b01      	ldr	r3, [pc, #4]	; (40206c <xTaskGetTickCount+0x8>)
  402066:	6818      	ldr	r0, [r3, #0]
}
  402068:	4770      	bx	lr
  40206a:	bf00      	nop
  40206c:	20400b50 	.word	0x20400b50

00402070 <xTaskIncrementTick>:
{
  402070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402074:	4b42      	ldr	r3, [pc, #264]	; (402180 <xTaskIncrementTick+0x110>)
  402076:	681b      	ldr	r3, [r3, #0]
  402078:	2b00      	cmp	r3, #0
  40207a:	d178      	bne.n	40216e <xTaskIncrementTick+0xfe>
		++xTickCount;
  40207c:	4b41      	ldr	r3, [pc, #260]	; (402184 <xTaskIncrementTick+0x114>)
  40207e:	681a      	ldr	r2, [r3, #0]
  402080:	3201      	adds	r2, #1
  402082:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402084:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  402086:	b9d6      	cbnz	r6, 4020be <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  402088:	4b3f      	ldr	r3, [pc, #252]	; (402188 <xTaskIncrementTick+0x118>)
  40208a:	681b      	ldr	r3, [r3, #0]
  40208c:	681b      	ldr	r3, [r3, #0]
  40208e:	b153      	cbz	r3, 4020a6 <xTaskIncrementTick+0x36>
  402090:	f04f 0380 	mov.w	r3, #128	; 0x80
  402094:	b672      	cpsid	i
  402096:	f383 8811 	msr	BASEPRI, r3
  40209a:	f3bf 8f6f 	isb	sy
  40209e:	f3bf 8f4f 	dsb	sy
  4020a2:	b662      	cpsie	i
  4020a4:	e7fe      	b.n	4020a4 <xTaskIncrementTick+0x34>
  4020a6:	4a38      	ldr	r2, [pc, #224]	; (402188 <xTaskIncrementTick+0x118>)
  4020a8:	6811      	ldr	r1, [r2, #0]
  4020aa:	4b38      	ldr	r3, [pc, #224]	; (40218c <xTaskIncrementTick+0x11c>)
  4020ac:	6818      	ldr	r0, [r3, #0]
  4020ae:	6010      	str	r0, [r2, #0]
  4020b0:	6019      	str	r1, [r3, #0]
  4020b2:	4a37      	ldr	r2, [pc, #220]	; (402190 <xTaskIncrementTick+0x120>)
  4020b4:	6813      	ldr	r3, [r2, #0]
  4020b6:	3301      	adds	r3, #1
  4020b8:	6013      	str	r3, [r2, #0]
  4020ba:	4b36      	ldr	r3, [pc, #216]	; (402194 <xTaskIncrementTick+0x124>)
  4020bc:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4020be:	4b36      	ldr	r3, [pc, #216]	; (402198 <xTaskIncrementTick+0x128>)
  4020c0:	681b      	ldr	r3, [r3, #0]
  4020c2:	429e      	cmp	r6, r3
  4020c4:	d218      	bcs.n	4020f8 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  4020c6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4020c8:	4b34      	ldr	r3, [pc, #208]	; (40219c <xTaskIncrementTick+0x12c>)
  4020ca:	681b      	ldr	r3, [r3, #0]
  4020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4020ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4020d2:	4a33      	ldr	r2, [pc, #204]	; (4021a0 <xTaskIncrementTick+0x130>)
  4020d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  4020d8:	2b02      	cmp	r3, #2
  4020da:	bf28      	it	cs
  4020dc:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4020de:	4b31      	ldr	r3, [pc, #196]	; (4021a4 <xTaskIncrementTick+0x134>)
  4020e0:	681b      	ldr	r3, [r3, #0]
  4020e2:	b90b      	cbnz	r3, 4020e8 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  4020e4:	4b30      	ldr	r3, [pc, #192]	; (4021a8 <xTaskIncrementTick+0x138>)
  4020e6:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  4020e8:	4b30      	ldr	r3, [pc, #192]	; (4021ac <xTaskIncrementTick+0x13c>)
  4020ea:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  4020ec:	2b00      	cmp	r3, #0
}
  4020ee:	bf0c      	ite	eq
  4020f0:	4620      	moveq	r0, r4
  4020f2:	2001      	movne	r0, #1
  4020f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4020f8:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4020fa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 402188 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4020fe:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4021b8 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  402102:	4f2b      	ldr	r7, [pc, #172]	; (4021b0 <xTaskIncrementTick+0x140>)
  402104:	e01f      	b.n	402146 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402106:	f04f 32ff 	mov.w	r2, #4294967295
  40210a:	4b23      	ldr	r3, [pc, #140]	; (402198 <xTaskIncrementTick+0x128>)
  40210c:	601a      	str	r2, [r3, #0]
						break;
  40210e:	e7db      	b.n	4020c8 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402110:	4a21      	ldr	r2, [pc, #132]	; (402198 <xTaskIncrementTick+0x128>)
  402112:	6013      	str	r3, [r2, #0]
							break;
  402114:	e7d8      	b.n	4020c8 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402116:	f105 0018 	add.w	r0, r5, #24
  40211a:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  40211c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40211e:	683a      	ldr	r2, [r7, #0]
  402120:	2301      	movs	r3, #1
  402122:	4083      	lsls	r3, r0
  402124:	4313      	orrs	r3, r2
  402126:	603b      	str	r3, [r7, #0]
  402128:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40212c:	4651      	mov	r1, sl
  40212e:	4b1c      	ldr	r3, [pc, #112]	; (4021a0 <xTaskIncrementTick+0x130>)
  402130:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402134:	4b1f      	ldr	r3, [pc, #124]	; (4021b4 <xTaskIncrementTick+0x144>)
  402136:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402138:	4b18      	ldr	r3, [pc, #96]	; (40219c <xTaskIncrementTick+0x12c>)
  40213a:	681b      	ldr	r3, [r3, #0]
  40213c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402140:	429a      	cmp	r2, r3
  402142:	bf28      	it	cs
  402144:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402146:	f8d9 3000 	ldr.w	r3, [r9]
  40214a:	681b      	ldr	r3, [r3, #0]
  40214c:	2b00      	cmp	r3, #0
  40214e:	d0da      	beq.n	402106 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402150:	f8d9 3000 	ldr.w	r3, [r9]
  402154:	68db      	ldr	r3, [r3, #12]
  402156:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402158:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40215a:	429e      	cmp	r6, r3
  40215c:	d3d8      	bcc.n	402110 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40215e:	f105 0a04 	add.w	sl, r5, #4
  402162:	4650      	mov	r0, sl
  402164:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402166:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402168:	2b00      	cmp	r3, #0
  40216a:	d1d4      	bne.n	402116 <xTaskIncrementTick+0xa6>
  40216c:	e7d6      	b.n	40211c <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  40216e:	4a0d      	ldr	r2, [pc, #52]	; (4021a4 <xTaskIncrementTick+0x134>)
  402170:	6813      	ldr	r3, [r2, #0]
  402172:	3301      	adds	r3, #1
  402174:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402176:	4b0c      	ldr	r3, [pc, #48]	; (4021a8 <xTaskIncrementTick+0x138>)
  402178:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40217a:	2400      	movs	r4, #0
  40217c:	e7b4      	b.n	4020e8 <xTaskIncrementTick+0x78>
  40217e:	bf00      	nop
  402180:	20400ad0 	.word	0x20400ad0
  402184:	20400b50 	.word	0x20400b50
  402188:	20400a5c 	.word	0x20400a5c
  40218c:	20400a60 	.word	0x20400a60
  402190:	20400b0c 	.word	0x20400b0c
  402194:	00401d11 	.word	0x00401d11
  402198:	20400b08 	.word	0x20400b08
  40219c:	20400a58 	.word	0x20400a58
  4021a0:	20400a64 	.word	0x20400a64
  4021a4:	20400acc 	.word	0x20400acc
  4021a8:	00402f5d 	.word	0x00402f5d
  4021ac:	20400b54 	.word	0x20400b54
  4021b0:	20400adc 	.word	0x20400adc
  4021b4:	00401105 	.word	0x00401105
  4021b8:	00401151 	.word	0x00401151

004021bc <xTaskResumeAll>:
{
  4021bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  4021c0:	4b38      	ldr	r3, [pc, #224]	; (4022a4 <xTaskResumeAll+0xe8>)
  4021c2:	681b      	ldr	r3, [r3, #0]
  4021c4:	b953      	cbnz	r3, 4021dc <xTaskResumeAll+0x20>
  4021c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021ca:	b672      	cpsid	i
  4021cc:	f383 8811 	msr	BASEPRI, r3
  4021d0:	f3bf 8f6f 	isb	sy
  4021d4:	f3bf 8f4f 	dsb	sy
  4021d8:	b662      	cpsie	i
  4021da:	e7fe      	b.n	4021da <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  4021dc:	4b32      	ldr	r3, [pc, #200]	; (4022a8 <xTaskResumeAll+0xec>)
  4021de:	4798      	blx	r3
		--uxSchedulerSuspended;
  4021e0:	4b30      	ldr	r3, [pc, #192]	; (4022a4 <xTaskResumeAll+0xe8>)
  4021e2:	681a      	ldr	r2, [r3, #0]
  4021e4:	3a01      	subs	r2, #1
  4021e6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4021e8:	681b      	ldr	r3, [r3, #0]
  4021ea:	2b00      	cmp	r3, #0
  4021ec:	d155      	bne.n	40229a <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4021ee:	4b2f      	ldr	r3, [pc, #188]	; (4022ac <xTaskResumeAll+0xf0>)
  4021f0:	681b      	ldr	r3, [r3, #0]
  4021f2:	2b00      	cmp	r3, #0
  4021f4:	d132      	bne.n	40225c <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  4021f6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4021f8:	4b2d      	ldr	r3, [pc, #180]	; (4022b0 <xTaskResumeAll+0xf4>)
  4021fa:	4798      	blx	r3
}
  4021fc:	4620      	mov	r0, r4
  4021fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402202:	68fb      	ldr	r3, [r7, #12]
  402204:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402206:	f104 0018 	add.w	r0, r4, #24
  40220a:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40220c:	f104 0804 	add.w	r8, r4, #4
  402210:	4640      	mov	r0, r8
  402212:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402214:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402216:	682a      	ldr	r2, [r5, #0]
  402218:	2301      	movs	r3, #1
  40221a:	4083      	lsls	r3, r0
  40221c:	4313      	orrs	r3, r2
  40221e:	602b      	str	r3, [r5, #0]
  402220:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402224:	4641      	mov	r1, r8
  402226:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40222a:	4b22      	ldr	r3, [pc, #136]	; (4022b4 <xTaskResumeAll+0xf8>)
  40222c:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40222e:	4b22      	ldr	r3, [pc, #136]	; (4022b8 <xTaskResumeAll+0xfc>)
  402230:	681b      	ldr	r3, [r3, #0]
  402232:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402236:	429a      	cmp	r2, r3
  402238:	d20c      	bcs.n	402254 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40223a:	683b      	ldr	r3, [r7, #0]
  40223c:	2b00      	cmp	r3, #0
  40223e:	d1e0      	bne.n	402202 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402240:	4b1e      	ldr	r3, [pc, #120]	; (4022bc <xTaskResumeAll+0x100>)
  402242:	681b      	ldr	r3, [r3, #0]
  402244:	b1db      	cbz	r3, 40227e <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402246:	4b1d      	ldr	r3, [pc, #116]	; (4022bc <xTaskResumeAll+0x100>)
  402248:	681b      	ldr	r3, [r3, #0]
  40224a:	b1c3      	cbz	r3, 40227e <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40224c:	4e1c      	ldr	r6, [pc, #112]	; (4022c0 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  40224e:	4d1d      	ldr	r5, [pc, #116]	; (4022c4 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402250:	4c1a      	ldr	r4, [pc, #104]	; (4022bc <xTaskResumeAll+0x100>)
  402252:	e00e      	b.n	402272 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402254:	2201      	movs	r2, #1
  402256:	4b1b      	ldr	r3, [pc, #108]	; (4022c4 <xTaskResumeAll+0x108>)
  402258:	601a      	str	r2, [r3, #0]
  40225a:	e7ee      	b.n	40223a <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40225c:	4f1a      	ldr	r7, [pc, #104]	; (4022c8 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40225e:	4e1b      	ldr	r6, [pc, #108]	; (4022cc <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402260:	4d1b      	ldr	r5, [pc, #108]	; (4022d0 <xTaskResumeAll+0x114>)
  402262:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4022d8 <xTaskResumeAll+0x11c>
  402266:	e7e8      	b.n	40223a <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402268:	6823      	ldr	r3, [r4, #0]
  40226a:	3b01      	subs	r3, #1
  40226c:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40226e:	6823      	ldr	r3, [r4, #0]
  402270:	b12b      	cbz	r3, 40227e <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402272:	47b0      	blx	r6
  402274:	2800      	cmp	r0, #0
  402276:	d0f7      	beq.n	402268 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  402278:	2301      	movs	r3, #1
  40227a:	602b      	str	r3, [r5, #0]
  40227c:	e7f4      	b.n	402268 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  40227e:	4b11      	ldr	r3, [pc, #68]	; (4022c4 <xTaskResumeAll+0x108>)
  402280:	681b      	ldr	r3, [r3, #0]
  402282:	2b01      	cmp	r3, #1
  402284:	d10b      	bne.n	40229e <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  402286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40228a:	4b12      	ldr	r3, [pc, #72]	; (4022d4 <xTaskResumeAll+0x118>)
  40228c:	601a      	str	r2, [r3, #0]
  40228e:	f3bf 8f4f 	dsb	sy
  402292:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  402296:	2401      	movs	r4, #1
  402298:	e7ae      	b.n	4021f8 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  40229a:	2400      	movs	r4, #0
  40229c:	e7ac      	b.n	4021f8 <xTaskResumeAll+0x3c>
  40229e:	2400      	movs	r4, #0
  4022a0:	e7aa      	b.n	4021f8 <xTaskResumeAll+0x3c>
  4022a2:	bf00      	nop
  4022a4:	20400ad0 	.word	0x20400ad0
  4022a8:	00401235 	.word	0x00401235
  4022ac:	20400ac8 	.word	0x20400ac8
  4022b0:	00401281 	.word	0x00401281
  4022b4:	00401105 	.word	0x00401105
  4022b8:	20400a58 	.word	0x20400a58
  4022bc:	20400acc 	.word	0x20400acc
  4022c0:	00402071 	.word	0x00402071
  4022c4:	20400b54 	.word	0x20400b54
  4022c8:	20400b10 	.word	0x20400b10
  4022cc:	00401151 	.word	0x00401151
  4022d0:	20400adc 	.word	0x20400adc
  4022d4:	e000ed04 	.word	0xe000ed04
  4022d8:	20400a64 	.word	0x20400a64

004022dc <prvIdleTask>:
{
  4022dc:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  4022de:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402368 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4022e2:	4e19      	ldr	r6, [pc, #100]	; (402348 <prvIdleTask+0x6c>)
				taskYIELD();
  4022e4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40236c <prvIdleTask+0x90>
  4022e8:	e02a      	b.n	402340 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4022ea:	4b18      	ldr	r3, [pc, #96]	; (40234c <prvIdleTask+0x70>)
  4022ec:	681b      	ldr	r3, [r3, #0]
  4022ee:	2b01      	cmp	r3, #1
  4022f0:	d81e      	bhi.n	402330 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4022f2:	682b      	ldr	r3, [r5, #0]
  4022f4:	2b00      	cmp	r3, #0
  4022f6:	d0f8      	beq.n	4022ea <prvIdleTask+0xe>
			vTaskSuspendAll();
  4022f8:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4022fa:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4022fc:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4022fe:	2c00      	cmp	r4, #0
  402300:	d0f7      	beq.n	4022f2 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  402302:	4b13      	ldr	r3, [pc, #76]	; (402350 <prvIdleTask+0x74>)
  402304:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402306:	68f3      	ldr	r3, [r6, #12]
  402308:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40230a:	1d20      	adds	r0, r4, #4
  40230c:	4b11      	ldr	r3, [pc, #68]	; (402354 <prvIdleTask+0x78>)
  40230e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402310:	4a11      	ldr	r2, [pc, #68]	; (402358 <prvIdleTask+0x7c>)
  402312:	6813      	ldr	r3, [r2, #0]
  402314:	3b01      	subs	r3, #1
  402316:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402318:	682b      	ldr	r3, [r5, #0]
  40231a:	3b01      	subs	r3, #1
  40231c:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  40231e:	4b0f      	ldr	r3, [pc, #60]	; (40235c <prvIdleTask+0x80>)
  402320:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  402322:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402324:	f8df a048 	ldr.w	sl, [pc, #72]	; 402370 <prvIdleTask+0x94>
  402328:	47d0      	blx	sl
		vPortFree( pxTCB );
  40232a:	4620      	mov	r0, r4
  40232c:	47d0      	blx	sl
  40232e:	e7e0      	b.n	4022f2 <prvIdleTask+0x16>
				taskYIELD();
  402330:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402334:	f8c9 3000 	str.w	r3, [r9]
  402338:	f3bf 8f4f 	dsb	sy
  40233c:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402340:	4d07      	ldr	r5, [pc, #28]	; (402360 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  402342:	4f08      	ldr	r7, [pc, #32]	; (402364 <prvIdleTask+0x88>)
  402344:	e7d5      	b.n	4022f2 <prvIdleTask+0x16>
  402346:	bf00      	nop
  402348:	20400b3c 	.word	0x20400b3c
  40234c:	20400a64 	.word	0x20400a64
  402350:	00401235 	.word	0x00401235
  402354:	00401151 	.word	0x00401151
  402358:	20400ac8 	.word	0x20400ac8
  40235c:	00401281 	.word	0x00401281
  402360:	20400ad8 	.word	0x20400ad8
  402364:	004021bd 	.word	0x004021bd
  402368:	00402055 	.word	0x00402055
  40236c:	e000ed04 	.word	0xe000ed04
  402370:	004014c1 	.word	0x004014c1

00402374 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402374:	4b2d      	ldr	r3, [pc, #180]	; (40242c <vTaskSwitchContext+0xb8>)
  402376:	681b      	ldr	r3, [r3, #0]
  402378:	2b00      	cmp	r3, #0
  40237a:	d12c      	bne.n	4023d6 <vTaskSwitchContext+0x62>
{
  40237c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40237e:	2200      	movs	r2, #0
  402380:	4b2b      	ldr	r3, [pc, #172]	; (402430 <vTaskSwitchContext+0xbc>)
  402382:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402384:	4b2b      	ldr	r3, [pc, #172]	; (402434 <vTaskSwitchContext+0xc0>)
  402386:	681b      	ldr	r3, [r3, #0]
  402388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40238a:	681a      	ldr	r2, [r3, #0]
  40238c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402390:	d103      	bne.n	40239a <vTaskSwitchContext+0x26>
  402392:	685a      	ldr	r2, [r3, #4]
  402394:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402398:	d021      	beq.n	4023de <vTaskSwitchContext+0x6a>
  40239a:	4b26      	ldr	r3, [pc, #152]	; (402434 <vTaskSwitchContext+0xc0>)
  40239c:	6818      	ldr	r0, [r3, #0]
  40239e:	6819      	ldr	r1, [r3, #0]
  4023a0:	3134      	adds	r1, #52	; 0x34
  4023a2:	4b25      	ldr	r3, [pc, #148]	; (402438 <vTaskSwitchContext+0xc4>)
  4023a4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4023a6:	4b25      	ldr	r3, [pc, #148]	; (40243c <vTaskSwitchContext+0xc8>)
  4023a8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4023aa:	fab3 f383 	clz	r3, r3
  4023ae:	b2db      	uxtb	r3, r3
  4023b0:	f1c3 031f 	rsb	r3, r3, #31
  4023b4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4023b8:	4a21      	ldr	r2, [pc, #132]	; (402440 <vTaskSwitchContext+0xcc>)
  4023ba:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4023be:	b9ba      	cbnz	r2, 4023f0 <vTaskSwitchContext+0x7c>
	__asm volatile
  4023c0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023c4:	b672      	cpsid	i
  4023c6:	f383 8811 	msr	BASEPRI, r3
  4023ca:	f3bf 8f6f 	isb	sy
  4023ce:	f3bf 8f4f 	dsb	sy
  4023d2:	b662      	cpsie	i
  4023d4:	e7fe      	b.n	4023d4 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4023d6:	2201      	movs	r2, #1
  4023d8:	4b15      	ldr	r3, [pc, #84]	; (402430 <vTaskSwitchContext+0xbc>)
  4023da:	601a      	str	r2, [r3, #0]
  4023dc:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4023de:	689a      	ldr	r2, [r3, #8]
  4023e0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4023e4:	d1d9      	bne.n	40239a <vTaskSwitchContext+0x26>
  4023e6:	68db      	ldr	r3, [r3, #12]
  4023e8:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4023ec:	d1d5      	bne.n	40239a <vTaskSwitchContext+0x26>
  4023ee:	e7da      	b.n	4023a6 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4023f0:	4a13      	ldr	r2, [pc, #76]	; (402440 <vTaskSwitchContext+0xcc>)
  4023f2:	0099      	lsls	r1, r3, #2
  4023f4:	18c8      	adds	r0, r1, r3
  4023f6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4023fa:	6844      	ldr	r4, [r0, #4]
  4023fc:	6864      	ldr	r4, [r4, #4]
  4023fe:	6044      	str	r4, [r0, #4]
  402400:	4419      	add	r1, r3
  402402:	4602      	mov	r2, r0
  402404:	3208      	adds	r2, #8
  402406:	4294      	cmp	r4, r2
  402408:	d009      	beq.n	40241e <vTaskSwitchContext+0xaa>
  40240a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40240e:	4a0c      	ldr	r2, [pc, #48]	; (402440 <vTaskSwitchContext+0xcc>)
  402410:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402414:	685b      	ldr	r3, [r3, #4]
  402416:	68da      	ldr	r2, [r3, #12]
  402418:	4b06      	ldr	r3, [pc, #24]	; (402434 <vTaskSwitchContext+0xc0>)
  40241a:	601a      	str	r2, [r3, #0]
  40241c:	bd10      	pop	{r4, pc}
  40241e:	6860      	ldr	r0, [r4, #4]
  402420:	4a07      	ldr	r2, [pc, #28]	; (402440 <vTaskSwitchContext+0xcc>)
  402422:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402426:	6050      	str	r0, [r2, #4]
  402428:	e7ef      	b.n	40240a <vTaskSwitchContext+0x96>
  40242a:	bf00      	nop
  40242c:	20400ad0 	.word	0x20400ad0
  402430:	20400b54 	.word	0x20400b54
  402434:	20400a58 	.word	0x20400a58
  402438:	00402f45 	.word	0x00402f45
  40243c:	20400adc 	.word	0x20400adc
  402440:	20400a64 	.word	0x20400a64

00402444 <vTaskPlaceOnEventList>:
{
  402444:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  402446:	b1e0      	cbz	r0, 402482 <vTaskPlaceOnEventList+0x3e>
  402448:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40244a:	4d17      	ldr	r5, [pc, #92]	; (4024a8 <vTaskPlaceOnEventList+0x64>)
  40244c:	6829      	ldr	r1, [r5, #0]
  40244e:	3118      	adds	r1, #24
  402450:	4b16      	ldr	r3, [pc, #88]	; (4024ac <vTaskPlaceOnEventList+0x68>)
  402452:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402454:	6828      	ldr	r0, [r5, #0]
  402456:	3004      	adds	r0, #4
  402458:	4b15      	ldr	r3, [pc, #84]	; (4024b0 <vTaskPlaceOnEventList+0x6c>)
  40245a:	4798      	blx	r3
  40245c:	b940      	cbnz	r0, 402470 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40245e:	682a      	ldr	r2, [r5, #0]
  402460:	4914      	ldr	r1, [pc, #80]	; (4024b4 <vTaskPlaceOnEventList+0x70>)
  402462:	680b      	ldr	r3, [r1, #0]
  402464:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402466:	2201      	movs	r2, #1
  402468:	4082      	lsls	r2, r0
  40246a:	ea23 0302 	bic.w	r3, r3, r2
  40246e:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402470:	f1b4 3fff 	cmp.w	r4, #4294967295
  402474:	d010      	beq.n	402498 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402476:	4b10      	ldr	r3, [pc, #64]	; (4024b8 <vTaskPlaceOnEventList+0x74>)
  402478:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40247a:	4420      	add	r0, r4
  40247c:	4b0f      	ldr	r3, [pc, #60]	; (4024bc <vTaskPlaceOnEventList+0x78>)
  40247e:	4798      	blx	r3
  402480:	bd38      	pop	{r3, r4, r5, pc}
  402482:	f04f 0380 	mov.w	r3, #128	; 0x80
  402486:	b672      	cpsid	i
  402488:	f383 8811 	msr	BASEPRI, r3
  40248c:	f3bf 8f6f 	isb	sy
  402490:	f3bf 8f4f 	dsb	sy
  402494:	b662      	cpsie	i
  402496:	e7fe      	b.n	402496 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402498:	4b03      	ldr	r3, [pc, #12]	; (4024a8 <vTaskPlaceOnEventList+0x64>)
  40249a:	6819      	ldr	r1, [r3, #0]
  40249c:	3104      	adds	r1, #4
  40249e:	4808      	ldr	r0, [pc, #32]	; (4024c0 <vTaskPlaceOnEventList+0x7c>)
  4024a0:	4b08      	ldr	r3, [pc, #32]	; (4024c4 <vTaskPlaceOnEventList+0x80>)
  4024a2:	4798      	blx	r3
  4024a4:	bd38      	pop	{r3, r4, r5, pc}
  4024a6:	bf00      	nop
  4024a8:	20400a58 	.word	0x20400a58
  4024ac:	0040111d 	.word	0x0040111d
  4024b0:	00401151 	.word	0x00401151
  4024b4:	20400adc 	.word	0x20400adc
  4024b8:	20400b50 	.word	0x20400b50
  4024bc:	00401d3d 	.word	0x00401d3d
  4024c0:	20400b28 	.word	0x20400b28
  4024c4:	00401105 	.word	0x00401105

004024c8 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  4024c8:	b1e8      	cbz	r0, 402506 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  4024ca:	b570      	push	{r4, r5, r6, lr}
  4024cc:	4615      	mov	r5, r2
  4024ce:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4024d0:	4e16      	ldr	r6, [pc, #88]	; (40252c <vTaskPlaceOnEventListRestricted+0x64>)
  4024d2:	6831      	ldr	r1, [r6, #0]
  4024d4:	3118      	adds	r1, #24
  4024d6:	4b16      	ldr	r3, [pc, #88]	; (402530 <vTaskPlaceOnEventListRestricted+0x68>)
  4024d8:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4024da:	6830      	ldr	r0, [r6, #0]
  4024dc:	3004      	adds	r0, #4
  4024de:	4b15      	ldr	r3, [pc, #84]	; (402534 <vTaskPlaceOnEventListRestricted+0x6c>)
  4024e0:	4798      	blx	r3
  4024e2:	b940      	cbnz	r0, 4024f6 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4024e4:	6832      	ldr	r2, [r6, #0]
  4024e6:	4914      	ldr	r1, [pc, #80]	; (402538 <vTaskPlaceOnEventListRestricted+0x70>)
  4024e8:	680b      	ldr	r3, [r1, #0]
  4024ea:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4024ec:	2201      	movs	r2, #1
  4024ee:	4082      	lsls	r2, r0
  4024f0:	ea23 0302 	bic.w	r3, r3, r2
  4024f4:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4024f6:	2d01      	cmp	r5, #1
  4024f8:	d010      	beq.n	40251c <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4024fa:	4b10      	ldr	r3, [pc, #64]	; (40253c <vTaskPlaceOnEventListRestricted+0x74>)
  4024fc:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4024fe:	4420      	add	r0, r4
  402500:	4b0f      	ldr	r3, [pc, #60]	; (402540 <vTaskPlaceOnEventListRestricted+0x78>)
  402502:	4798      	blx	r3
  402504:	bd70      	pop	{r4, r5, r6, pc}
  402506:	f04f 0380 	mov.w	r3, #128	; 0x80
  40250a:	b672      	cpsid	i
  40250c:	f383 8811 	msr	BASEPRI, r3
  402510:	f3bf 8f6f 	isb	sy
  402514:	f3bf 8f4f 	dsb	sy
  402518:	b662      	cpsie	i
  40251a:	e7fe      	b.n	40251a <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40251c:	4b03      	ldr	r3, [pc, #12]	; (40252c <vTaskPlaceOnEventListRestricted+0x64>)
  40251e:	6819      	ldr	r1, [r3, #0]
  402520:	3104      	adds	r1, #4
  402522:	4808      	ldr	r0, [pc, #32]	; (402544 <vTaskPlaceOnEventListRestricted+0x7c>)
  402524:	4b02      	ldr	r3, [pc, #8]	; (402530 <vTaskPlaceOnEventListRestricted+0x68>)
  402526:	4798      	blx	r3
  402528:	bd70      	pop	{r4, r5, r6, pc}
  40252a:	bf00      	nop
  40252c:	20400a58 	.word	0x20400a58
  402530:	00401105 	.word	0x00401105
  402534:	00401151 	.word	0x00401151
  402538:	20400adc 	.word	0x20400adc
  40253c:	20400b50 	.word	0x20400b50
  402540:	00401d3d 	.word	0x00401d3d
  402544:	20400b28 	.word	0x20400b28

00402548 <xTaskRemoveFromEventList>:
{
  402548:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40254a:	68c3      	ldr	r3, [r0, #12]
  40254c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40254e:	b324      	cbz	r4, 40259a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402550:	f104 0518 	add.w	r5, r4, #24
  402554:	4628      	mov	r0, r5
  402556:	4b1a      	ldr	r3, [pc, #104]	; (4025c0 <xTaskRemoveFromEventList+0x78>)
  402558:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40255a:	4b1a      	ldr	r3, [pc, #104]	; (4025c4 <xTaskRemoveFromEventList+0x7c>)
  40255c:	681b      	ldr	r3, [r3, #0]
  40255e:	bb3b      	cbnz	r3, 4025b0 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402560:	1d25      	adds	r5, r4, #4
  402562:	4628      	mov	r0, r5
  402564:	4b16      	ldr	r3, [pc, #88]	; (4025c0 <xTaskRemoveFromEventList+0x78>)
  402566:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402568:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40256a:	4a17      	ldr	r2, [pc, #92]	; (4025c8 <xTaskRemoveFromEventList+0x80>)
  40256c:	6811      	ldr	r1, [r2, #0]
  40256e:	2301      	movs	r3, #1
  402570:	4083      	lsls	r3, r0
  402572:	430b      	orrs	r3, r1
  402574:	6013      	str	r3, [r2, #0]
  402576:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40257a:	4629      	mov	r1, r5
  40257c:	4b13      	ldr	r3, [pc, #76]	; (4025cc <xTaskRemoveFromEventList+0x84>)
  40257e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402582:	4b13      	ldr	r3, [pc, #76]	; (4025d0 <xTaskRemoveFromEventList+0x88>)
  402584:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402586:	4b13      	ldr	r3, [pc, #76]	; (4025d4 <xTaskRemoveFromEventList+0x8c>)
  402588:	681b      	ldr	r3, [r3, #0]
  40258a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40258e:	429a      	cmp	r2, r3
  402590:	d913      	bls.n	4025ba <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402592:	2001      	movs	r0, #1
  402594:	4b10      	ldr	r3, [pc, #64]	; (4025d8 <xTaskRemoveFromEventList+0x90>)
  402596:	6018      	str	r0, [r3, #0]
  402598:	bd38      	pop	{r3, r4, r5, pc}
  40259a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40259e:	b672      	cpsid	i
  4025a0:	f383 8811 	msr	BASEPRI, r3
  4025a4:	f3bf 8f6f 	isb	sy
  4025a8:	f3bf 8f4f 	dsb	sy
  4025ac:	b662      	cpsie	i
  4025ae:	e7fe      	b.n	4025ae <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4025b0:	4629      	mov	r1, r5
  4025b2:	480a      	ldr	r0, [pc, #40]	; (4025dc <xTaskRemoveFromEventList+0x94>)
  4025b4:	4b06      	ldr	r3, [pc, #24]	; (4025d0 <xTaskRemoveFromEventList+0x88>)
  4025b6:	4798      	blx	r3
  4025b8:	e7e5      	b.n	402586 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4025ba:	2000      	movs	r0, #0
}
  4025bc:	bd38      	pop	{r3, r4, r5, pc}
  4025be:	bf00      	nop
  4025c0:	00401151 	.word	0x00401151
  4025c4:	20400ad0 	.word	0x20400ad0
  4025c8:	20400adc 	.word	0x20400adc
  4025cc:	20400a64 	.word	0x20400a64
  4025d0:	00401105 	.word	0x00401105
  4025d4:	20400a58 	.word	0x20400a58
  4025d8:	20400b54 	.word	0x20400b54
  4025dc:	20400b10 	.word	0x20400b10

004025e0 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  4025e0:	b130      	cbz	r0, 4025f0 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4025e2:	4a09      	ldr	r2, [pc, #36]	; (402608 <vTaskSetTimeOutState+0x28>)
  4025e4:	6812      	ldr	r2, [r2, #0]
  4025e6:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4025e8:	4a08      	ldr	r2, [pc, #32]	; (40260c <vTaskSetTimeOutState+0x2c>)
  4025ea:	6812      	ldr	r2, [r2, #0]
  4025ec:	6042      	str	r2, [r0, #4]
  4025ee:	4770      	bx	lr
  4025f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025f4:	b672      	cpsid	i
  4025f6:	f383 8811 	msr	BASEPRI, r3
  4025fa:	f3bf 8f6f 	isb	sy
  4025fe:	f3bf 8f4f 	dsb	sy
  402602:	b662      	cpsie	i
  402604:	e7fe      	b.n	402604 <vTaskSetTimeOutState+0x24>
  402606:	bf00      	nop
  402608:	20400b0c 	.word	0x20400b0c
  40260c:	20400b50 	.word	0x20400b50

00402610 <xTaskCheckForTimeOut>:
{
  402610:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402612:	b1c0      	cbz	r0, 402646 <xTaskCheckForTimeOut+0x36>
  402614:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402616:	b309      	cbz	r1, 40265c <xTaskCheckForTimeOut+0x4c>
  402618:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40261a:	4b1d      	ldr	r3, [pc, #116]	; (402690 <xTaskCheckForTimeOut+0x80>)
  40261c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  40261e:	4b1d      	ldr	r3, [pc, #116]	; (402694 <xTaskCheckForTimeOut+0x84>)
  402620:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402622:	682b      	ldr	r3, [r5, #0]
  402624:	f1b3 3fff 	cmp.w	r3, #4294967295
  402628:	d02e      	beq.n	402688 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40262a:	491b      	ldr	r1, [pc, #108]	; (402698 <xTaskCheckForTimeOut+0x88>)
  40262c:	6809      	ldr	r1, [r1, #0]
  40262e:	6820      	ldr	r0, [r4, #0]
  402630:	4288      	cmp	r0, r1
  402632:	d002      	beq.n	40263a <xTaskCheckForTimeOut+0x2a>
  402634:	6861      	ldr	r1, [r4, #4]
  402636:	428a      	cmp	r2, r1
  402638:	d228      	bcs.n	40268c <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  40263a:	6861      	ldr	r1, [r4, #4]
  40263c:	1a50      	subs	r0, r2, r1
  40263e:	4283      	cmp	r3, r0
  402640:	d817      	bhi.n	402672 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402642:	2401      	movs	r4, #1
  402644:	e01c      	b.n	402680 <xTaskCheckForTimeOut+0x70>
  402646:	f04f 0380 	mov.w	r3, #128	; 0x80
  40264a:	b672      	cpsid	i
  40264c:	f383 8811 	msr	BASEPRI, r3
  402650:	f3bf 8f6f 	isb	sy
  402654:	f3bf 8f4f 	dsb	sy
  402658:	b662      	cpsie	i
  40265a:	e7fe      	b.n	40265a <xTaskCheckForTimeOut+0x4a>
  40265c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402660:	b672      	cpsid	i
  402662:	f383 8811 	msr	BASEPRI, r3
  402666:	f3bf 8f6f 	isb	sy
  40266a:	f3bf 8f4f 	dsb	sy
  40266e:	b662      	cpsie	i
  402670:	e7fe      	b.n	402670 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402672:	1a9b      	subs	r3, r3, r2
  402674:	440b      	add	r3, r1
  402676:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402678:	4620      	mov	r0, r4
  40267a:	4b08      	ldr	r3, [pc, #32]	; (40269c <xTaskCheckForTimeOut+0x8c>)
  40267c:	4798      	blx	r3
			xReturn = pdFALSE;
  40267e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402680:	4b07      	ldr	r3, [pc, #28]	; (4026a0 <xTaskCheckForTimeOut+0x90>)
  402682:	4798      	blx	r3
}
  402684:	4620      	mov	r0, r4
  402686:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402688:	2400      	movs	r4, #0
  40268a:	e7f9      	b.n	402680 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  40268c:	2401      	movs	r4, #1
  40268e:	e7f7      	b.n	402680 <xTaskCheckForTimeOut+0x70>
  402690:	00401235 	.word	0x00401235
  402694:	20400b50 	.word	0x20400b50
  402698:	20400b0c 	.word	0x20400b0c
  40269c:	004025e1 	.word	0x004025e1
  4026a0:	00401281 	.word	0x00401281

004026a4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4026a4:	2201      	movs	r2, #1
  4026a6:	4b01      	ldr	r3, [pc, #4]	; (4026ac <vTaskMissedYield+0x8>)
  4026a8:	601a      	str	r2, [r3, #0]
  4026aa:	4770      	bx	lr
  4026ac:	20400b54 	.word	0x20400b54

004026b0 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4026b0:	4b05      	ldr	r3, [pc, #20]	; (4026c8 <xTaskGetSchedulerState+0x18>)
  4026b2:	681b      	ldr	r3, [r3, #0]
  4026b4:	b133      	cbz	r3, 4026c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4026b6:	4b05      	ldr	r3, [pc, #20]	; (4026cc <xTaskGetSchedulerState+0x1c>)
  4026b8:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4026ba:	2b00      	cmp	r3, #0
  4026bc:	bf0c      	ite	eq
  4026be:	2002      	moveq	r0, #2
  4026c0:	2000      	movne	r0, #0
  4026c2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4026c4:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4026c6:	4770      	bx	lr
  4026c8:	20400b24 	.word	0x20400b24
  4026cc:	20400ad0 	.word	0x20400ad0

004026d0 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4026d0:	2800      	cmp	r0, #0
  4026d2:	d044      	beq.n	40275e <vTaskPriorityInherit+0x8e>
	{
  4026d4:	b538      	push	{r3, r4, r5, lr}
  4026d6:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4026d8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4026da:	4921      	ldr	r1, [pc, #132]	; (402760 <vTaskPriorityInherit+0x90>)
  4026dc:	6809      	ldr	r1, [r1, #0]
  4026de:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4026e0:	428a      	cmp	r2, r1
  4026e2:	d214      	bcs.n	40270e <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4026e4:	6981      	ldr	r1, [r0, #24]
  4026e6:	2900      	cmp	r1, #0
  4026e8:	db05      	blt.n	4026f6 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4026ea:	491d      	ldr	r1, [pc, #116]	; (402760 <vTaskPriorityInherit+0x90>)
  4026ec:	6809      	ldr	r1, [r1, #0]
  4026ee:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4026f0:	f1c1 0105 	rsb	r1, r1, #5
  4026f4:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4026f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4026fa:	491a      	ldr	r1, [pc, #104]	; (402764 <vTaskPriorityInherit+0x94>)
  4026fc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402700:	6961      	ldr	r1, [r4, #20]
  402702:	4291      	cmp	r1, r2
  402704:	d004      	beq.n	402710 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402706:	4a16      	ldr	r2, [pc, #88]	; (402760 <vTaskPriorityInherit+0x90>)
  402708:	6812      	ldr	r2, [r2, #0]
  40270a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  40270c:	62e2      	str	r2, [r4, #44]	; 0x2c
  40270e:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402710:	1d25      	adds	r5, r4, #4
  402712:	4628      	mov	r0, r5
  402714:	4b14      	ldr	r3, [pc, #80]	; (402768 <vTaskPriorityInherit+0x98>)
  402716:	4798      	blx	r3
  402718:	b970      	cbnz	r0, 402738 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40271a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40271c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402720:	4a10      	ldr	r2, [pc, #64]	; (402764 <vTaskPriorityInherit+0x94>)
  402722:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402726:	b93a      	cbnz	r2, 402738 <vTaskPriorityInherit+0x68>
  402728:	4810      	ldr	r0, [pc, #64]	; (40276c <vTaskPriorityInherit+0x9c>)
  40272a:	6802      	ldr	r2, [r0, #0]
  40272c:	2101      	movs	r1, #1
  40272e:	fa01 f303 	lsl.w	r3, r1, r3
  402732:	ea22 0303 	bic.w	r3, r2, r3
  402736:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402738:	4b09      	ldr	r3, [pc, #36]	; (402760 <vTaskPriorityInherit+0x90>)
  40273a:	681b      	ldr	r3, [r3, #0]
  40273c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  40273e:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402740:	4a0a      	ldr	r2, [pc, #40]	; (40276c <vTaskPriorityInherit+0x9c>)
  402742:	6811      	ldr	r1, [r2, #0]
  402744:	2301      	movs	r3, #1
  402746:	4083      	lsls	r3, r0
  402748:	430b      	orrs	r3, r1
  40274a:	6013      	str	r3, [r2, #0]
  40274c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402750:	4629      	mov	r1, r5
  402752:	4b04      	ldr	r3, [pc, #16]	; (402764 <vTaskPriorityInherit+0x94>)
  402754:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402758:	4b05      	ldr	r3, [pc, #20]	; (402770 <vTaskPriorityInherit+0xa0>)
  40275a:	4798      	blx	r3
  40275c:	bd38      	pop	{r3, r4, r5, pc}
  40275e:	4770      	bx	lr
  402760:	20400a58 	.word	0x20400a58
  402764:	20400a64 	.word	0x20400a64
  402768:	00401151 	.word	0x00401151
  40276c:	20400adc 	.word	0x20400adc
  402770:	00401105 	.word	0x00401105

00402774 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402774:	2800      	cmp	r0, #0
  402776:	d04d      	beq.n	402814 <xTaskPriorityDisinherit+0xa0>
	{
  402778:	b538      	push	{r3, r4, r5, lr}
  40277a:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  40277c:	4a27      	ldr	r2, [pc, #156]	; (40281c <xTaskPriorityDisinherit+0xa8>)
  40277e:	6812      	ldr	r2, [r2, #0]
  402780:	4290      	cmp	r0, r2
  402782:	d00a      	beq.n	40279a <xTaskPriorityDisinherit+0x26>
  402784:	f04f 0380 	mov.w	r3, #128	; 0x80
  402788:	b672      	cpsid	i
  40278a:	f383 8811 	msr	BASEPRI, r3
  40278e:	f3bf 8f6f 	isb	sy
  402792:	f3bf 8f4f 	dsb	sy
  402796:	b662      	cpsie	i
  402798:	e7fe      	b.n	402798 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  40279a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40279c:	b952      	cbnz	r2, 4027b4 <xTaskPriorityDisinherit+0x40>
  40279e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027a2:	b672      	cpsid	i
  4027a4:	f383 8811 	msr	BASEPRI, r3
  4027a8:	f3bf 8f6f 	isb	sy
  4027ac:	f3bf 8f4f 	dsb	sy
  4027b0:	b662      	cpsie	i
  4027b2:	e7fe      	b.n	4027b2 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4027b4:	3a01      	subs	r2, #1
  4027b6:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4027b8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4027ba:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4027bc:	4288      	cmp	r0, r1
  4027be:	d02b      	beq.n	402818 <xTaskPriorityDisinherit+0xa4>
  4027c0:	bb52      	cbnz	r2, 402818 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4027c2:	1d25      	adds	r5, r4, #4
  4027c4:	4628      	mov	r0, r5
  4027c6:	4b16      	ldr	r3, [pc, #88]	; (402820 <xTaskPriorityDisinherit+0xac>)
  4027c8:	4798      	blx	r3
  4027ca:	b968      	cbnz	r0, 4027e8 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4027cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4027ce:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4027d2:	4b14      	ldr	r3, [pc, #80]	; (402824 <xTaskPriorityDisinherit+0xb0>)
  4027d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4027d8:	b933      	cbnz	r3, 4027e8 <xTaskPriorityDisinherit+0x74>
  4027da:	4813      	ldr	r0, [pc, #76]	; (402828 <xTaskPriorityDisinherit+0xb4>)
  4027dc:	6803      	ldr	r3, [r0, #0]
  4027de:	2201      	movs	r2, #1
  4027e0:	408a      	lsls	r2, r1
  4027e2:	ea23 0302 	bic.w	r3, r3, r2
  4027e6:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4027e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4027ea:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4027ec:	f1c0 0305 	rsb	r3, r0, #5
  4027f0:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4027f2:	4a0d      	ldr	r2, [pc, #52]	; (402828 <xTaskPriorityDisinherit+0xb4>)
  4027f4:	6811      	ldr	r1, [r2, #0]
  4027f6:	2401      	movs	r4, #1
  4027f8:	fa04 f300 	lsl.w	r3, r4, r0
  4027fc:	430b      	orrs	r3, r1
  4027fe:	6013      	str	r3, [r2, #0]
  402800:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402804:	4629      	mov	r1, r5
  402806:	4b07      	ldr	r3, [pc, #28]	; (402824 <xTaskPriorityDisinherit+0xb0>)
  402808:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40280c:	4b07      	ldr	r3, [pc, #28]	; (40282c <xTaskPriorityDisinherit+0xb8>)
  40280e:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402810:	4620      	mov	r0, r4
  402812:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402814:	2000      	movs	r0, #0
  402816:	4770      	bx	lr
  402818:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40281a:	bd38      	pop	{r3, r4, r5, pc}
  40281c:	20400a58 	.word	0x20400a58
  402820:	00401151 	.word	0x00401151
  402824:	20400a64 	.word	0x20400a64
  402828:	20400adc 	.word	0x20400adc
  40282c:	00401105 	.word	0x00401105

00402830 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402830:	4b05      	ldr	r3, [pc, #20]	; (402848 <pvTaskIncrementMutexHeldCount+0x18>)
  402832:	681b      	ldr	r3, [r3, #0]
  402834:	b123      	cbz	r3, 402840 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402836:	4b04      	ldr	r3, [pc, #16]	; (402848 <pvTaskIncrementMutexHeldCount+0x18>)
  402838:	681a      	ldr	r2, [r3, #0]
  40283a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  40283c:	3301      	adds	r3, #1
  40283e:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402840:	4b01      	ldr	r3, [pc, #4]	; (402848 <pvTaskIncrementMutexHeldCount+0x18>)
  402842:	6818      	ldr	r0, [r3, #0]
	}
  402844:	4770      	bx	lr
  402846:	bf00      	nop
  402848:	20400a58 	.word	0x20400a58

0040284c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  40284c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40284e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402850:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402852:	4291      	cmp	r1, r2
  402854:	d80c      	bhi.n	402870 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402856:	1ad2      	subs	r2, r2, r3
  402858:	6983      	ldr	r3, [r0, #24]
  40285a:	429a      	cmp	r2, r3
  40285c:	d301      	bcc.n	402862 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40285e:	2001      	movs	r0, #1
  402860:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402862:	1d01      	adds	r1, r0, #4
  402864:	4b09      	ldr	r3, [pc, #36]	; (40288c <prvInsertTimerInActiveList+0x40>)
  402866:	6818      	ldr	r0, [r3, #0]
  402868:	4b09      	ldr	r3, [pc, #36]	; (402890 <prvInsertTimerInActiveList+0x44>)
  40286a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40286c:	2000      	movs	r0, #0
  40286e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402870:	429a      	cmp	r2, r3
  402872:	d203      	bcs.n	40287c <prvInsertTimerInActiveList+0x30>
  402874:	4299      	cmp	r1, r3
  402876:	d301      	bcc.n	40287c <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402878:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40287a:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40287c:	1d01      	adds	r1, r0, #4
  40287e:	4b05      	ldr	r3, [pc, #20]	; (402894 <prvInsertTimerInActiveList+0x48>)
  402880:	6818      	ldr	r0, [r3, #0]
  402882:	4b03      	ldr	r3, [pc, #12]	; (402890 <prvInsertTimerInActiveList+0x44>)
  402884:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402886:	2000      	movs	r0, #0
  402888:	bd08      	pop	{r3, pc}
  40288a:	bf00      	nop
  40288c:	20400b5c 	.word	0x20400b5c
  402890:	0040111d 	.word	0x0040111d
  402894:	20400b58 	.word	0x20400b58

00402898 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402898:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40289a:	4b15      	ldr	r3, [pc, #84]	; (4028f0 <prvCheckForValidListAndQueue+0x58>)
  40289c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40289e:	4b15      	ldr	r3, [pc, #84]	; (4028f4 <prvCheckForValidListAndQueue+0x5c>)
  4028a0:	681b      	ldr	r3, [r3, #0]
  4028a2:	b113      	cbz	r3, 4028aa <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4028a4:	4b14      	ldr	r3, [pc, #80]	; (4028f8 <prvCheckForValidListAndQueue+0x60>)
  4028a6:	4798      	blx	r3
  4028a8:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4028aa:	4d14      	ldr	r5, [pc, #80]	; (4028fc <prvCheckForValidListAndQueue+0x64>)
  4028ac:	4628      	mov	r0, r5
  4028ae:	4e14      	ldr	r6, [pc, #80]	; (402900 <prvCheckForValidListAndQueue+0x68>)
  4028b0:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4028b2:	4c14      	ldr	r4, [pc, #80]	; (402904 <prvCheckForValidListAndQueue+0x6c>)
  4028b4:	4620      	mov	r0, r4
  4028b6:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4028b8:	4b13      	ldr	r3, [pc, #76]	; (402908 <prvCheckForValidListAndQueue+0x70>)
  4028ba:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4028bc:	4b13      	ldr	r3, [pc, #76]	; (40290c <prvCheckForValidListAndQueue+0x74>)
  4028be:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4028c0:	2200      	movs	r2, #0
  4028c2:	2110      	movs	r1, #16
  4028c4:	2005      	movs	r0, #5
  4028c6:	4b12      	ldr	r3, [pc, #72]	; (402910 <prvCheckForValidListAndQueue+0x78>)
  4028c8:	4798      	blx	r3
  4028ca:	4b0a      	ldr	r3, [pc, #40]	; (4028f4 <prvCheckForValidListAndQueue+0x5c>)
  4028cc:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  4028ce:	b118      	cbz	r0, 4028d8 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4028d0:	4910      	ldr	r1, [pc, #64]	; (402914 <prvCheckForValidListAndQueue+0x7c>)
  4028d2:	4b11      	ldr	r3, [pc, #68]	; (402918 <prvCheckForValidListAndQueue+0x80>)
  4028d4:	4798      	blx	r3
  4028d6:	e7e5      	b.n	4028a4 <prvCheckForValidListAndQueue+0xc>
  4028d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028dc:	b672      	cpsid	i
  4028de:	f383 8811 	msr	BASEPRI, r3
  4028e2:	f3bf 8f6f 	isb	sy
  4028e6:	f3bf 8f4f 	dsb	sy
  4028ea:	b662      	cpsie	i
  4028ec:	e7fe      	b.n	4028ec <prvCheckForValidListAndQueue+0x54>
  4028ee:	bf00      	nop
  4028f0:	00401235 	.word	0x00401235
  4028f4:	20400b8c 	.word	0x20400b8c
  4028f8:	00401281 	.word	0x00401281
  4028fc:	20400b60 	.word	0x20400b60
  402900:	004010e9 	.word	0x004010e9
  402904:	20400b74 	.word	0x20400b74
  402908:	20400b58 	.word	0x20400b58
  40290c:	20400b5c 	.word	0x20400b5c
  402910:	00401755 	.word	0x00401755
  402914:	0040638c 	.word	0x0040638c
  402918:	00401c85 	.word	0x00401c85

0040291c <xTimerCreateTimerTask>:
{
  40291c:	b510      	push	{r4, lr}
  40291e:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402920:	4b0f      	ldr	r3, [pc, #60]	; (402960 <xTimerCreateTimerTask+0x44>)
  402922:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402924:	4b0f      	ldr	r3, [pc, #60]	; (402964 <xTimerCreateTimerTask+0x48>)
  402926:	681b      	ldr	r3, [r3, #0]
  402928:	b173      	cbz	r3, 402948 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40292a:	2300      	movs	r3, #0
  40292c:	9303      	str	r3, [sp, #12]
  40292e:	9302      	str	r3, [sp, #8]
  402930:	9301      	str	r3, [sp, #4]
  402932:	2204      	movs	r2, #4
  402934:	9200      	str	r2, [sp, #0]
  402936:	f44f 7282 	mov.w	r2, #260	; 0x104
  40293a:	490b      	ldr	r1, [pc, #44]	; (402968 <xTimerCreateTimerTask+0x4c>)
  40293c:	480b      	ldr	r0, [pc, #44]	; (40296c <xTimerCreateTimerTask+0x50>)
  40293e:	4c0c      	ldr	r4, [pc, #48]	; (402970 <xTimerCreateTimerTask+0x54>)
  402940:	47a0      	blx	r4
	configASSERT( xReturn );
  402942:	b108      	cbz	r0, 402948 <xTimerCreateTimerTask+0x2c>
}
  402944:	b004      	add	sp, #16
  402946:	bd10      	pop	{r4, pc}
  402948:	f04f 0380 	mov.w	r3, #128	; 0x80
  40294c:	b672      	cpsid	i
  40294e:	f383 8811 	msr	BASEPRI, r3
  402952:	f3bf 8f6f 	isb	sy
  402956:	f3bf 8f4f 	dsb	sy
  40295a:	b662      	cpsie	i
  40295c:	e7fe      	b.n	40295c <xTimerCreateTimerTask+0x40>
  40295e:	bf00      	nop
  402960:	00402899 	.word	0x00402899
  402964:	20400b8c 	.word	0x20400b8c
  402968:	00406394 	.word	0x00406394
  40296c:	00402a9d 	.word	0x00402a9d
  402970:	00401d95 	.word	0x00401d95

00402974 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402974:	b1d8      	cbz	r0, 4029ae <xTimerGenericCommand+0x3a>
{
  402976:	b530      	push	{r4, r5, lr}
  402978:	b085      	sub	sp, #20
  40297a:	4615      	mov	r5, r2
  40297c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  40297e:	4a15      	ldr	r2, [pc, #84]	; (4029d4 <xTimerGenericCommand+0x60>)
  402980:	6810      	ldr	r0, [r2, #0]
  402982:	b320      	cbz	r0, 4029ce <xTimerGenericCommand+0x5a>
  402984:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402986:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402988:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  40298a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  40298c:	2905      	cmp	r1, #5
  40298e:	dc19      	bgt.n	4029c4 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402990:	4b11      	ldr	r3, [pc, #68]	; (4029d8 <xTimerGenericCommand+0x64>)
  402992:	4798      	blx	r3
  402994:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402996:	f04f 0300 	mov.w	r3, #0
  40299a:	bf0c      	ite	eq
  40299c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40299e:	461a      	movne	r2, r3
  4029a0:	4669      	mov	r1, sp
  4029a2:	480c      	ldr	r0, [pc, #48]	; (4029d4 <xTimerGenericCommand+0x60>)
  4029a4:	6800      	ldr	r0, [r0, #0]
  4029a6:	4c0d      	ldr	r4, [pc, #52]	; (4029dc <xTimerGenericCommand+0x68>)
  4029a8:	47a0      	blx	r4
}
  4029aa:	b005      	add	sp, #20
  4029ac:	bd30      	pop	{r4, r5, pc}
  4029ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029b2:	b672      	cpsid	i
  4029b4:	f383 8811 	msr	BASEPRI, r3
  4029b8:	f3bf 8f6f 	isb	sy
  4029bc:	f3bf 8f4f 	dsb	sy
  4029c0:	b662      	cpsie	i
  4029c2:	e7fe      	b.n	4029c2 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4029c4:	2300      	movs	r3, #0
  4029c6:	4669      	mov	r1, sp
  4029c8:	4c05      	ldr	r4, [pc, #20]	; (4029e0 <xTimerGenericCommand+0x6c>)
  4029ca:	47a0      	blx	r4
  4029cc:	e7ed      	b.n	4029aa <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4029ce:	2000      	movs	r0, #0
	return xReturn;
  4029d0:	e7eb      	b.n	4029aa <xTimerGenericCommand+0x36>
  4029d2:	bf00      	nop
  4029d4:	20400b8c 	.word	0x20400b8c
  4029d8:	004026b1 	.word	0x004026b1
  4029dc:	004017d1 	.word	0x004017d1
  4029e0:	004019b5 	.word	0x004019b5

004029e4 <prvSampleTimeNow>:
{
  4029e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4029e8:	b082      	sub	sp, #8
  4029ea:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  4029ec:	4b24      	ldr	r3, [pc, #144]	; (402a80 <prvSampleTimeNow+0x9c>)
  4029ee:	4798      	blx	r3
  4029f0:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  4029f2:	4b24      	ldr	r3, [pc, #144]	; (402a84 <prvSampleTimeNow+0xa0>)
  4029f4:	681b      	ldr	r3, [r3, #0]
  4029f6:	4298      	cmp	r0, r3
  4029f8:	d31b      	bcc.n	402a32 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  4029fa:	2300      	movs	r3, #0
  4029fc:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402a00:	4b20      	ldr	r3, [pc, #128]	; (402a84 <prvSampleTimeNow+0xa0>)
  402a02:	601f      	str	r7, [r3, #0]
}
  402a04:	4638      	mov	r0, r7
  402a06:	b002      	add	sp, #8
  402a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402a0c:	2100      	movs	r1, #0
  402a0e:	9100      	str	r1, [sp, #0]
  402a10:	460b      	mov	r3, r1
  402a12:	4652      	mov	r2, sl
  402a14:	4620      	mov	r0, r4
  402a16:	4c1c      	ldr	r4, [pc, #112]	; (402a88 <prvSampleTimeNow+0xa4>)
  402a18:	47a0      	blx	r4
				configASSERT( xResult );
  402a1a:	b960      	cbnz	r0, 402a36 <prvSampleTimeNow+0x52>
  402a1c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a20:	b672      	cpsid	i
  402a22:	f383 8811 	msr	BASEPRI, r3
  402a26:	f3bf 8f6f 	isb	sy
  402a2a:	f3bf 8f4f 	dsb	sy
  402a2e:	b662      	cpsie	i
  402a30:	e7fe      	b.n	402a30 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402a32:	4d16      	ldr	r5, [pc, #88]	; (402a8c <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402a34:	4e16      	ldr	r6, [pc, #88]	; (402a90 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402a36:	682b      	ldr	r3, [r5, #0]
  402a38:	681a      	ldr	r2, [r3, #0]
  402a3a:	b1c2      	cbz	r2, 402a6e <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402a3c:	68db      	ldr	r3, [r3, #12]
  402a3e:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402a42:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402a44:	f104 0904 	add.w	r9, r4, #4
  402a48:	4648      	mov	r0, r9
  402a4a:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402a4e:	4620      	mov	r0, r4
  402a50:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402a52:	69e3      	ldr	r3, [r4, #28]
  402a54:	2b01      	cmp	r3, #1
  402a56:	d1ee      	bne.n	402a36 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402a58:	69a3      	ldr	r3, [r4, #24]
  402a5a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402a5c:	459a      	cmp	sl, r3
  402a5e:	d2d5      	bcs.n	402a0c <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402a60:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402a62:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402a64:	4649      	mov	r1, r9
  402a66:	6828      	ldr	r0, [r5, #0]
  402a68:	4b0a      	ldr	r3, [pc, #40]	; (402a94 <prvSampleTimeNow+0xb0>)
  402a6a:	4798      	blx	r3
  402a6c:	e7e3      	b.n	402a36 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402a6e:	4a0a      	ldr	r2, [pc, #40]	; (402a98 <prvSampleTimeNow+0xb4>)
  402a70:	6810      	ldr	r0, [r2, #0]
  402a72:	4906      	ldr	r1, [pc, #24]	; (402a8c <prvSampleTimeNow+0xa8>)
  402a74:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402a76:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402a78:	2301      	movs	r3, #1
  402a7a:	f8c8 3000 	str.w	r3, [r8]
  402a7e:	e7bf      	b.n	402a00 <prvSampleTimeNow+0x1c>
  402a80:	00402065 	.word	0x00402065
  402a84:	20400b88 	.word	0x20400b88
  402a88:	00402975 	.word	0x00402975
  402a8c:	20400b58 	.word	0x20400b58
  402a90:	00401151 	.word	0x00401151
  402a94:	0040111d 	.word	0x0040111d
  402a98:	20400b5c 	.word	0x20400b5c

00402a9c <prvTimerTask>:
{
  402a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402aa0:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402aa2:	4e75      	ldr	r6, [pc, #468]	; (402c78 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402aa4:	4f75      	ldr	r7, [pc, #468]	; (402c7c <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402aa6:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402ca4 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402aaa:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402ca8 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402aae:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402ab0:	681a      	ldr	r2, [r3, #0]
  402ab2:	2a00      	cmp	r2, #0
  402ab4:	f000 80ce 	beq.w	402c54 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402ab8:	68db      	ldr	r3, [r3, #12]
  402aba:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402abc:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402abe:	a804      	add	r0, sp, #16
  402ac0:	4b6f      	ldr	r3, [pc, #444]	; (402c80 <prvTimerTask+0x1e4>)
  402ac2:	4798      	blx	r3
  402ac4:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402ac6:	9b04      	ldr	r3, [sp, #16]
  402ac8:	2b00      	cmp	r3, #0
  402aca:	d144      	bne.n	402b56 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402acc:	42a0      	cmp	r0, r4
  402ace:	d212      	bcs.n	402af6 <prvTimerTask+0x5a>
  402ad0:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402ad2:	1b61      	subs	r1, r4, r5
  402ad4:	4b6b      	ldr	r3, [pc, #428]	; (402c84 <prvTimerTask+0x1e8>)
  402ad6:	6818      	ldr	r0, [r3, #0]
  402ad8:	4b6b      	ldr	r3, [pc, #428]	; (402c88 <prvTimerTask+0x1ec>)
  402ada:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402adc:	4b6b      	ldr	r3, [pc, #428]	; (402c8c <prvTimerTask+0x1f0>)
  402ade:	4798      	blx	r3
  402ae0:	2800      	cmp	r0, #0
  402ae2:	d13a      	bne.n	402b5a <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402ae4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402ae8:	f8c9 3000 	str.w	r3, [r9]
  402aec:	f3bf 8f4f 	dsb	sy
  402af0:	f3bf 8f6f 	isb	sy
  402af4:	e031      	b.n	402b5a <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402af6:	4b65      	ldr	r3, [pc, #404]	; (402c8c <prvTimerTask+0x1f0>)
  402af8:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402afa:	6833      	ldr	r3, [r6, #0]
  402afc:	68db      	ldr	r3, [r3, #12]
  402afe:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b02:	f10a 0004 	add.w	r0, sl, #4
  402b06:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402b08:	f8da 301c 	ldr.w	r3, [sl, #28]
  402b0c:	2b01      	cmp	r3, #1
  402b0e:	d004      	beq.n	402b1a <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402b10:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402b14:	4650      	mov	r0, sl
  402b16:	4798      	blx	r3
  402b18:	e01f      	b.n	402b5a <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402b1a:	f8da 1018 	ldr.w	r1, [sl, #24]
  402b1e:	4623      	mov	r3, r4
  402b20:	462a      	mov	r2, r5
  402b22:	4421      	add	r1, r4
  402b24:	4650      	mov	r0, sl
  402b26:	4d5a      	ldr	r5, [pc, #360]	; (402c90 <prvTimerTask+0x1f4>)
  402b28:	47a8      	blx	r5
  402b2a:	2801      	cmp	r0, #1
  402b2c:	d1f0      	bne.n	402b10 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402b2e:	2100      	movs	r1, #0
  402b30:	9100      	str	r1, [sp, #0]
  402b32:	460b      	mov	r3, r1
  402b34:	4622      	mov	r2, r4
  402b36:	4650      	mov	r0, sl
  402b38:	4c56      	ldr	r4, [pc, #344]	; (402c94 <prvTimerTask+0x1f8>)
  402b3a:	47a0      	blx	r4
			configASSERT( xResult );
  402b3c:	2800      	cmp	r0, #0
  402b3e:	d1e7      	bne.n	402b10 <prvTimerTask+0x74>
  402b40:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b44:	b672      	cpsid	i
  402b46:	f383 8811 	msr	BASEPRI, r3
  402b4a:	f3bf 8f6f 	isb	sy
  402b4e:	f3bf 8f4f 	dsb	sy
  402b52:	b662      	cpsie	i
  402b54:	e7fe      	b.n	402b54 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402b56:	4b4d      	ldr	r3, [pc, #308]	; (402c8c <prvTimerTask+0x1f0>)
  402b58:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402b5a:	4d4a      	ldr	r5, [pc, #296]	; (402c84 <prvTimerTask+0x1e8>)
  402b5c:	4c4e      	ldr	r4, [pc, #312]	; (402c98 <prvTimerTask+0x1fc>)
  402b5e:	e006      	b.n	402b6e <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402b60:	9907      	ldr	r1, [sp, #28]
  402b62:	9806      	ldr	r0, [sp, #24]
  402b64:	9b05      	ldr	r3, [sp, #20]
  402b66:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402b68:	9b04      	ldr	r3, [sp, #16]
  402b6a:	2b00      	cmp	r3, #0
  402b6c:	da09      	bge.n	402b82 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402b6e:	2300      	movs	r3, #0
  402b70:	461a      	mov	r2, r3
  402b72:	a904      	add	r1, sp, #16
  402b74:	6828      	ldr	r0, [r5, #0]
  402b76:	47a0      	blx	r4
  402b78:	2800      	cmp	r0, #0
  402b7a:	d098      	beq.n	402aae <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402b7c:	9b04      	ldr	r3, [sp, #16]
  402b7e:	2b00      	cmp	r3, #0
  402b80:	dbee      	blt.n	402b60 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402b82:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402b86:	f8da 3014 	ldr.w	r3, [sl, #20]
  402b8a:	b113      	cbz	r3, 402b92 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b8c:	f10a 0004 	add.w	r0, sl, #4
  402b90:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402b92:	a803      	add	r0, sp, #12
  402b94:	4b3a      	ldr	r3, [pc, #232]	; (402c80 <prvTimerTask+0x1e4>)
  402b96:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402b98:	9b04      	ldr	r3, [sp, #16]
  402b9a:	2b09      	cmp	r3, #9
  402b9c:	d8e7      	bhi.n	402b6e <prvTimerTask+0xd2>
  402b9e:	a201      	add	r2, pc, #4	; (adr r2, 402ba4 <prvTimerTask+0x108>)
  402ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402ba4:	00402bcd 	.word	0x00402bcd
  402ba8:	00402bcd 	.word	0x00402bcd
  402bac:	00402bcd 	.word	0x00402bcd
  402bb0:	00402b6f 	.word	0x00402b6f
  402bb4:	00402c21 	.word	0x00402c21
  402bb8:	00402c4d 	.word	0x00402c4d
  402bbc:	00402bcd 	.word	0x00402bcd
  402bc0:	00402bcd 	.word	0x00402bcd
  402bc4:	00402b6f 	.word	0x00402b6f
  402bc8:	00402c21 	.word	0x00402c21
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402bcc:	9c05      	ldr	r4, [sp, #20]
  402bce:	f8da 1018 	ldr.w	r1, [sl, #24]
  402bd2:	4623      	mov	r3, r4
  402bd4:	4602      	mov	r2, r0
  402bd6:	4421      	add	r1, r4
  402bd8:	4650      	mov	r0, sl
  402bda:	4c2d      	ldr	r4, [pc, #180]	; (402c90 <prvTimerTask+0x1f4>)
  402bdc:	47a0      	blx	r4
  402bde:	2801      	cmp	r0, #1
  402be0:	d1bc      	bne.n	402b5c <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402be2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402be6:	4650      	mov	r0, sl
  402be8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402bea:	f8da 301c 	ldr.w	r3, [sl, #28]
  402bee:	2b01      	cmp	r3, #1
  402bf0:	d1b4      	bne.n	402b5c <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402bf2:	f8da 2018 	ldr.w	r2, [sl, #24]
  402bf6:	2100      	movs	r1, #0
  402bf8:	9100      	str	r1, [sp, #0]
  402bfa:	460b      	mov	r3, r1
  402bfc:	9805      	ldr	r0, [sp, #20]
  402bfe:	4402      	add	r2, r0
  402c00:	4650      	mov	r0, sl
  402c02:	4c24      	ldr	r4, [pc, #144]	; (402c94 <prvTimerTask+0x1f8>)
  402c04:	47a0      	blx	r4
							configASSERT( xResult );
  402c06:	2800      	cmp	r0, #0
  402c08:	d1a8      	bne.n	402b5c <prvTimerTask+0xc0>
  402c0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c0e:	b672      	cpsid	i
  402c10:	f383 8811 	msr	BASEPRI, r3
  402c14:	f3bf 8f6f 	isb	sy
  402c18:	f3bf 8f4f 	dsb	sy
  402c1c:	b662      	cpsie	i
  402c1e:	e7fe      	b.n	402c1e <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402c20:	9905      	ldr	r1, [sp, #20]
  402c22:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402c26:	b131      	cbz	r1, 402c36 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402c28:	4603      	mov	r3, r0
  402c2a:	4602      	mov	r2, r0
  402c2c:	4401      	add	r1, r0
  402c2e:	4650      	mov	r0, sl
  402c30:	4c17      	ldr	r4, [pc, #92]	; (402c90 <prvTimerTask+0x1f4>)
  402c32:	47a0      	blx	r4
  402c34:	e792      	b.n	402b5c <prvTimerTask+0xc0>
  402c36:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c3a:	b672      	cpsid	i
  402c3c:	f383 8811 	msr	BASEPRI, r3
  402c40:	f3bf 8f6f 	isb	sy
  402c44:	f3bf 8f4f 	dsb	sy
  402c48:	b662      	cpsie	i
  402c4a:	e7fe      	b.n	402c4a <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402c4c:	4650      	mov	r0, sl
  402c4e:	4b13      	ldr	r3, [pc, #76]	; (402c9c <prvTimerTask+0x200>)
  402c50:	4798      	blx	r3
  402c52:	e783      	b.n	402b5c <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402c54:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402c56:	a804      	add	r0, sp, #16
  402c58:	4b09      	ldr	r3, [pc, #36]	; (402c80 <prvTimerTask+0x1e4>)
  402c5a:	4798      	blx	r3
  402c5c:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402c5e:	9b04      	ldr	r3, [sp, #16]
  402c60:	2b00      	cmp	r3, #0
  402c62:	f47f af78 	bne.w	402b56 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402c66:	4b0e      	ldr	r3, [pc, #56]	; (402ca0 <prvTimerTask+0x204>)
  402c68:	681b      	ldr	r3, [r3, #0]
  402c6a:	681a      	ldr	r2, [r3, #0]
  402c6c:	fab2 f282 	clz	r2, r2
  402c70:	0952      	lsrs	r2, r2, #5
  402c72:	2400      	movs	r4, #0
  402c74:	e72d      	b.n	402ad2 <prvTimerTask+0x36>
  402c76:	bf00      	nop
  402c78:	20400b58 	.word	0x20400b58
  402c7c:	00402055 	.word	0x00402055
  402c80:	004029e5 	.word	0x004029e5
  402c84:	20400b8c 	.word	0x20400b8c
  402c88:	00401cb9 	.word	0x00401cb9
  402c8c:	004021bd 	.word	0x004021bd
  402c90:	0040284d 	.word	0x0040284d
  402c94:	00402975 	.word	0x00402975
  402c98:	00401ab5 	.word	0x00401ab5
  402c9c:	004014c1 	.word	0x004014c1
  402ca0:	20400b5c 	.word	0x20400b5c
  402ca4:	e000ed04 	.word	0xe000ed04
  402ca8:	00401151 	.word	0x00401151

00402cac <RTT_init>:
	/* Specify that stdout should not be buffered. */
	setbuf(stdout, NULL);
}

static void RTT_init(float freqPrescale, uint32_t IrqNPulses,
uint32_t rttIRQSource) {
  402cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402cb0:	ed2d 8b02 	vpush	{d8}
  402cb4:	b082      	sub	sp, #8
  402cb6:	eeb0 8a40 	vmov.f32	s16, s0
  402cba:	4680      	mov	r8, r0
  402cbc:	460f      	mov	r7, r1

	uint16_t pllPreScale = (int)(((float)32768) / freqPrescale);

	rtt_sel_source(RTT, false);
  402cbe:	4c20      	ldr	r4, [pc, #128]	; (402d40 <RTT_init+0x94>)
  402cc0:	2100      	movs	r1, #0
  402cc2:	4620      	mov	r0, r4
  402cc4:	4b1f      	ldr	r3, [pc, #124]	; (402d44 <RTT_init+0x98>)
  402cc6:	4798      	blx	r3
	uint16_t pllPreScale = (int)(((float)32768) / freqPrescale);
  402cc8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 402d48 <RTT_init+0x9c>
  402ccc:	eec7 7a08 	vdiv.f32	s15, s14, s16
  402cd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  402cd4:	edcd 7a01 	vstr	s15, [sp, #4]
	rtt_init(RTT, pllPreScale);
  402cd8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  402cdc:	4620      	mov	r0, r4
  402cde:	4b1b      	ldr	r3, [pc, #108]	; (402d4c <RTT_init+0xa0>)
  402ce0:	4798      	blx	r3

	if (rttIRQSource & RTT_MR_ALMIEN) {
  402ce2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  402ce6:	d116      	bne.n	402d16 <RTT_init+0x6a>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402ce8:	4b19      	ldr	r3, [pc, #100]	; (402d50 <RTT_init+0xa4>)
  402cea:	2208      	movs	r2, #8
  402cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402cf0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402cf4:	2180      	movs	r1, #128	; 0x80
  402cf6:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402cfa:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 4);
	NVIC_EnableIRQ(RTT_IRQn);

	/* Enable RTT interrupt */
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  402cfc:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  402d00:	d119      	bne.n	402d36 <RTT_init+0x8a>
	rtt_enable_interrupt(RTT, rttIRQSource);
	else
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  402d02:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  402d06:	480e      	ldr	r0, [pc, #56]	; (402d40 <RTT_init+0x94>)
  402d08:	4b12      	ldr	r3, [pc, #72]	; (402d54 <RTT_init+0xa8>)
  402d0a:	4798      	blx	r3
}
  402d0c:	b002      	add	sp, #8
  402d0e:	ecbd 8b02 	vpop	{d8}
  402d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_previous_time = rtt_read_timer_value(RTT);
  402d16:	4620      	mov	r0, r4
  402d18:	4b0f      	ldr	r3, [pc, #60]	; (402d58 <RTT_init+0xac>)
  402d1a:	4798      	blx	r3
  402d1c:	4604      	mov	r4, r0
		while (ul_previous_time == rtt_read_timer_value(RTT))
  402d1e:	4e08      	ldr	r6, [pc, #32]	; (402d40 <RTT_init+0x94>)
  402d20:	4d0d      	ldr	r5, [pc, #52]	; (402d58 <RTT_init+0xac>)
  402d22:	4630      	mov	r0, r6
  402d24:	47a8      	blx	r5
  402d26:	4284      	cmp	r4, r0
  402d28:	d0fb      	beq.n	402d22 <RTT_init+0x76>
		rtt_write_alarm_time(RTT, IrqNPulses + ul_previous_time);
  402d2a:	eb04 0108 	add.w	r1, r4, r8
  402d2e:	4804      	ldr	r0, [pc, #16]	; (402d40 <RTT_init+0x94>)
  402d30:	4b0a      	ldr	r3, [pc, #40]	; (402d5c <RTT_init+0xb0>)
  402d32:	4798      	blx	r3
  402d34:	e7d8      	b.n	402ce8 <RTT_init+0x3c>
	rtt_enable_interrupt(RTT, rttIRQSource);
  402d36:	4639      	mov	r1, r7
  402d38:	4801      	ldr	r0, [pc, #4]	; (402d40 <RTT_init+0x94>)
  402d3a:	4b09      	ldr	r3, [pc, #36]	; (402d60 <RTT_init+0xb4>)
  402d3c:	4798      	blx	r3
  402d3e:	e7e5      	b.n	402d0c <RTT_init+0x60>
  402d40:	400e1830 	.word	0x400e1830
  402d44:	004006f9 	.word	0x004006f9
  402d48:	47000000 	.word	0x47000000
  402d4c:	004006e5 	.word	0x004006e5
  402d50:	e000e100 	.word	0xe000e100
  402d54:	00400739 	.word	0x00400739
  402d58:	0040074d 	.word	0x0040074d
  402d5c:	00400765 	.word	0x00400765
  402d60:	00400725 	.word	0x00400725

00402d64 <AFEC_pot_callback>:
static void AFEC_pot_callback(void) {
  402d64:	b510      	push	{r4, lr}
  402d66:	b082      	sub	sp, #8
	afec->AFEC_CSELR = afec_ch;
  402d68:	4a07      	ldr	r2, [pc, #28]	; (402d88 <AFEC_pot_callback+0x24>)
  402d6a:	2300      	movs	r3, #0
  402d6c:	6653      	str	r3, [r2, #100]	; 0x64
	return afec->AFEC_CDR;
  402d6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
	adc.value = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  402d70:	9201      	str	r2, [sp, #4]
	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  402d72:	aa02      	add	r2, sp, #8
  402d74:	2101      	movs	r1, #1
  402d76:	f842 1d08 	str.w	r1, [r2, #-8]!
	xQueueSendFromISR(xQueueAFEC, &adc, &xHigherPriorityTaskWoken);
  402d7a:	a901      	add	r1, sp, #4
  402d7c:	4803      	ldr	r0, [pc, #12]	; (402d8c <AFEC_pot_callback+0x28>)
  402d7e:	6800      	ldr	r0, [r0, #0]
  402d80:	4c03      	ldr	r4, [pc, #12]	; (402d90 <AFEC_pot_callback+0x2c>)
  402d82:	47a0      	blx	r4
}
  402d84:	b002      	add	sp, #8
  402d86:	bd10      	pop	{r4, pc}
  402d88:	4003c000 	.word	0x4003c000
  402d8c:	20400d50 	.word	0x20400d50
  402d90:	004019b5 	.word	0x004019b5

00402d94 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402d94:	b5f0      	push	{r4, r5, r6, r7, lr}
  402d96:	b083      	sub	sp, #12
  402d98:	4605      	mov	r5, r0
  402d9a:	460c      	mov	r4, r1
	uint32_t val = 0;
  402d9c:	2300      	movs	r3, #0
  402d9e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402da0:	4b2a      	ldr	r3, [pc, #168]	; (402e4c <usart_serial_getchar+0xb8>)
  402da2:	4298      	cmp	r0, r3
  402da4:	d013      	beq.n	402dce <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402da6:	4b2a      	ldr	r3, [pc, #168]	; (402e50 <usart_serial_getchar+0xbc>)
  402da8:	4298      	cmp	r0, r3
  402daa:	d018      	beq.n	402dde <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402dac:	4b29      	ldr	r3, [pc, #164]	; (402e54 <usart_serial_getchar+0xc0>)
  402dae:	4298      	cmp	r0, r3
  402db0:	d01d      	beq.n	402dee <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402db2:	4b29      	ldr	r3, [pc, #164]	; (402e58 <usart_serial_getchar+0xc4>)
  402db4:	429d      	cmp	r5, r3
  402db6:	d022      	beq.n	402dfe <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402db8:	4b28      	ldr	r3, [pc, #160]	; (402e5c <usart_serial_getchar+0xc8>)
  402dba:	429d      	cmp	r5, r3
  402dbc:	d027      	beq.n	402e0e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402dbe:	4b28      	ldr	r3, [pc, #160]	; (402e60 <usart_serial_getchar+0xcc>)
  402dc0:	429d      	cmp	r5, r3
  402dc2:	d02e      	beq.n	402e22 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402dc4:	4b27      	ldr	r3, [pc, #156]	; (402e64 <usart_serial_getchar+0xd0>)
  402dc6:	429d      	cmp	r5, r3
  402dc8:	d035      	beq.n	402e36 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402dca:	b003      	add	sp, #12
  402dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402dce:	461f      	mov	r7, r3
  402dd0:	4e25      	ldr	r6, [pc, #148]	; (402e68 <usart_serial_getchar+0xd4>)
  402dd2:	4621      	mov	r1, r4
  402dd4:	4638      	mov	r0, r7
  402dd6:	47b0      	blx	r6
  402dd8:	2800      	cmp	r0, #0
  402dda:	d1fa      	bne.n	402dd2 <usart_serial_getchar+0x3e>
  402ddc:	e7e9      	b.n	402db2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402dde:	461f      	mov	r7, r3
  402de0:	4e21      	ldr	r6, [pc, #132]	; (402e68 <usart_serial_getchar+0xd4>)
  402de2:	4621      	mov	r1, r4
  402de4:	4638      	mov	r0, r7
  402de6:	47b0      	blx	r6
  402de8:	2800      	cmp	r0, #0
  402dea:	d1fa      	bne.n	402de2 <usart_serial_getchar+0x4e>
  402dec:	e7e4      	b.n	402db8 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402dee:	461f      	mov	r7, r3
  402df0:	4e1d      	ldr	r6, [pc, #116]	; (402e68 <usart_serial_getchar+0xd4>)
  402df2:	4621      	mov	r1, r4
  402df4:	4638      	mov	r0, r7
  402df6:	47b0      	blx	r6
  402df8:	2800      	cmp	r0, #0
  402dfa:	d1fa      	bne.n	402df2 <usart_serial_getchar+0x5e>
  402dfc:	e7df      	b.n	402dbe <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402dfe:	461f      	mov	r7, r3
  402e00:	4e19      	ldr	r6, [pc, #100]	; (402e68 <usart_serial_getchar+0xd4>)
  402e02:	4621      	mov	r1, r4
  402e04:	4638      	mov	r0, r7
  402e06:	47b0      	blx	r6
  402e08:	2800      	cmp	r0, #0
  402e0a:	d1fa      	bne.n	402e02 <usart_serial_getchar+0x6e>
  402e0c:	e7da      	b.n	402dc4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  402e0e:	461e      	mov	r6, r3
  402e10:	4d16      	ldr	r5, [pc, #88]	; (402e6c <usart_serial_getchar+0xd8>)
  402e12:	a901      	add	r1, sp, #4
  402e14:	4630      	mov	r0, r6
  402e16:	47a8      	blx	r5
  402e18:	2800      	cmp	r0, #0
  402e1a:	d1fa      	bne.n	402e12 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  402e1c:	9b01      	ldr	r3, [sp, #4]
  402e1e:	7023      	strb	r3, [r4, #0]
  402e20:	e7d3      	b.n	402dca <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402e22:	461e      	mov	r6, r3
  402e24:	4d11      	ldr	r5, [pc, #68]	; (402e6c <usart_serial_getchar+0xd8>)
  402e26:	a901      	add	r1, sp, #4
  402e28:	4630      	mov	r0, r6
  402e2a:	47a8      	blx	r5
  402e2c:	2800      	cmp	r0, #0
  402e2e:	d1fa      	bne.n	402e26 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402e30:	9b01      	ldr	r3, [sp, #4]
  402e32:	7023      	strb	r3, [r4, #0]
  402e34:	e7c9      	b.n	402dca <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402e36:	461e      	mov	r6, r3
  402e38:	4d0c      	ldr	r5, [pc, #48]	; (402e6c <usart_serial_getchar+0xd8>)
  402e3a:	a901      	add	r1, sp, #4
  402e3c:	4630      	mov	r0, r6
  402e3e:	47a8      	blx	r5
  402e40:	2800      	cmp	r0, #0
  402e42:	d1fa      	bne.n	402e3a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  402e44:	9b01      	ldr	r3, [sp, #4]
  402e46:	7023      	strb	r3, [r4, #0]
}
  402e48:	e7bf      	b.n	402dca <usart_serial_getchar+0x36>
  402e4a:	bf00      	nop
  402e4c:	400e0800 	.word	0x400e0800
  402e50:	400e0a00 	.word	0x400e0a00
  402e54:	400e1a00 	.word	0x400e1a00
  402e58:	400e1c00 	.word	0x400e1c00
  402e5c:	40024000 	.word	0x40024000
  402e60:	40028000 	.word	0x40028000
  402e64:	4002c000 	.word	0x4002c000
  402e68:	00400d13 	.word	0x00400d13
  402e6c:	00400e1f 	.word	0x00400e1f

00402e70 <usart_serial_putchar>:
{
  402e70:	b570      	push	{r4, r5, r6, lr}
  402e72:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402e74:	4b2a      	ldr	r3, [pc, #168]	; (402f20 <usart_serial_putchar+0xb0>)
  402e76:	4298      	cmp	r0, r3
  402e78:	d013      	beq.n	402ea2 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  402e7a:	4b2a      	ldr	r3, [pc, #168]	; (402f24 <usart_serial_putchar+0xb4>)
  402e7c:	4298      	cmp	r0, r3
  402e7e:	d019      	beq.n	402eb4 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402e80:	4b29      	ldr	r3, [pc, #164]	; (402f28 <usart_serial_putchar+0xb8>)
  402e82:	4298      	cmp	r0, r3
  402e84:	d01f      	beq.n	402ec6 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  402e86:	4b29      	ldr	r3, [pc, #164]	; (402f2c <usart_serial_putchar+0xbc>)
  402e88:	4298      	cmp	r0, r3
  402e8a:	d025      	beq.n	402ed8 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402e8c:	4b28      	ldr	r3, [pc, #160]	; (402f30 <usart_serial_putchar+0xc0>)
  402e8e:	4298      	cmp	r0, r3
  402e90:	d02b      	beq.n	402eea <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402e92:	4b28      	ldr	r3, [pc, #160]	; (402f34 <usart_serial_putchar+0xc4>)
  402e94:	4298      	cmp	r0, r3
  402e96:	d031      	beq.n	402efc <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  402e98:	4b27      	ldr	r3, [pc, #156]	; (402f38 <usart_serial_putchar+0xc8>)
  402e9a:	4298      	cmp	r0, r3
  402e9c:	d037      	beq.n	402f0e <usart_serial_putchar+0x9e>
	return 0;
  402e9e:	2000      	movs	r0, #0
}
  402ea0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402ea2:	461e      	mov	r6, r3
  402ea4:	4d25      	ldr	r5, [pc, #148]	; (402f3c <usart_serial_putchar+0xcc>)
  402ea6:	4621      	mov	r1, r4
  402ea8:	4630      	mov	r0, r6
  402eaa:	47a8      	blx	r5
  402eac:	2800      	cmp	r0, #0
  402eae:	d1fa      	bne.n	402ea6 <usart_serial_putchar+0x36>
		return 1;
  402eb0:	2001      	movs	r0, #1
  402eb2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402eb4:	461e      	mov	r6, r3
  402eb6:	4d21      	ldr	r5, [pc, #132]	; (402f3c <usart_serial_putchar+0xcc>)
  402eb8:	4621      	mov	r1, r4
  402eba:	4630      	mov	r0, r6
  402ebc:	47a8      	blx	r5
  402ebe:	2800      	cmp	r0, #0
  402ec0:	d1fa      	bne.n	402eb8 <usart_serial_putchar+0x48>
		return 1;
  402ec2:	2001      	movs	r0, #1
  402ec4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402ec6:	461e      	mov	r6, r3
  402ec8:	4d1c      	ldr	r5, [pc, #112]	; (402f3c <usart_serial_putchar+0xcc>)
  402eca:	4621      	mov	r1, r4
  402ecc:	4630      	mov	r0, r6
  402ece:	47a8      	blx	r5
  402ed0:	2800      	cmp	r0, #0
  402ed2:	d1fa      	bne.n	402eca <usart_serial_putchar+0x5a>
		return 1;
  402ed4:	2001      	movs	r0, #1
  402ed6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402ed8:	461e      	mov	r6, r3
  402eda:	4d18      	ldr	r5, [pc, #96]	; (402f3c <usart_serial_putchar+0xcc>)
  402edc:	4621      	mov	r1, r4
  402ede:	4630      	mov	r0, r6
  402ee0:	47a8      	blx	r5
  402ee2:	2800      	cmp	r0, #0
  402ee4:	d1fa      	bne.n	402edc <usart_serial_putchar+0x6c>
		return 1;
  402ee6:	2001      	movs	r0, #1
  402ee8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402eea:	461e      	mov	r6, r3
  402eec:	4d14      	ldr	r5, [pc, #80]	; (402f40 <usart_serial_putchar+0xd0>)
  402eee:	4621      	mov	r1, r4
  402ef0:	4630      	mov	r0, r6
  402ef2:	47a8      	blx	r5
  402ef4:	2800      	cmp	r0, #0
  402ef6:	d1fa      	bne.n	402eee <usart_serial_putchar+0x7e>
		return 1;
  402ef8:	2001      	movs	r0, #1
  402efa:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402efc:	461e      	mov	r6, r3
  402efe:	4d10      	ldr	r5, [pc, #64]	; (402f40 <usart_serial_putchar+0xd0>)
  402f00:	4621      	mov	r1, r4
  402f02:	4630      	mov	r0, r6
  402f04:	47a8      	blx	r5
  402f06:	2800      	cmp	r0, #0
  402f08:	d1fa      	bne.n	402f00 <usart_serial_putchar+0x90>
		return 1;
  402f0a:	2001      	movs	r0, #1
  402f0c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402f0e:	461e      	mov	r6, r3
  402f10:	4d0b      	ldr	r5, [pc, #44]	; (402f40 <usart_serial_putchar+0xd0>)
  402f12:	4621      	mov	r1, r4
  402f14:	4630      	mov	r0, r6
  402f16:	47a8      	blx	r5
  402f18:	2800      	cmp	r0, #0
  402f1a:	d1fa      	bne.n	402f12 <usart_serial_putchar+0xa2>
		return 1;
  402f1c:	2001      	movs	r0, #1
  402f1e:	bd70      	pop	{r4, r5, r6, pc}
  402f20:	400e0800 	.word	0x400e0800
  402f24:	400e0a00 	.word	0x400e0a00
  402f28:	400e1a00 	.word	0x400e1a00
  402f2c:	400e1c00 	.word	0x400e1c00
  402f30:	40024000 	.word	0x40024000
  402f34:	40028000 	.word	0x40028000
  402f38:	4002c000 	.word	0x4002c000
  402f3c:	00400d01 	.word	0x00400d01
  402f40:	00400e09 	.word	0x00400e09

00402f44 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  402f44:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  402f46:	460a      	mov	r2, r1
  402f48:	4601      	mov	r1, r0
  402f4a:	4802      	ldr	r0, [pc, #8]	; (402f54 <vApplicationStackOverflowHook+0x10>)
  402f4c:	4b02      	ldr	r3, [pc, #8]	; (402f58 <vApplicationStackOverflowHook+0x14>)
  402f4e:	4798      	blx	r3
  402f50:	e7fe      	b.n	402f50 <vApplicationStackOverflowHook+0xc>
  402f52:	bf00      	nop
  402f54:	00406438 	.word	0x00406438
  402f58:	0040342d 	.word	0x0040342d

00402f5c <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  402f5c:	4770      	bx	lr

00402f5e <vApplicationMallocFailedHook>:
  402f5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f62:	b672      	cpsid	i
  402f64:	f383 8811 	msr	BASEPRI, r3
  402f68:	f3bf 8f6f 	isb	sy
  402f6c:	f3bf 8f4f 	dsb	sy
  402f70:	b662      	cpsie	i
  402f72:	e7fe      	b.n	402f72 <vApplicationMallocFailedHook+0x14>

00402f74 <RTT_Handler>:
void RTT_Handler(void) {
  402f74:	b508      	push	{r3, lr}
	ul_status = rtt_get_status(RTT);
  402f76:	480a      	ldr	r0, [pc, #40]	; (402fa0 <RTT_Handler+0x2c>)
  402f78:	4b0a      	ldr	r3, [pc, #40]	; (402fa4 <RTT_Handler+0x30>)
  402f7a:	4798      	blx	r3
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  402f7c:	f010 0f01 	tst.w	r0, #1
  402f80:	d100      	bne.n	402f84 <RTT_Handler+0x10>
  402f82:	bd08      	pop	{r3, pc}
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402f84:	4b08      	ldr	r3, [pc, #32]	; (402fa8 <RTT_Handler+0x34>)
  402f86:	2201      	movs	r2, #1
  402f88:	615a      	str	r2, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  402f8a:	2202      	movs	r2, #2
  402f8c:	601a      	str	r2, [r3, #0]
		RTT_init(1000, 100, RTT_MR_ALMIEN);   //iniciando o RTT
  402f8e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  402f92:	2064      	movs	r0, #100	; 0x64
  402f94:	ed9f 0a05 	vldr	s0, [pc, #20]	; 402fac <RTT_Handler+0x38>
  402f98:	4b05      	ldr	r3, [pc, #20]	; (402fb0 <RTT_Handler+0x3c>)
  402f9a:	4798      	blx	r3
}
  402f9c:	e7f1      	b.n	402f82 <RTT_Handler+0xe>
  402f9e:	bf00      	nop
  402fa0:	400e1830 	.word	0x400e1830
  402fa4:	00400761 	.word	0x00400761
  402fa8:	4003c000 	.word	0x4003c000
  402fac:	447a0000 	.word	0x447a0000
  402fb0:	00402cad 	.word	0x00402cad

00402fb4 <wheel>:
void wheel( uint WheelPos, uint *r, uint *g, uint *b ) {
  402fb4:	b410      	push	{r4}
	WheelPos = 255 - WheelPos;
  402fb6:	f1c0 04ff 	rsb	r4, r0, #255	; 0xff
	if ( WheelPos < 85 ) {
  402fba:	2c54      	cmp	r4, #84	; 0x54
  402fbc:	d90c      	bls.n	402fd8 <wheel+0x24>
		} else if( WheelPos < 170 ) {
  402fbe:	2ca9      	cmp	r4, #169	; 0xa9
  402fc0:	d915      	bls.n	402fee <wheel+0x3a>
		WheelPos -= 170;
  402fc2:	f1c0 0055 	rsb	r0, r0, #85	; 0x55
		*r = WheelPos * 3;
  402fc6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  402fca:	6008      	str	r0, [r1, #0]
		*g =  255 - WheelPos * 3;
  402fcc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
  402fd0:	6010      	str	r0, [r2, #0]
		*b =  0;
  402fd2:	2200      	movs	r2, #0
  402fd4:	601a      	str	r2, [r3, #0]
}
  402fd6:	e007      	b.n	402fe8 <wheel+0x34>
		*r = 255 - WheelPos * 3;
  402fd8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  402fdc:	f1c4 00ff 	rsb	r0, r4, #255	; 0xff
  402fe0:	6008      	str	r0, [r1, #0]
		*g =  0;
  402fe2:	2100      	movs	r1, #0
  402fe4:	6011      	str	r1, [r2, #0]
		*b = WheelPos * 3;
  402fe6:	601c      	str	r4, [r3, #0]
}
  402fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
  402fec:	4770      	bx	lr
		*r = 0;
  402fee:	2400      	movs	r4, #0
  402ff0:	600c      	str	r4, [r1, #0]
		WheelPos -= 85;
  402ff2:	f1c0 00aa 	rsb	r0, r0, #170	; 0xaa
		*g =  WheelPos * 3;
  402ff6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  402ffa:	6010      	str	r0, [r2, #0]
		*b =  255 - WheelPos * 3;
  402ffc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
  403000:	6018      	str	r0, [r3, #0]
  403002:	e7f1      	b.n	402fe8 <wheel+0x34>

00403004 <task_afec>:
static void task_afec(void *pvParameters){
  403004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403008:	b090      	sub	sp, #64	; 0x40
	afec_enable(afec);
  40300a:	4c38      	ldr	r4, [pc, #224]	; (4030ec <task_afec+0xe8>)
  40300c:	4620      	mov	r0, r4
  40300e:	4b38      	ldr	r3, [pc, #224]	; (4030f0 <task_afec+0xec>)
  403010:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  403012:	a803      	add	r0, sp, #12
  403014:	4b37      	ldr	r3, [pc, #220]	; (4030f4 <task_afec+0xf0>)
  403016:	4798      	blx	r3
	afec_init(afec, &afec_cfg);
  403018:	a903      	add	r1, sp, #12
  40301a:	4620      	mov	r0, r4
  40301c:	4b36      	ldr	r3, [pc, #216]	; (4030f8 <task_afec+0xf4>)
  40301e:	4798      	blx	r3
	reg = afec->AFEC_MR;
  403020:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  403022:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  403026:	6063      	str	r3, [r4, #4]
	afec_ch_get_config_defaults(&afec_ch_cfg);
  403028:	4668      	mov	r0, sp
  40302a:	4b34      	ldr	r3, [pc, #208]	; (4030fc <task_afec+0xf8>)
  40302c:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  40302e:	2500      	movs	r5, #0
  403030:	f88d 5001 	strb.w	r5, [sp, #1]
	afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  403034:	466a      	mov	r2, sp
  403036:	4629      	mov	r1, r5
  403038:	4620      	mov	r0, r4
  40303a:	4b31      	ldr	r3, [pc, #196]	; (403100 <task_afec+0xfc>)
  40303c:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  40303e:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  403040:	f44f 7300 	mov.w	r3, #512	; 0x200
  403044:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  403046:	a801      	add	r0, sp, #4
  403048:	4b2e      	ldr	r3, [pc, #184]	; (403104 <task_afec+0x100>)
  40304a:	4798      	blx	r3
	afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  40304c:	a901      	add	r1, sp, #4
  40304e:	4620      	mov	r0, r4
  403050:	4b2d      	ldr	r3, [pc, #180]	; (403108 <task_afec+0x104>)
  403052:	4798      	blx	r3
	afec_set_callback(afec, afec_channel, callback, 1);
  403054:	2301      	movs	r3, #1
  403056:	4a2d      	ldr	r2, [pc, #180]	; (40310c <task_afec+0x108>)
  403058:	4629      	mov	r1, r5
  40305a:	4620      	mov	r0, r4
  40305c:	4c2c      	ldr	r4, [pc, #176]	; (403110 <task_afec+0x10c>)
  40305e:	47a0      	blx	r4
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403060:	4b2c      	ldr	r3, [pc, #176]	; (403114 <task_afec+0x110>)
  403062:	2280      	movs	r2, #128	; 0x80
  403064:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403068:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40306c:	601a      	str	r2, [r3, #0]
	RTT_init(1000, 100, RTT_MR_ALMIEN); // 10Hz e com alarme  no proprio RTT chama de novo;
  40306e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  403072:	2064      	movs	r0, #100	; 0x64
  403074:	ed9f 0a28 	vldr	s0, [pc, #160]	; 403118 <task_afec+0x114>
  403078:	4b28      	ldr	r3, [pc, #160]	; (40311c <task_afec+0x118>)
  40307a:	4798      	blx	r3
		if( xQueueReceive(xQueueAFEC, &(adc), ( TickType_t ) 500 )){
  40307c:	4e28      	ldr	r6, [pc, #160]	; (403120 <task_afec+0x11c>)
  40307e:	4d29      	ldr	r5, [pc, #164]	; (403124 <task_afec+0x120>)
  403080:	2400      	movs	r4, #0
  403082:	4623      	mov	r3, r4
  403084:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  403088:	a90f      	add	r1, sp, #60	; 0x3c
  40308a:	6830      	ldr	r0, [r6, #0]
  40308c:	47a8      	blx	r5
  40308e:	2800      	cmp	r0, #0
  403090:	d0f7      	beq.n	403082 <task_afec+0x7e>
			valor = (adc.value * 255)/4095;
  403092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403094:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  403098:	4f23      	ldr	r7, [pc, #140]	; (403128 <task_afec+0x124>)
  40309a:	fba7 2703 	umull	r2, r7, r7, r3
  40309e:	1bdb      	subs	r3, r3, r7
  4030a0:	eb07 0753 	add.w	r7, r7, r3, lsr #1
  4030a4:	0aff      	lsrs	r7, r7, #11
			printf("valor corrigido = %d \n", valor);
  4030a6:	4639      	mov	r1, r7
  4030a8:	4820      	ldr	r0, [pc, #128]	; (40312c <task_afec+0x128>)
  4030aa:	f8df 809c 	ldr.w	r8, [pc, #156]	; 403148 <task_afec+0x144>
  4030ae:	47c0      	blx	r8
			wheel(valor, &red, &green, &blue);
  4030b0:	ab0c      	add	r3, sp, #48	; 0x30
  4030b2:	aa0d      	add	r2, sp, #52	; 0x34
  4030b4:	a90e      	add	r1, sp, #56	; 0x38
  4030b6:	4638      	mov	r0, r7
  4030b8:	4f1d      	ldr	r7, [pc, #116]	; (403130 <task_afec+0x12c>)
  4030ba:	47b8      	blx	r7
			printf("RED: %d \n", red);
  4030bc:	990e      	ldr	r1, [sp, #56]	; 0x38
  4030be:	481d      	ldr	r0, [pc, #116]	; (403134 <task_afec+0x130>)
  4030c0:	47c0      	blx	r8
			printf("GREEN: %d \n", green);
  4030c2:	990d      	ldr	r1, [sp, #52]	; 0x34
  4030c4:	481c      	ldr	r0, [pc, #112]	; (403138 <task_afec+0x134>)
  4030c6:	47c0      	blx	r8
			printf("BLUE: %d \n", blue);
  4030c8:	990c      	ldr	r1, [sp, #48]	; 0x30
  4030ca:	481c      	ldr	r0, [pc, #112]	; (40313c <task_afec+0x138>)
  4030cc:	47c0      	blx	r8
			rgb.red = red;
  4030ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4030d0:	9309      	str	r3, [sp, #36]	; 0x24
			rgb.green = green;
  4030d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4030d4:	930a      	str	r3, [sp, #40]	; 0x28
			rgb.blue = blue;
  4030d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4030d8:	930b      	str	r3, [sp, #44]	; 0x2c
			xQueueSend(xQueueRGB, &rgb,0);
  4030da:	4623      	mov	r3, r4
  4030dc:	4622      	mov	r2, r4
  4030de:	a909      	add	r1, sp, #36	; 0x24
  4030e0:	4817      	ldr	r0, [pc, #92]	; (403140 <task_afec+0x13c>)
  4030e2:	6800      	ldr	r0, [r0, #0]
  4030e4:	4f17      	ldr	r7, [pc, #92]	; (403144 <task_afec+0x140>)
  4030e6:	47b8      	blx	r7
  4030e8:	e7cb      	b.n	403082 <task_afec+0x7e>
  4030ea:	bf00      	nop
  4030ec:	4003c000 	.word	0x4003c000
  4030f0:	00400449 	.word	0x00400449
  4030f4:	00400279 	.word	0x00400279
  4030f8:	004002c9 	.word	0x004002c9
  4030fc:	004002a9 	.word	0x004002a9
  403100:	00400235 	.word	0x00400235
  403104:	004002b3 	.word	0x004002b3
  403108:	00400265 	.word	0x00400265
  40310c:	00402d65 	.word	0x00402d65
  403110:	004003c9 	.word	0x004003c9
  403114:	e000e100 	.word	0xe000e100
  403118:	447a0000 	.word	0x447a0000
  40311c:	00402cad 	.word	0x00402cad
  403120:	20400d50 	.word	0x20400d50
  403124:	00401ab5 	.word	0x00401ab5
  403128:	00100101 	.word	0x00100101
  40312c:	004063fc 	.word	0x004063fc
  403130:	00402fb5 	.word	0x00402fb5
  403134:	00406414 	.word	0x00406414
  403138:	00406420 	.word	0x00406420
  40313c:	0040642c 	.word	0x0040642c
  403140:	20400d4c 	.word	0x20400d4c
  403144:	004017d1 	.word	0x004017d1
  403148:	0040342d 	.word	0x0040342d

0040314c <PWM_init>:

void PWM_init(Pwm *p_pwm, uint id_pwm, pwm_channel_t *p_channel, uint channel, uint duty){
  40314c:	b570      	push	{r4, r5, r6, lr}
  40314e:	b084      	sub	sp, #16
  403150:	4605      	mov	r5, r0
  403152:	4614      	mov	r4, r2
  403154:	461e      	mov	r6, r3
	
	/* Enable PWM peripheral clock */
	pmc_enable_periph_clk(id_pwm);
  403156:	4608      	mov	r0, r1
  403158:	4b12      	ldr	r3, [pc, #72]	; (4031a4 <PWM_init+0x58>)
  40315a:	4798      	blx	r3

	/* Disable PWM channels for LEDs */
	pwm_channel_disable(p_pwm, channel);
  40315c:	4631      	mov	r1, r6
  40315e:	4628      	mov	r0, r5
  403160:	4b11      	ldr	r3, [pc, #68]	; (4031a8 <PWM_init+0x5c>)
  403162:	4798      	blx	r3

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  403164:	f44f 337a 	mov.w	r3, #256000	; 0x3e800
  403168:	9301      	str	r3, [sp, #4]
  40316a:	2300      	movs	r3, #0
  40316c:	9302      	str	r3, [sp, #8]
  40316e:	4b0f      	ldr	r3, [pc, #60]	; (4031ac <PWM_init+0x60>)
  403170:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000 * 256,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_peripheral_hz()
	};
	
	pwm_init(p_pwm, &clock_setting);
  403172:	a901      	add	r1, sp, #4
  403174:	4628      	mov	r0, r5
  403176:	4b0e      	ldr	r3, [pc, #56]	; (4031b0 <PWM_init+0x64>)
  403178:	4798      	blx	r3

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	p_channel->alignment = PWM_ALIGN_CENTER;
  40317a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40317e:	8123      	strh	r3, [r4, #8]
	/* Output waveform starts at a low level */
	p_channel->polarity = PWM_HIGH;
  403180:	2201      	movs	r2, #1
  403182:	72a2      	strb	r2, [r4, #10]
	/* Use PWM clock A as source clock */
	p_channel->ul_prescaler = PWM_CMR_CPRE_CLKA;
  403184:	220b      	movs	r2, #11
  403186:	6062      	str	r2, [r4, #4]
	/* Period value of output waveform */
	p_channel->ul_period = 256;
  403188:	6123      	str	r3, [r4, #16]
	/* Duty cycle value of output waveform */
	p_channel->ul_duty = duty;
  40318a:	9b08      	ldr	r3, [sp, #32]
  40318c:	60e3      	str	r3, [r4, #12]
	p_channel->channel = channel;
  40318e:	6026      	str	r6, [r4, #0]
	pwm_channel_init(p_pwm, p_channel);
  403190:	4621      	mov	r1, r4
  403192:	4628      	mov	r0, r5
  403194:	4b07      	ldr	r3, [pc, #28]	; (4031b4 <PWM_init+0x68>)
  403196:	4798      	blx	r3
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(p_pwm, channel);
  403198:	4631      	mov	r1, r6
  40319a:	4628      	mov	r0, r5
  40319c:	4b06      	ldr	r3, [pc, #24]	; (4031b8 <PWM_init+0x6c>)
  40319e:	4798      	blx	r3
}
  4031a0:	b004      	add	sp, #16
  4031a2:	bd70      	pop	{r4, r5, r6, pc}
  4031a4:	00400cad 	.word	0x00400cad
  4031a8:	004006d9 	.word	0x004006d9
  4031ac:	08f0d180 	.word	0x08f0d180
  4031b0:	00400501 	.word	0x00400501
  4031b4:	00400545 	.word	0x00400545
  4031b8:	004006cf 	.word	0x004006cf

004031bc <task_led>:
static void task_led(void *pvParameters) {
  4031bc:	b580      	push	{r7, lr}
  4031be:	b086      	sub	sp, #24
	pmc_enable_periph_clk(ID_PIO_PWM_0);
  4031c0:	2010      	movs	r0, #16
  4031c2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 403280 <task_led+0xc4>
  4031c6:	47c0      	blx	r8
	pio_set_peripheral(PIO_PWM_0, PIO_PERIPH_B, MASK_PIN_PWM_0 );
  4031c8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 403284 <task_led+0xc8>
  4031cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4031d0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4031d4:	4648      	mov	r0, r9
  4031d6:	4f20      	ldr	r7, [pc, #128]	; (403258 <task_led+0x9c>)
  4031d8:	47b8      	blx	r7
	PWM_init(PWM0, ID_PWM0,  &pwm_channel_pin, PWM_CHANNEL_0, 0);
  4031da:	4e20      	ldr	r6, [pc, #128]	; (40325c <task_led+0xa0>)
  4031dc:	2400      	movs	r4, #0
  4031de:	9400      	str	r4, [sp, #0]
  4031e0:	4623      	mov	r3, r4
  4031e2:	4a1f      	ldr	r2, [pc, #124]	; (403260 <task_led+0xa4>)
  4031e4:	211f      	movs	r1, #31
  4031e6:	4630      	mov	r0, r6
  4031e8:	4d1e      	ldr	r5, [pc, #120]	; (403264 <task_led+0xa8>)
  4031ea:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_PIOA);
  4031ec:	200a      	movs	r0, #10
  4031ee:	47c0      	blx	r8
	pio_set_peripheral(PIOA, PIO_PERIPH_A, 1 << 2);
  4031f0:	2204      	movs	r2, #4
  4031f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4031f6:	481c      	ldr	r0, [pc, #112]	; (403268 <task_led+0xac>)
  4031f8:	47b8      	blx	r7
	PWM_init(PWM0, ID_PWM0,  &pwm_channel_pa2, PWM_CHANNEL_1, 0);
  4031fa:	9400      	str	r4, [sp, #0]
  4031fc:	2301      	movs	r3, #1
  4031fe:	4a1b      	ldr	r2, [pc, #108]	; (40326c <task_led+0xb0>)
  403200:	211f      	movs	r1, #31
  403202:	4630      	mov	r0, r6
  403204:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_PIOD);
  403206:	2010      	movs	r0, #16
  403208:	47c0      	blx	r8
	pio_set_peripheral(PIOD, PIO_PERIPH_A, 1 << 22);
  40320a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40320e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403212:	4648      	mov	r0, r9
  403214:	47b8      	blx	r7
	PWM_init(PWM0, ID_PWM0,  &pwm_channel_pa3, PWM_CHANNEL_2, 0);
  403216:	9400      	str	r4, [sp, #0]
  403218:	2302      	movs	r3, #2
  40321a:	4a15      	ldr	r2, [pc, #84]	; (403270 <task_led+0xb4>)
  40321c:	211f      	movs	r1, #31
  40321e:	4630      	mov	r0, r6
  403220:	47a8      	blx	r5
		if( xQueueReceive(xQueueRGB, &(rgb), ( TickType_t ) 500 )){		
  403222:	4d14      	ldr	r5, [pc, #80]	; (403274 <task_led+0xb8>)
  403224:	4c14      	ldr	r4, [pc, #80]	; (403278 <task_led+0xbc>)
			pwm_channel_update_duty(PWM0, &pwm_channel_pin, rgb.red);
  403226:	f8df 8038 	ldr.w	r8, [pc, #56]	; 403260 <task_led+0xa4>
		if( xQueueReceive(xQueueRGB, &(rgb), ( TickType_t ) 500 )){		
  40322a:	2300      	movs	r3, #0
  40322c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  403230:	a903      	add	r1, sp, #12
  403232:	6828      	ldr	r0, [r5, #0]
  403234:	47a0      	blx	r4
  403236:	2800      	cmp	r0, #0
  403238:	d0f7      	beq.n	40322a <task_led+0x6e>
			pwm_channel_update_duty(PWM0, &pwm_channel_pin, rgb.red);
  40323a:	4f08      	ldr	r7, [pc, #32]	; (40325c <task_led+0xa0>)
  40323c:	9a03      	ldr	r2, [sp, #12]
  40323e:	4641      	mov	r1, r8
  403240:	4638      	mov	r0, r7
  403242:	4e0e      	ldr	r6, [pc, #56]	; (40327c <task_led+0xc0>)
  403244:	47b0      	blx	r6
			pwm_channel_update_duty(PWM0, &pwm_channel_pa2, rgb.green);
  403246:	9a04      	ldr	r2, [sp, #16]
  403248:	4908      	ldr	r1, [pc, #32]	; (40326c <task_led+0xb0>)
  40324a:	4638      	mov	r0, r7
  40324c:	47b0      	blx	r6
			pwm_channel_update_duty(PWM0, &pwm_channel_pa3, rgb.blue);
  40324e:	9a05      	ldr	r2, [sp, #20]
  403250:	4907      	ldr	r1, [pc, #28]	; (403270 <task_led+0xb4>)
  403252:	4638      	mov	r0, r7
  403254:	47b0      	blx	r6
  403256:	e7e8      	b.n	40322a <task_led+0x6e>
  403258:	00400a3d 	.word	0x00400a3d
  40325c:	40020000 	.word	0x40020000
  403260:	20400c08 	.word	0x20400c08
  403264:	0040314d 	.word	0x0040314d
  403268:	400e0e00 	.word	0x400e0e00
  40326c:	20400b90 	.word	0x20400b90
  403270:	20400bcc 	.word	0x20400bcc
  403274:	20400d4c 	.word	0x20400d4c
  403278:	00401ab5 	.word	0x00401ab5
  40327c:	004006b3 	.word	0x004006b3
  403280:	00400cad 	.word	0x00400cad
  403284:	400e1400 	.word	0x400e1400

00403288 <main>:

/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void) {
  403288:	b500      	push	{lr}
  40328a:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  40328c:	4b37      	ldr	r3, [pc, #220]	; (40336c <main+0xe4>)
  40328e:	4798      	blx	r3
	board_init();
  403290:	4b37      	ldr	r3, [pc, #220]	; (403370 <main+0xe8>)
  403292:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403294:	4d37      	ldr	r5, [pc, #220]	; (403374 <main+0xec>)
  403296:	4b38      	ldr	r3, [pc, #224]	; (403378 <main+0xf0>)
  403298:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40329a:	4a38      	ldr	r2, [pc, #224]	; (40337c <main+0xf4>)
  40329c:	4b38      	ldr	r3, [pc, #224]	; (403380 <main+0xf8>)
  40329e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4032a0:	4a38      	ldr	r2, [pc, #224]	; (403384 <main+0xfc>)
  4032a2:	4b39      	ldr	r3, [pc, #228]	; (403388 <main+0x100>)
  4032a4:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4032a6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4032aa:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4032ac:	23c0      	movs	r3, #192	; 0xc0
  4032ae:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4032b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4032b4:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4032b6:	2400      	movs	r4, #0
  4032b8:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4032ba:	9408      	str	r4, [sp, #32]
  4032bc:	200e      	movs	r0, #14
  4032be:	4b33      	ldr	r3, [pc, #204]	; (40338c <main+0x104>)
  4032c0:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  4032c2:	4a33      	ldr	r2, [pc, #204]	; (403390 <main+0x108>)
  4032c4:	a904      	add	r1, sp, #16
  4032c6:	4628      	mov	r0, r5
  4032c8:	4b32      	ldr	r3, [pc, #200]	; (403394 <main+0x10c>)
  4032ca:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4032cc:	4628      	mov	r0, r5
  4032ce:	4b32      	ldr	r3, [pc, #200]	; (403398 <main+0x110>)
  4032d0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4032d2:	4628      	mov	r0, r5
  4032d4:	4b31      	ldr	r3, [pc, #196]	; (40339c <main+0x114>)
  4032d6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4032d8:	4e31      	ldr	r6, [pc, #196]	; (4033a0 <main+0x118>)
  4032da:	6833      	ldr	r3, [r6, #0]
  4032dc:	4621      	mov	r1, r4
  4032de:	6898      	ldr	r0, [r3, #8]
  4032e0:	4d30      	ldr	r5, [pc, #192]	; (4033a4 <main+0x11c>)
  4032e2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4032e4:	6833      	ldr	r3, [r6, #0]
  4032e6:	4621      	mov	r1, r4
  4032e8:	6858      	ldr	r0, [r3, #4]
  4032ea:	47a8      	blx	r5
	setbuf(stdout, NULL);
  4032ec:	6833      	ldr	r3, [r6, #0]
  4032ee:	4621      	mov	r1, r4
  4032f0:	6898      	ldr	r0, [r3, #8]
  4032f2:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();

	/* Create task to control oled */
	if (xTaskCreate(task_led, "led", TASK_OLED_STACK_SIZE, NULL,
  4032f4:	9403      	str	r4, [sp, #12]
  4032f6:	9402      	str	r4, [sp, #8]
  4032f8:	9401      	str	r4, [sp, #4]
  4032fa:	9400      	str	r4, [sp, #0]
  4032fc:	4623      	mov	r3, r4
  4032fe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403302:	4929      	ldr	r1, [pc, #164]	; (4033a8 <main+0x120>)
  403304:	4829      	ldr	r0, [pc, #164]	; (4033ac <main+0x124>)
  403306:	4c2a      	ldr	r4, [pc, #168]	; (4033b0 <main+0x128>)
  403308:	47a0      	blx	r4
  40330a:	2801      	cmp	r0, #1
  40330c:	d002      	beq.n	403314 <main+0x8c>
	TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create task_led\r\n");
  40330e:	4829      	ldr	r0, [pc, #164]	; (4033b4 <main+0x12c>)
  403310:	4b29      	ldr	r3, [pc, #164]	; (4033b8 <main+0x130>)
  403312:	4798      	blx	r3
	}
	if (xTaskCreate(task_afec, "afec", TASK_OLED_STACK_SIZE, NULL,
  403314:	2300      	movs	r3, #0
  403316:	9303      	str	r3, [sp, #12]
  403318:	9302      	str	r3, [sp, #8]
  40331a:	9301      	str	r3, [sp, #4]
  40331c:	9300      	str	r3, [sp, #0]
  40331e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403322:	4926      	ldr	r1, [pc, #152]	; (4033bc <main+0x134>)
  403324:	4826      	ldr	r0, [pc, #152]	; (4033c0 <main+0x138>)
  403326:	4c22      	ldr	r4, [pc, #136]	; (4033b0 <main+0x128>)
  403328:	47a0      	blx	r4
  40332a:	2801      	cmp	r0, #1
  40332c:	d002      	beq.n	403334 <main+0xac>
	TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create task_afec\r\n");
  40332e:	4825      	ldr	r0, [pc, #148]	; (4033c4 <main+0x13c>)
  403330:	4b21      	ldr	r3, [pc, #132]	; (4033b8 <main+0x130>)
  403332:	4798      	blx	r3
	}
	
	xQueueAFEC = xQueueCreate(64, sizeof(int) );
  403334:	2200      	movs	r2, #0
  403336:	2104      	movs	r1, #4
  403338:	2040      	movs	r0, #64	; 0x40
  40333a:	4b23      	ldr	r3, [pc, #140]	; (4033c8 <main+0x140>)
  40333c:	4798      	blx	r3
  40333e:	4b23      	ldr	r3, [pc, #140]	; (4033cc <main+0x144>)
  403340:	6018      	str	r0, [r3, #0]
	 if (xQueueAFEC == NULL)
  403342:	b150      	cbz	r0, 40335a <main+0xd2>
	 printf("falha em criar a fila \n");
	 
	 xQueueRGB = xQueueCreate(200, 3 * sizeof(int) );
  403344:	2200      	movs	r2, #0
  403346:	210c      	movs	r1, #12
  403348:	20c8      	movs	r0, #200	; 0xc8
  40334a:	4b1f      	ldr	r3, [pc, #124]	; (4033c8 <main+0x140>)
  40334c:	4798      	blx	r3
  40334e:	4b20      	ldr	r3, [pc, #128]	; (4033d0 <main+0x148>)
  403350:	6018      	str	r0, [r3, #0]
	 if (xQueueRGB == NULL)
  403352:	b130      	cbz	r0, 403362 <main+0xda>
	 printf("falha em criar a fila \n");
	 
	/* Start the scheduler. */
	vTaskStartScheduler();
  403354:	4b1f      	ldr	r3, [pc, #124]	; (4033d4 <main+0x14c>)
  403356:	4798      	blx	r3
  403358:	e7fe      	b.n	403358 <main+0xd0>
	 printf("falha em criar a fila \n");
  40335a:	481f      	ldr	r0, [pc, #124]	; (4033d8 <main+0x150>)
  40335c:	4b16      	ldr	r3, [pc, #88]	; (4033b8 <main+0x130>)
  40335e:	4798      	blx	r3
  403360:	e7f0      	b.n	403344 <main+0xbc>
	 printf("falha em criar a fila \n");
  403362:	481d      	ldr	r0, [pc, #116]	; (4033d8 <main+0x150>)
  403364:	4b14      	ldr	r3, [pc, #80]	; (4033b8 <main+0x130>)
  403366:	4798      	blx	r3
  403368:	e7f4      	b.n	403354 <main+0xcc>
  40336a:	bf00      	nop
  40336c:	004007a9 	.word	0x004007a9
  403370:	004008a5 	.word	0x004008a5
  403374:	40028000 	.word	0x40028000
  403378:	20400d08 	.word	0x20400d08
  40337c:	00402e71 	.word	0x00402e71
  403380:	20400d04 	.word	0x20400d04
  403384:	00402d95 	.word	0x00402d95
  403388:	20400d00 	.word	0x20400d00
  40338c:	00400cad 	.word	0x00400cad
  403390:	08f0d180 	.word	0x08f0d180
  403394:	00400da9 	.word	0x00400da9
  403398:	00400dfd 	.word	0x00400dfd
  40339c:	00400e03 	.word	0x00400e03
  4033a0:	2040000c 	.word	0x2040000c
  4033a4:	00403be1 	.word	0x00403be1
  4033a8:	0040639c 	.word	0x0040639c
  4033ac:	004031bd 	.word	0x004031bd
  4033b0:	00401d95 	.word	0x00401d95
  4033b4:	004063a0 	.word	0x004063a0
  4033b8:	0040342d 	.word	0x0040342d
  4033bc:	004063bc 	.word	0x004063bc
  4033c0:	00403005 	.word	0x00403005
  4033c4:	004063c4 	.word	0x004063c4
  4033c8:	00401755 	.word	0x00401755
  4033cc:	20400d50 	.word	0x20400d50
  4033d0:	20400d4c 	.word	0x20400d4c
  4033d4:	00401fc9 	.word	0x00401fc9
  4033d8:	004063e4 	.word	0x004063e4

004033dc <__libc_init_array>:
  4033dc:	b570      	push	{r4, r5, r6, lr}
  4033de:	4e0f      	ldr	r6, [pc, #60]	; (40341c <__libc_init_array+0x40>)
  4033e0:	4d0f      	ldr	r5, [pc, #60]	; (403420 <__libc_init_array+0x44>)
  4033e2:	1b76      	subs	r6, r6, r5
  4033e4:	10b6      	asrs	r6, r6, #2
  4033e6:	bf18      	it	ne
  4033e8:	2400      	movne	r4, #0
  4033ea:	d005      	beq.n	4033f8 <__libc_init_array+0x1c>
  4033ec:	3401      	adds	r4, #1
  4033ee:	f855 3b04 	ldr.w	r3, [r5], #4
  4033f2:	4798      	blx	r3
  4033f4:	42a6      	cmp	r6, r4
  4033f6:	d1f9      	bne.n	4033ec <__libc_init_array+0x10>
  4033f8:	4e0a      	ldr	r6, [pc, #40]	; (403424 <__libc_init_array+0x48>)
  4033fa:	4d0b      	ldr	r5, [pc, #44]	; (403428 <__libc_init_array+0x4c>)
  4033fc:	1b76      	subs	r6, r6, r5
  4033fe:	f003 f8db 	bl	4065b8 <_init>
  403402:	10b6      	asrs	r6, r6, #2
  403404:	bf18      	it	ne
  403406:	2400      	movne	r4, #0
  403408:	d006      	beq.n	403418 <__libc_init_array+0x3c>
  40340a:	3401      	adds	r4, #1
  40340c:	f855 3b04 	ldr.w	r3, [r5], #4
  403410:	4798      	blx	r3
  403412:	42a6      	cmp	r6, r4
  403414:	d1f9      	bne.n	40340a <__libc_init_array+0x2e>
  403416:	bd70      	pop	{r4, r5, r6, pc}
  403418:	bd70      	pop	{r4, r5, r6, pc}
  40341a:	bf00      	nop
  40341c:	004065c4 	.word	0x004065c4
  403420:	004065c4 	.word	0x004065c4
  403424:	004065cc 	.word	0x004065cc
  403428:	004065c4 	.word	0x004065c4

0040342c <iprintf>:
  40342c:	b40f      	push	{r0, r1, r2, r3}
  40342e:	b500      	push	{lr}
  403430:	4907      	ldr	r1, [pc, #28]	; (403450 <iprintf+0x24>)
  403432:	b083      	sub	sp, #12
  403434:	ab04      	add	r3, sp, #16
  403436:	6808      	ldr	r0, [r1, #0]
  403438:	f853 2b04 	ldr.w	r2, [r3], #4
  40343c:	6881      	ldr	r1, [r0, #8]
  40343e:	9301      	str	r3, [sp, #4]
  403440:	f000 fd4c 	bl	403edc <_vfiprintf_r>
  403444:	b003      	add	sp, #12
  403446:	f85d eb04 	ldr.w	lr, [sp], #4
  40344a:	b004      	add	sp, #16
  40344c:	4770      	bx	lr
  40344e:	bf00      	nop
  403450:	2040000c 	.word	0x2040000c

00403454 <malloc>:
  403454:	4b02      	ldr	r3, [pc, #8]	; (403460 <malloc+0xc>)
  403456:	4601      	mov	r1, r0
  403458:	6818      	ldr	r0, [r3, #0]
  40345a:	f000 b80b 	b.w	403474 <_malloc_r>
  40345e:	bf00      	nop
  403460:	2040000c 	.word	0x2040000c

00403464 <free>:
  403464:	4b02      	ldr	r3, [pc, #8]	; (403470 <free+0xc>)
  403466:	4601      	mov	r1, r0
  403468:	6818      	ldr	r0, [r3, #0]
  40346a:	f001 be53 	b.w	405114 <_free_r>
  40346e:	bf00      	nop
  403470:	2040000c 	.word	0x2040000c

00403474 <_malloc_r>:
  403474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403478:	f101 060b 	add.w	r6, r1, #11
  40347c:	2e16      	cmp	r6, #22
  40347e:	b083      	sub	sp, #12
  403480:	4605      	mov	r5, r0
  403482:	f240 809e 	bls.w	4035c2 <_malloc_r+0x14e>
  403486:	f036 0607 	bics.w	r6, r6, #7
  40348a:	f100 80bd 	bmi.w	403608 <_malloc_r+0x194>
  40348e:	42b1      	cmp	r1, r6
  403490:	f200 80ba 	bhi.w	403608 <_malloc_r+0x194>
  403494:	f000 fb86 	bl	403ba4 <__malloc_lock>
  403498:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40349c:	f0c0 8293 	bcc.w	4039c6 <_malloc_r+0x552>
  4034a0:	0a73      	lsrs	r3, r6, #9
  4034a2:	f000 80b8 	beq.w	403616 <_malloc_r+0x1a2>
  4034a6:	2b04      	cmp	r3, #4
  4034a8:	f200 8179 	bhi.w	40379e <_malloc_r+0x32a>
  4034ac:	09b3      	lsrs	r3, r6, #6
  4034ae:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4034b2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4034b6:	00c3      	lsls	r3, r0, #3
  4034b8:	4fbf      	ldr	r7, [pc, #764]	; (4037b8 <_malloc_r+0x344>)
  4034ba:	443b      	add	r3, r7
  4034bc:	f1a3 0108 	sub.w	r1, r3, #8
  4034c0:	685c      	ldr	r4, [r3, #4]
  4034c2:	42a1      	cmp	r1, r4
  4034c4:	d106      	bne.n	4034d4 <_malloc_r+0x60>
  4034c6:	e00c      	b.n	4034e2 <_malloc_r+0x6e>
  4034c8:	2a00      	cmp	r2, #0
  4034ca:	f280 80aa 	bge.w	403622 <_malloc_r+0x1ae>
  4034ce:	68e4      	ldr	r4, [r4, #12]
  4034d0:	42a1      	cmp	r1, r4
  4034d2:	d006      	beq.n	4034e2 <_malloc_r+0x6e>
  4034d4:	6863      	ldr	r3, [r4, #4]
  4034d6:	f023 0303 	bic.w	r3, r3, #3
  4034da:	1b9a      	subs	r2, r3, r6
  4034dc:	2a0f      	cmp	r2, #15
  4034de:	ddf3      	ble.n	4034c8 <_malloc_r+0x54>
  4034e0:	4670      	mov	r0, lr
  4034e2:	693c      	ldr	r4, [r7, #16]
  4034e4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4037cc <_malloc_r+0x358>
  4034e8:	4574      	cmp	r4, lr
  4034ea:	f000 81ab 	beq.w	403844 <_malloc_r+0x3d0>
  4034ee:	6863      	ldr	r3, [r4, #4]
  4034f0:	f023 0303 	bic.w	r3, r3, #3
  4034f4:	1b9a      	subs	r2, r3, r6
  4034f6:	2a0f      	cmp	r2, #15
  4034f8:	f300 8190 	bgt.w	40381c <_malloc_r+0x3a8>
  4034fc:	2a00      	cmp	r2, #0
  4034fe:	f8c7 e014 	str.w	lr, [r7, #20]
  403502:	f8c7 e010 	str.w	lr, [r7, #16]
  403506:	f280 809d 	bge.w	403644 <_malloc_r+0x1d0>
  40350a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40350e:	f080 8161 	bcs.w	4037d4 <_malloc_r+0x360>
  403512:	08db      	lsrs	r3, r3, #3
  403514:	f103 0c01 	add.w	ip, r3, #1
  403518:	1099      	asrs	r1, r3, #2
  40351a:	687a      	ldr	r2, [r7, #4]
  40351c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403520:	f8c4 8008 	str.w	r8, [r4, #8]
  403524:	2301      	movs	r3, #1
  403526:	408b      	lsls	r3, r1
  403528:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40352c:	4313      	orrs	r3, r2
  40352e:	3908      	subs	r1, #8
  403530:	60e1      	str	r1, [r4, #12]
  403532:	607b      	str	r3, [r7, #4]
  403534:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403538:	f8c8 400c 	str.w	r4, [r8, #12]
  40353c:	1082      	asrs	r2, r0, #2
  40353e:	2401      	movs	r4, #1
  403540:	4094      	lsls	r4, r2
  403542:	429c      	cmp	r4, r3
  403544:	f200 808b 	bhi.w	40365e <_malloc_r+0x1ea>
  403548:	421c      	tst	r4, r3
  40354a:	d106      	bne.n	40355a <_malloc_r+0xe6>
  40354c:	f020 0003 	bic.w	r0, r0, #3
  403550:	0064      	lsls	r4, r4, #1
  403552:	421c      	tst	r4, r3
  403554:	f100 0004 	add.w	r0, r0, #4
  403558:	d0fa      	beq.n	403550 <_malloc_r+0xdc>
  40355a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40355e:	46cc      	mov	ip, r9
  403560:	4680      	mov	r8, r0
  403562:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403566:	459c      	cmp	ip, r3
  403568:	d107      	bne.n	40357a <_malloc_r+0x106>
  40356a:	e16d      	b.n	403848 <_malloc_r+0x3d4>
  40356c:	2a00      	cmp	r2, #0
  40356e:	f280 817b 	bge.w	403868 <_malloc_r+0x3f4>
  403572:	68db      	ldr	r3, [r3, #12]
  403574:	459c      	cmp	ip, r3
  403576:	f000 8167 	beq.w	403848 <_malloc_r+0x3d4>
  40357a:	6859      	ldr	r1, [r3, #4]
  40357c:	f021 0103 	bic.w	r1, r1, #3
  403580:	1b8a      	subs	r2, r1, r6
  403582:	2a0f      	cmp	r2, #15
  403584:	ddf2      	ble.n	40356c <_malloc_r+0xf8>
  403586:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40358a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40358e:	9300      	str	r3, [sp, #0]
  403590:	199c      	adds	r4, r3, r6
  403592:	4628      	mov	r0, r5
  403594:	f046 0601 	orr.w	r6, r6, #1
  403598:	f042 0501 	orr.w	r5, r2, #1
  40359c:	605e      	str	r6, [r3, #4]
  40359e:	f8c8 c00c 	str.w	ip, [r8, #12]
  4035a2:	f8cc 8008 	str.w	r8, [ip, #8]
  4035a6:	617c      	str	r4, [r7, #20]
  4035a8:	613c      	str	r4, [r7, #16]
  4035aa:	f8c4 e00c 	str.w	lr, [r4, #12]
  4035ae:	f8c4 e008 	str.w	lr, [r4, #8]
  4035b2:	6065      	str	r5, [r4, #4]
  4035b4:	505a      	str	r2, [r3, r1]
  4035b6:	f000 fafb 	bl	403bb0 <__malloc_unlock>
  4035ba:	9b00      	ldr	r3, [sp, #0]
  4035bc:	f103 0408 	add.w	r4, r3, #8
  4035c0:	e01e      	b.n	403600 <_malloc_r+0x18c>
  4035c2:	2910      	cmp	r1, #16
  4035c4:	d820      	bhi.n	403608 <_malloc_r+0x194>
  4035c6:	f000 faed 	bl	403ba4 <__malloc_lock>
  4035ca:	2610      	movs	r6, #16
  4035cc:	2318      	movs	r3, #24
  4035ce:	2002      	movs	r0, #2
  4035d0:	4f79      	ldr	r7, [pc, #484]	; (4037b8 <_malloc_r+0x344>)
  4035d2:	443b      	add	r3, r7
  4035d4:	f1a3 0208 	sub.w	r2, r3, #8
  4035d8:	685c      	ldr	r4, [r3, #4]
  4035da:	4294      	cmp	r4, r2
  4035dc:	f000 813d 	beq.w	40385a <_malloc_r+0x3e6>
  4035e0:	6863      	ldr	r3, [r4, #4]
  4035e2:	68e1      	ldr	r1, [r4, #12]
  4035e4:	68a6      	ldr	r6, [r4, #8]
  4035e6:	f023 0303 	bic.w	r3, r3, #3
  4035ea:	4423      	add	r3, r4
  4035ec:	4628      	mov	r0, r5
  4035ee:	685a      	ldr	r2, [r3, #4]
  4035f0:	60f1      	str	r1, [r6, #12]
  4035f2:	f042 0201 	orr.w	r2, r2, #1
  4035f6:	608e      	str	r6, [r1, #8]
  4035f8:	605a      	str	r2, [r3, #4]
  4035fa:	f000 fad9 	bl	403bb0 <__malloc_unlock>
  4035fe:	3408      	adds	r4, #8
  403600:	4620      	mov	r0, r4
  403602:	b003      	add	sp, #12
  403604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403608:	2400      	movs	r4, #0
  40360a:	230c      	movs	r3, #12
  40360c:	4620      	mov	r0, r4
  40360e:	602b      	str	r3, [r5, #0]
  403610:	b003      	add	sp, #12
  403612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403616:	2040      	movs	r0, #64	; 0x40
  403618:	f44f 7300 	mov.w	r3, #512	; 0x200
  40361c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403620:	e74a      	b.n	4034b8 <_malloc_r+0x44>
  403622:	4423      	add	r3, r4
  403624:	68e1      	ldr	r1, [r4, #12]
  403626:	685a      	ldr	r2, [r3, #4]
  403628:	68a6      	ldr	r6, [r4, #8]
  40362a:	f042 0201 	orr.w	r2, r2, #1
  40362e:	60f1      	str	r1, [r6, #12]
  403630:	4628      	mov	r0, r5
  403632:	608e      	str	r6, [r1, #8]
  403634:	605a      	str	r2, [r3, #4]
  403636:	f000 fabb 	bl	403bb0 <__malloc_unlock>
  40363a:	3408      	adds	r4, #8
  40363c:	4620      	mov	r0, r4
  40363e:	b003      	add	sp, #12
  403640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403644:	4423      	add	r3, r4
  403646:	4628      	mov	r0, r5
  403648:	685a      	ldr	r2, [r3, #4]
  40364a:	f042 0201 	orr.w	r2, r2, #1
  40364e:	605a      	str	r2, [r3, #4]
  403650:	f000 faae 	bl	403bb0 <__malloc_unlock>
  403654:	3408      	adds	r4, #8
  403656:	4620      	mov	r0, r4
  403658:	b003      	add	sp, #12
  40365a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40365e:	68bc      	ldr	r4, [r7, #8]
  403660:	6863      	ldr	r3, [r4, #4]
  403662:	f023 0803 	bic.w	r8, r3, #3
  403666:	45b0      	cmp	r8, r6
  403668:	d304      	bcc.n	403674 <_malloc_r+0x200>
  40366a:	eba8 0306 	sub.w	r3, r8, r6
  40366e:	2b0f      	cmp	r3, #15
  403670:	f300 8085 	bgt.w	40377e <_malloc_r+0x30a>
  403674:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4037d0 <_malloc_r+0x35c>
  403678:	4b50      	ldr	r3, [pc, #320]	; (4037bc <_malloc_r+0x348>)
  40367a:	f8d9 2000 	ldr.w	r2, [r9]
  40367e:	681b      	ldr	r3, [r3, #0]
  403680:	3201      	adds	r2, #1
  403682:	4433      	add	r3, r6
  403684:	eb04 0a08 	add.w	sl, r4, r8
  403688:	f000 8155 	beq.w	403936 <_malloc_r+0x4c2>
  40368c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403690:	330f      	adds	r3, #15
  403692:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403696:	f02b 0b0f 	bic.w	fp, fp, #15
  40369a:	4659      	mov	r1, fp
  40369c:	4628      	mov	r0, r5
  40369e:	f000 fa8d 	bl	403bbc <_sbrk_r>
  4036a2:	1c41      	adds	r1, r0, #1
  4036a4:	4602      	mov	r2, r0
  4036a6:	f000 80fc 	beq.w	4038a2 <_malloc_r+0x42e>
  4036aa:	4582      	cmp	sl, r0
  4036ac:	f200 80f7 	bhi.w	40389e <_malloc_r+0x42a>
  4036b0:	4b43      	ldr	r3, [pc, #268]	; (4037c0 <_malloc_r+0x34c>)
  4036b2:	6819      	ldr	r1, [r3, #0]
  4036b4:	4459      	add	r1, fp
  4036b6:	6019      	str	r1, [r3, #0]
  4036b8:	f000 814d 	beq.w	403956 <_malloc_r+0x4e2>
  4036bc:	f8d9 0000 	ldr.w	r0, [r9]
  4036c0:	3001      	adds	r0, #1
  4036c2:	bf1b      	ittet	ne
  4036c4:	eba2 0a0a 	subne.w	sl, r2, sl
  4036c8:	4451      	addne	r1, sl
  4036ca:	f8c9 2000 	streq.w	r2, [r9]
  4036ce:	6019      	strne	r1, [r3, #0]
  4036d0:	f012 0107 	ands.w	r1, r2, #7
  4036d4:	f000 8115 	beq.w	403902 <_malloc_r+0x48e>
  4036d8:	f1c1 0008 	rsb	r0, r1, #8
  4036dc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4036e0:	4402      	add	r2, r0
  4036e2:	3108      	adds	r1, #8
  4036e4:	eb02 090b 	add.w	r9, r2, fp
  4036e8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4036ec:	eba1 0909 	sub.w	r9, r1, r9
  4036f0:	4649      	mov	r1, r9
  4036f2:	4628      	mov	r0, r5
  4036f4:	9301      	str	r3, [sp, #4]
  4036f6:	9200      	str	r2, [sp, #0]
  4036f8:	f000 fa60 	bl	403bbc <_sbrk_r>
  4036fc:	1c43      	adds	r3, r0, #1
  4036fe:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403702:	f000 8143 	beq.w	40398c <_malloc_r+0x518>
  403706:	1a80      	subs	r0, r0, r2
  403708:	4448      	add	r0, r9
  40370a:	f040 0001 	orr.w	r0, r0, #1
  40370e:	6819      	ldr	r1, [r3, #0]
  403710:	60ba      	str	r2, [r7, #8]
  403712:	4449      	add	r1, r9
  403714:	42bc      	cmp	r4, r7
  403716:	6050      	str	r0, [r2, #4]
  403718:	6019      	str	r1, [r3, #0]
  40371a:	d017      	beq.n	40374c <_malloc_r+0x2d8>
  40371c:	f1b8 0f0f 	cmp.w	r8, #15
  403720:	f240 80fb 	bls.w	40391a <_malloc_r+0x4a6>
  403724:	6860      	ldr	r0, [r4, #4]
  403726:	f1a8 020c 	sub.w	r2, r8, #12
  40372a:	f022 0207 	bic.w	r2, r2, #7
  40372e:	eb04 0e02 	add.w	lr, r4, r2
  403732:	f000 0001 	and.w	r0, r0, #1
  403736:	f04f 0c05 	mov.w	ip, #5
  40373a:	4310      	orrs	r0, r2
  40373c:	2a0f      	cmp	r2, #15
  40373e:	6060      	str	r0, [r4, #4]
  403740:	f8ce c004 	str.w	ip, [lr, #4]
  403744:	f8ce c008 	str.w	ip, [lr, #8]
  403748:	f200 8117 	bhi.w	40397a <_malloc_r+0x506>
  40374c:	4b1d      	ldr	r3, [pc, #116]	; (4037c4 <_malloc_r+0x350>)
  40374e:	68bc      	ldr	r4, [r7, #8]
  403750:	681a      	ldr	r2, [r3, #0]
  403752:	4291      	cmp	r1, r2
  403754:	bf88      	it	hi
  403756:	6019      	strhi	r1, [r3, #0]
  403758:	4b1b      	ldr	r3, [pc, #108]	; (4037c8 <_malloc_r+0x354>)
  40375a:	681a      	ldr	r2, [r3, #0]
  40375c:	4291      	cmp	r1, r2
  40375e:	6862      	ldr	r2, [r4, #4]
  403760:	bf88      	it	hi
  403762:	6019      	strhi	r1, [r3, #0]
  403764:	f022 0203 	bic.w	r2, r2, #3
  403768:	4296      	cmp	r6, r2
  40376a:	eba2 0306 	sub.w	r3, r2, r6
  40376e:	d801      	bhi.n	403774 <_malloc_r+0x300>
  403770:	2b0f      	cmp	r3, #15
  403772:	dc04      	bgt.n	40377e <_malloc_r+0x30a>
  403774:	4628      	mov	r0, r5
  403776:	f000 fa1b 	bl	403bb0 <__malloc_unlock>
  40377a:	2400      	movs	r4, #0
  40377c:	e740      	b.n	403600 <_malloc_r+0x18c>
  40377e:	19a2      	adds	r2, r4, r6
  403780:	f043 0301 	orr.w	r3, r3, #1
  403784:	f046 0601 	orr.w	r6, r6, #1
  403788:	6066      	str	r6, [r4, #4]
  40378a:	4628      	mov	r0, r5
  40378c:	60ba      	str	r2, [r7, #8]
  40378e:	6053      	str	r3, [r2, #4]
  403790:	f000 fa0e 	bl	403bb0 <__malloc_unlock>
  403794:	3408      	adds	r4, #8
  403796:	4620      	mov	r0, r4
  403798:	b003      	add	sp, #12
  40379a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40379e:	2b14      	cmp	r3, #20
  4037a0:	d971      	bls.n	403886 <_malloc_r+0x412>
  4037a2:	2b54      	cmp	r3, #84	; 0x54
  4037a4:	f200 80a3 	bhi.w	4038ee <_malloc_r+0x47a>
  4037a8:	0b33      	lsrs	r3, r6, #12
  4037aa:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4037ae:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4037b2:	00c3      	lsls	r3, r0, #3
  4037b4:	e680      	b.n	4034b8 <_malloc_r+0x44>
  4037b6:	bf00      	nop
  4037b8:	20400438 	.word	0x20400438
  4037bc:	20400c74 	.word	0x20400c74
  4037c0:	20400c44 	.word	0x20400c44
  4037c4:	20400c6c 	.word	0x20400c6c
  4037c8:	20400c70 	.word	0x20400c70
  4037cc:	20400440 	.word	0x20400440
  4037d0:	20400840 	.word	0x20400840
  4037d4:	0a5a      	lsrs	r2, r3, #9
  4037d6:	2a04      	cmp	r2, #4
  4037d8:	d95b      	bls.n	403892 <_malloc_r+0x41e>
  4037da:	2a14      	cmp	r2, #20
  4037dc:	f200 80ae 	bhi.w	40393c <_malloc_r+0x4c8>
  4037e0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4037e4:	00c9      	lsls	r1, r1, #3
  4037e6:	325b      	adds	r2, #91	; 0x5b
  4037e8:	eb07 0c01 	add.w	ip, r7, r1
  4037ec:	5879      	ldr	r1, [r7, r1]
  4037ee:	f1ac 0c08 	sub.w	ip, ip, #8
  4037f2:	458c      	cmp	ip, r1
  4037f4:	f000 8088 	beq.w	403908 <_malloc_r+0x494>
  4037f8:	684a      	ldr	r2, [r1, #4]
  4037fa:	f022 0203 	bic.w	r2, r2, #3
  4037fe:	4293      	cmp	r3, r2
  403800:	d273      	bcs.n	4038ea <_malloc_r+0x476>
  403802:	6889      	ldr	r1, [r1, #8]
  403804:	458c      	cmp	ip, r1
  403806:	d1f7      	bne.n	4037f8 <_malloc_r+0x384>
  403808:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40380c:	687b      	ldr	r3, [r7, #4]
  40380e:	60e2      	str	r2, [r4, #12]
  403810:	f8c4 c008 	str.w	ip, [r4, #8]
  403814:	6094      	str	r4, [r2, #8]
  403816:	f8cc 400c 	str.w	r4, [ip, #12]
  40381a:	e68f      	b.n	40353c <_malloc_r+0xc8>
  40381c:	19a1      	adds	r1, r4, r6
  40381e:	f046 0c01 	orr.w	ip, r6, #1
  403822:	f042 0601 	orr.w	r6, r2, #1
  403826:	f8c4 c004 	str.w	ip, [r4, #4]
  40382a:	4628      	mov	r0, r5
  40382c:	6179      	str	r1, [r7, #20]
  40382e:	6139      	str	r1, [r7, #16]
  403830:	f8c1 e00c 	str.w	lr, [r1, #12]
  403834:	f8c1 e008 	str.w	lr, [r1, #8]
  403838:	604e      	str	r6, [r1, #4]
  40383a:	50e2      	str	r2, [r4, r3]
  40383c:	f000 f9b8 	bl	403bb0 <__malloc_unlock>
  403840:	3408      	adds	r4, #8
  403842:	e6dd      	b.n	403600 <_malloc_r+0x18c>
  403844:	687b      	ldr	r3, [r7, #4]
  403846:	e679      	b.n	40353c <_malloc_r+0xc8>
  403848:	f108 0801 	add.w	r8, r8, #1
  40384c:	f018 0f03 	tst.w	r8, #3
  403850:	f10c 0c08 	add.w	ip, ip, #8
  403854:	f47f ae85 	bne.w	403562 <_malloc_r+0xee>
  403858:	e02d      	b.n	4038b6 <_malloc_r+0x442>
  40385a:	68dc      	ldr	r4, [r3, #12]
  40385c:	42a3      	cmp	r3, r4
  40385e:	bf08      	it	eq
  403860:	3002      	addeq	r0, #2
  403862:	f43f ae3e 	beq.w	4034e2 <_malloc_r+0x6e>
  403866:	e6bb      	b.n	4035e0 <_malloc_r+0x16c>
  403868:	4419      	add	r1, r3
  40386a:	461c      	mov	r4, r3
  40386c:	684a      	ldr	r2, [r1, #4]
  40386e:	68db      	ldr	r3, [r3, #12]
  403870:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403874:	f042 0201 	orr.w	r2, r2, #1
  403878:	604a      	str	r2, [r1, #4]
  40387a:	4628      	mov	r0, r5
  40387c:	60f3      	str	r3, [r6, #12]
  40387e:	609e      	str	r6, [r3, #8]
  403880:	f000 f996 	bl	403bb0 <__malloc_unlock>
  403884:	e6bc      	b.n	403600 <_malloc_r+0x18c>
  403886:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40388a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40388e:	00c3      	lsls	r3, r0, #3
  403890:	e612      	b.n	4034b8 <_malloc_r+0x44>
  403892:	099a      	lsrs	r2, r3, #6
  403894:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403898:	00c9      	lsls	r1, r1, #3
  40389a:	3238      	adds	r2, #56	; 0x38
  40389c:	e7a4      	b.n	4037e8 <_malloc_r+0x374>
  40389e:	42bc      	cmp	r4, r7
  4038a0:	d054      	beq.n	40394c <_malloc_r+0x4d8>
  4038a2:	68bc      	ldr	r4, [r7, #8]
  4038a4:	6862      	ldr	r2, [r4, #4]
  4038a6:	f022 0203 	bic.w	r2, r2, #3
  4038aa:	e75d      	b.n	403768 <_malloc_r+0x2f4>
  4038ac:	f859 3908 	ldr.w	r3, [r9], #-8
  4038b0:	4599      	cmp	r9, r3
  4038b2:	f040 8086 	bne.w	4039c2 <_malloc_r+0x54e>
  4038b6:	f010 0f03 	tst.w	r0, #3
  4038ba:	f100 30ff 	add.w	r0, r0, #4294967295
  4038be:	d1f5      	bne.n	4038ac <_malloc_r+0x438>
  4038c0:	687b      	ldr	r3, [r7, #4]
  4038c2:	ea23 0304 	bic.w	r3, r3, r4
  4038c6:	607b      	str	r3, [r7, #4]
  4038c8:	0064      	lsls	r4, r4, #1
  4038ca:	429c      	cmp	r4, r3
  4038cc:	f63f aec7 	bhi.w	40365e <_malloc_r+0x1ea>
  4038d0:	2c00      	cmp	r4, #0
  4038d2:	f43f aec4 	beq.w	40365e <_malloc_r+0x1ea>
  4038d6:	421c      	tst	r4, r3
  4038d8:	4640      	mov	r0, r8
  4038da:	f47f ae3e 	bne.w	40355a <_malloc_r+0xe6>
  4038de:	0064      	lsls	r4, r4, #1
  4038e0:	421c      	tst	r4, r3
  4038e2:	f100 0004 	add.w	r0, r0, #4
  4038e6:	d0fa      	beq.n	4038de <_malloc_r+0x46a>
  4038e8:	e637      	b.n	40355a <_malloc_r+0xe6>
  4038ea:	468c      	mov	ip, r1
  4038ec:	e78c      	b.n	403808 <_malloc_r+0x394>
  4038ee:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4038f2:	d815      	bhi.n	403920 <_malloc_r+0x4ac>
  4038f4:	0bf3      	lsrs	r3, r6, #15
  4038f6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4038fa:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4038fe:	00c3      	lsls	r3, r0, #3
  403900:	e5da      	b.n	4034b8 <_malloc_r+0x44>
  403902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403906:	e6ed      	b.n	4036e4 <_malloc_r+0x270>
  403908:	687b      	ldr	r3, [r7, #4]
  40390a:	1092      	asrs	r2, r2, #2
  40390c:	2101      	movs	r1, #1
  40390e:	fa01 f202 	lsl.w	r2, r1, r2
  403912:	4313      	orrs	r3, r2
  403914:	607b      	str	r3, [r7, #4]
  403916:	4662      	mov	r2, ip
  403918:	e779      	b.n	40380e <_malloc_r+0x39a>
  40391a:	2301      	movs	r3, #1
  40391c:	6053      	str	r3, [r2, #4]
  40391e:	e729      	b.n	403774 <_malloc_r+0x300>
  403920:	f240 5254 	movw	r2, #1364	; 0x554
  403924:	4293      	cmp	r3, r2
  403926:	d822      	bhi.n	40396e <_malloc_r+0x4fa>
  403928:	0cb3      	lsrs	r3, r6, #18
  40392a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40392e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403932:	00c3      	lsls	r3, r0, #3
  403934:	e5c0      	b.n	4034b8 <_malloc_r+0x44>
  403936:	f103 0b10 	add.w	fp, r3, #16
  40393a:	e6ae      	b.n	40369a <_malloc_r+0x226>
  40393c:	2a54      	cmp	r2, #84	; 0x54
  40393e:	d829      	bhi.n	403994 <_malloc_r+0x520>
  403940:	0b1a      	lsrs	r2, r3, #12
  403942:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403946:	00c9      	lsls	r1, r1, #3
  403948:	326e      	adds	r2, #110	; 0x6e
  40394a:	e74d      	b.n	4037e8 <_malloc_r+0x374>
  40394c:	4b20      	ldr	r3, [pc, #128]	; (4039d0 <_malloc_r+0x55c>)
  40394e:	6819      	ldr	r1, [r3, #0]
  403950:	4459      	add	r1, fp
  403952:	6019      	str	r1, [r3, #0]
  403954:	e6b2      	b.n	4036bc <_malloc_r+0x248>
  403956:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40395a:	2800      	cmp	r0, #0
  40395c:	f47f aeae 	bne.w	4036bc <_malloc_r+0x248>
  403960:	eb08 030b 	add.w	r3, r8, fp
  403964:	68ba      	ldr	r2, [r7, #8]
  403966:	f043 0301 	orr.w	r3, r3, #1
  40396a:	6053      	str	r3, [r2, #4]
  40396c:	e6ee      	b.n	40374c <_malloc_r+0x2d8>
  40396e:	207f      	movs	r0, #127	; 0x7f
  403970:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403974:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403978:	e59e      	b.n	4034b8 <_malloc_r+0x44>
  40397a:	f104 0108 	add.w	r1, r4, #8
  40397e:	4628      	mov	r0, r5
  403980:	9300      	str	r3, [sp, #0]
  403982:	f001 fbc7 	bl	405114 <_free_r>
  403986:	9b00      	ldr	r3, [sp, #0]
  403988:	6819      	ldr	r1, [r3, #0]
  40398a:	e6df      	b.n	40374c <_malloc_r+0x2d8>
  40398c:	2001      	movs	r0, #1
  40398e:	f04f 0900 	mov.w	r9, #0
  403992:	e6bc      	b.n	40370e <_malloc_r+0x29a>
  403994:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403998:	d805      	bhi.n	4039a6 <_malloc_r+0x532>
  40399a:	0bda      	lsrs	r2, r3, #15
  40399c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4039a0:	00c9      	lsls	r1, r1, #3
  4039a2:	3277      	adds	r2, #119	; 0x77
  4039a4:	e720      	b.n	4037e8 <_malloc_r+0x374>
  4039a6:	f240 5154 	movw	r1, #1364	; 0x554
  4039aa:	428a      	cmp	r2, r1
  4039ac:	d805      	bhi.n	4039ba <_malloc_r+0x546>
  4039ae:	0c9a      	lsrs	r2, r3, #18
  4039b0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4039b4:	00c9      	lsls	r1, r1, #3
  4039b6:	327c      	adds	r2, #124	; 0x7c
  4039b8:	e716      	b.n	4037e8 <_malloc_r+0x374>
  4039ba:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4039be:	227e      	movs	r2, #126	; 0x7e
  4039c0:	e712      	b.n	4037e8 <_malloc_r+0x374>
  4039c2:	687b      	ldr	r3, [r7, #4]
  4039c4:	e780      	b.n	4038c8 <_malloc_r+0x454>
  4039c6:	08f0      	lsrs	r0, r6, #3
  4039c8:	f106 0308 	add.w	r3, r6, #8
  4039cc:	e600      	b.n	4035d0 <_malloc_r+0x15c>
  4039ce:	bf00      	nop
  4039d0:	20400c44 	.word	0x20400c44

004039d4 <memcpy>:
  4039d4:	4684      	mov	ip, r0
  4039d6:	ea41 0300 	orr.w	r3, r1, r0
  4039da:	f013 0303 	ands.w	r3, r3, #3
  4039de:	d16d      	bne.n	403abc <memcpy+0xe8>
  4039e0:	3a40      	subs	r2, #64	; 0x40
  4039e2:	d341      	bcc.n	403a68 <memcpy+0x94>
  4039e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4039e8:	f840 3b04 	str.w	r3, [r0], #4
  4039ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4039f0:	f840 3b04 	str.w	r3, [r0], #4
  4039f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4039f8:	f840 3b04 	str.w	r3, [r0], #4
  4039fc:	f851 3b04 	ldr.w	r3, [r1], #4
  403a00:	f840 3b04 	str.w	r3, [r0], #4
  403a04:	f851 3b04 	ldr.w	r3, [r1], #4
  403a08:	f840 3b04 	str.w	r3, [r0], #4
  403a0c:	f851 3b04 	ldr.w	r3, [r1], #4
  403a10:	f840 3b04 	str.w	r3, [r0], #4
  403a14:	f851 3b04 	ldr.w	r3, [r1], #4
  403a18:	f840 3b04 	str.w	r3, [r0], #4
  403a1c:	f851 3b04 	ldr.w	r3, [r1], #4
  403a20:	f840 3b04 	str.w	r3, [r0], #4
  403a24:	f851 3b04 	ldr.w	r3, [r1], #4
  403a28:	f840 3b04 	str.w	r3, [r0], #4
  403a2c:	f851 3b04 	ldr.w	r3, [r1], #4
  403a30:	f840 3b04 	str.w	r3, [r0], #4
  403a34:	f851 3b04 	ldr.w	r3, [r1], #4
  403a38:	f840 3b04 	str.w	r3, [r0], #4
  403a3c:	f851 3b04 	ldr.w	r3, [r1], #4
  403a40:	f840 3b04 	str.w	r3, [r0], #4
  403a44:	f851 3b04 	ldr.w	r3, [r1], #4
  403a48:	f840 3b04 	str.w	r3, [r0], #4
  403a4c:	f851 3b04 	ldr.w	r3, [r1], #4
  403a50:	f840 3b04 	str.w	r3, [r0], #4
  403a54:	f851 3b04 	ldr.w	r3, [r1], #4
  403a58:	f840 3b04 	str.w	r3, [r0], #4
  403a5c:	f851 3b04 	ldr.w	r3, [r1], #4
  403a60:	f840 3b04 	str.w	r3, [r0], #4
  403a64:	3a40      	subs	r2, #64	; 0x40
  403a66:	d2bd      	bcs.n	4039e4 <memcpy+0x10>
  403a68:	3230      	adds	r2, #48	; 0x30
  403a6a:	d311      	bcc.n	403a90 <memcpy+0xbc>
  403a6c:	f851 3b04 	ldr.w	r3, [r1], #4
  403a70:	f840 3b04 	str.w	r3, [r0], #4
  403a74:	f851 3b04 	ldr.w	r3, [r1], #4
  403a78:	f840 3b04 	str.w	r3, [r0], #4
  403a7c:	f851 3b04 	ldr.w	r3, [r1], #4
  403a80:	f840 3b04 	str.w	r3, [r0], #4
  403a84:	f851 3b04 	ldr.w	r3, [r1], #4
  403a88:	f840 3b04 	str.w	r3, [r0], #4
  403a8c:	3a10      	subs	r2, #16
  403a8e:	d2ed      	bcs.n	403a6c <memcpy+0x98>
  403a90:	320c      	adds	r2, #12
  403a92:	d305      	bcc.n	403aa0 <memcpy+0xcc>
  403a94:	f851 3b04 	ldr.w	r3, [r1], #4
  403a98:	f840 3b04 	str.w	r3, [r0], #4
  403a9c:	3a04      	subs	r2, #4
  403a9e:	d2f9      	bcs.n	403a94 <memcpy+0xc0>
  403aa0:	3204      	adds	r2, #4
  403aa2:	d008      	beq.n	403ab6 <memcpy+0xe2>
  403aa4:	07d2      	lsls	r2, r2, #31
  403aa6:	bf1c      	itt	ne
  403aa8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403aac:	f800 3b01 	strbne.w	r3, [r0], #1
  403ab0:	d301      	bcc.n	403ab6 <memcpy+0xe2>
  403ab2:	880b      	ldrh	r3, [r1, #0]
  403ab4:	8003      	strh	r3, [r0, #0]
  403ab6:	4660      	mov	r0, ip
  403ab8:	4770      	bx	lr
  403aba:	bf00      	nop
  403abc:	2a08      	cmp	r2, #8
  403abe:	d313      	bcc.n	403ae8 <memcpy+0x114>
  403ac0:	078b      	lsls	r3, r1, #30
  403ac2:	d08d      	beq.n	4039e0 <memcpy+0xc>
  403ac4:	f010 0303 	ands.w	r3, r0, #3
  403ac8:	d08a      	beq.n	4039e0 <memcpy+0xc>
  403aca:	f1c3 0304 	rsb	r3, r3, #4
  403ace:	1ad2      	subs	r2, r2, r3
  403ad0:	07db      	lsls	r3, r3, #31
  403ad2:	bf1c      	itt	ne
  403ad4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403ad8:	f800 3b01 	strbne.w	r3, [r0], #1
  403adc:	d380      	bcc.n	4039e0 <memcpy+0xc>
  403ade:	f831 3b02 	ldrh.w	r3, [r1], #2
  403ae2:	f820 3b02 	strh.w	r3, [r0], #2
  403ae6:	e77b      	b.n	4039e0 <memcpy+0xc>
  403ae8:	3a04      	subs	r2, #4
  403aea:	d3d9      	bcc.n	403aa0 <memcpy+0xcc>
  403aec:	3a01      	subs	r2, #1
  403aee:	f811 3b01 	ldrb.w	r3, [r1], #1
  403af2:	f800 3b01 	strb.w	r3, [r0], #1
  403af6:	d2f9      	bcs.n	403aec <memcpy+0x118>
  403af8:	780b      	ldrb	r3, [r1, #0]
  403afa:	7003      	strb	r3, [r0, #0]
  403afc:	784b      	ldrb	r3, [r1, #1]
  403afe:	7043      	strb	r3, [r0, #1]
  403b00:	788b      	ldrb	r3, [r1, #2]
  403b02:	7083      	strb	r3, [r0, #2]
  403b04:	4660      	mov	r0, ip
  403b06:	4770      	bx	lr

00403b08 <memset>:
  403b08:	b470      	push	{r4, r5, r6}
  403b0a:	0786      	lsls	r6, r0, #30
  403b0c:	d046      	beq.n	403b9c <memset+0x94>
  403b0e:	1e54      	subs	r4, r2, #1
  403b10:	2a00      	cmp	r2, #0
  403b12:	d041      	beq.n	403b98 <memset+0x90>
  403b14:	b2ca      	uxtb	r2, r1
  403b16:	4603      	mov	r3, r0
  403b18:	e002      	b.n	403b20 <memset+0x18>
  403b1a:	f114 34ff 	adds.w	r4, r4, #4294967295
  403b1e:	d33b      	bcc.n	403b98 <memset+0x90>
  403b20:	f803 2b01 	strb.w	r2, [r3], #1
  403b24:	079d      	lsls	r5, r3, #30
  403b26:	d1f8      	bne.n	403b1a <memset+0x12>
  403b28:	2c03      	cmp	r4, #3
  403b2a:	d92e      	bls.n	403b8a <memset+0x82>
  403b2c:	b2cd      	uxtb	r5, r1
  403b2e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403b32:	2c0f      	cmp	r4, #15
  403b34:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403b38:	d919      	bls.n	403b6e <memset+0x66>
  403b3a:	f103 0210 	add.w	r2, r3, #16
  403b3e:	4626      	mov	r6, r4
  403b40:	3e10      	subs	r6, #16
  403b42:	2e0f      	cmp	r6, #15
  403b44:	f842 5c10 	str.w	r5, [r2, #-16]
  403b48:	f842 5c0c 	str.w	r5, [r2, #-12]
  403b4c:	f842 5c08 	str.w	r5, [r2, #-8]
  403b50:	f842 5c04 	str.w	r5, [r2, #-4]
  403b54:	f102 0210 	add.w	r2, r2, #16
  403b58:	d8f2      	bhi.n	403b40 <memset+0x38>
  403b5a:	f1a4 0210 	sub.w	r2, r4, #16
  403b5e:	f022 020f 	bic.w	r2, r2, #15
  403b62:	f004 040f 	and.w	r4, r4, #15
  403b66:	3210      	adds	r2, #16
  403b68:	2c03      	cmp	r4, #3
  403b6a:	4413      	add	r3, r2
  403b6c:	d90d      	bls.n	403b8a <memset+0x82>
  403b6e:	461e      	mov	r6, r3
  403b70:	4622      	mov	r2, r4
  403b72:	3a04      	subs	r2, #4
  403b74:	2a03      	cmp	r2, #3
  403b76:	f846 5b04 	str.w	r5, [r6], #4
  403b7a:	d8fa      	bhi.n	403b72 <memset+0x6a>
  403b7c:	1f22      	subs	r2, r4, #4
  403b7e:	f022 0203 	bic.w	r2, r2, #3
  403b82:	3204      	adds	r2, #4
  403b84:	4413      	add	r3, r2
  403b86:	f004 0403 	and.w	r4, r4, #3
  403b8a:	b12c      	cbz	r4, 403b98 <memset+0x90>
  403b8c:	b2c9      	uxtb	r1, r1
  403b8e:	441c      	add	r4, r3
  403b90:	f803 1b01 	strb.w	r1, [r3], #1
  403b94:	429c      	cmp	r4, r3
  403b96:	d1fb      	bne.n	403b90 <memset+0x88>
  403b98:	bc70      	pop	{r4, r5, r6}
  403b9a:	4770      	bx	lr
  403b9c:	4614      	mov	r4, r2
  403b9e:	4603      	mov	r3, r0
  403ba0:	e7c2      	b.n	403b28 <memset+0x20>
  403ba2:	bf00      	nop

00403ba4 <__malloc_lock>:
  403ba4:	4801      	ldr	r0, [pc, #4]	; (403bac <__malloc_lock+0x8>)
  403ba6:	f001 bd4f 	b.w	405648 <__retarget_lock_acquire_recursive>
  403baa:	bf00      	nop
  403bac:	20400d64 	.word	0x20400d64

00403bb0 <__malloc_unlock>:
  403bb0:	4801      	ldr	r0, [pc, #4]	; (403bb8 <__malloc_unlock+0x8>)
  403bb2:	f001 bd4b 	b.w	40564c <__retarget_lock_release_recursive>
  403bb6:	bf00      	nop
  403bb8:	20400d64 	.word	0x20400d64

00403bbc <_sbrk_r>:
  403bbc:	b538      	push	{r3, r4, r5, lr}
  403bbe:	4c07      	ldr	r4, [pc, #28]	; (403bdc <_sbrk_r+0x20>)
  403bc0:	2300      	movs	r3, #0
  403bc2:	4605      	mov	r5, r0
  403bc4:	4608      	mov	r0, r1
  403bc6:	6023      	str	r3, [r4, #0]
  403bc8:	f7fd fa66 	bl	401098 <_sbrk>
  403bcc:	1c43      	adds	r3, r0, #1
  403bce:	d000      	beq.n	403bd2 <_sbrk_r+0x16>
  403bd0:	bd38      	pop	{r3, r4, r5, pc}
  403bd2:	6823      	ldr	r3, [r4, #0]
  403bd4:	2b00      	cmp	r3, #0
  403bd6:	d0fb      	beq.n	403bd0 <_sbrk_r+0x14>
  403bd8:	602b      	str	r3, [r5, #0]
  403bda:	bd38      	pop	{r3, r4, r5, pc}
  403bdc:	20400d78 	.word	0x20400d78

00403be0 <setbuf>:
  403be0:	2900      	cmp	r1, #0
  403be2:	bf0c      	ite	eq
  403be4:	2202      	moveq	r2, #2
  403be6:	2200      	movne	r2, #0
  403be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403bec:	f000 b800 	b.w	403bf0 <setvbuf>

00403bf0 <setvbuf>:
  403bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403bf4:	4c61      	ldr	r4, [pc, #388]	; (403d7c <setvbuf+0x18c>)
  403bf6:	6825      	ldr	r5, [r4, #0]
  403bf8:	b083      	sub	sp, #12
  403bfa:	4604      	mov	r4, r0
  403bfc:	460f      	mov	r7, r1
  403bfe:	4690      	mov	r8, r2
  403c00:	461e      	mov	r6, r3
  403c02:	b115      	cbz	r5, 403c0a <setvbuf+0x1a>
  403c04:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403c06:	2b00      	cmp	r3, #0
  403c08:	d064      	beq.n	403cd4 <setvbuf+0xe4>
  403c0a:	f1b8 0f02 	cmp.w	r8, #2
  403c0e:	d006      	beq.n	403c1e <setvbuf+0x2e>
  403c10:	f1b8 0f01 	cmp.w	r8, #1
  403c14:	f200 809f 	bhi.w	403d56 <setvbuf+0x166>
  403c18:	2e00      	cmp	r6, #0
  403c1a:	f2c0 809c 	blt.w	403d56 <setvbuf+0x166>
  403c1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403c20:	07d8      	lsls	r0, r3, #31
  403c22:	d534      	bpl.n	403c8e <setvbuf+0x9e>
  403c24:	4621      	mov	r1, r4
  403c26:	4628      	mov	r0, r5
  403c28:	f001 f8f6 	bl	404e18 <_fflush_r>
  403c2c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403c2e:	b141      	cbz	r1, 403c42 <setvbuf+0x52>
  403c30:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403c34:	4299      	cmp	r1, r3
  403c36:	d002      	beq.n	403c3e <setvbuf+0x4e>
  403c38:	4628      	mov	r0, r5
  403c3a:	f001 fa6b 	bl	405114 <_free_r>
  403c3e:	2300      	movs	r3, #0
  403c40:	6323      	str	r3, [r4, #48]	; 0x30
  403c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c46:	2200      	movs	r2, #0
  403c48:	61a2      	str	r2, [r4, #24]
  403c4a:	6062      	str	r2, [r4, #4]
  403c4c:	061a      	lsls	r2, r3, #24
  403c4e:	d43a      	bmi.n	403cc6 <setvbuf+0xd6>
  403c50:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403c54:	f023 0303 	bic.w	r3, r3, #3
  403c58:	f1b8 0f02 	cmp.w	r8, #2
  403c5c:	81a3      	strh	r3, [r4, #12]
  403c5e:	d01d      	beq.n	403c9c <setvbuf+0xac>
  403c60:	ab01      	add	r3, sp, #4
  403c62:	466a      	mov	r2, sp
  403c64:	4621      	mov	r1, r4
  403c66:	4628      	mov	r0, r5
  403c68:	f001 fcf2 	bl	405650 <__swhatbuf_r>
  403c6c:	89a3      	ldrh	r3, [r4, #12]
  403c6e:	4318      	orrs	r0, r3
  403c70:	81a0      	strh	r0, [r4, #12]
  403c72:	2e00      	cmp	r6, #0
  403c74:	d132      	bne.n	403cdc <setvbuf+0xec>
  403c76:	9e00      	ldr	r6, [sp, #0]
  403c78:	4630      	mov	r0, r6
  403c7a:	f7ff fbeb 	bl	403454 <malloc>
  403c7e:	4607      	mov	r7, r0
  403c80:	2800      	cmp	r0, #0
  403c82:	d06b      	beq.n	403d5c <setvbuf+0x16c>
  403c84:	89a3      	ldrh	r3, [r4, #12]
  403c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403c8a:	81a3      	strh	r3, [r4, #12]
  403c8c:	e028      	b.n	403ce0 <setvbuf+0xf0>
  403c8e:	89a3      	ldrh	r3, [r4, #12]
  403c90:	0599      	lsls	r1, r3, #22
  403c92:	d4c7      	bmi.n	403c24 <setvbuf+0x34>
  403c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403c96:	f001 fcd7 	bl	405648 <__retarget_lock_acquire_recursive>
  403c9a:	e7c3      	b.n	403c24 <setvbuf+0x34>
  403c9c:	2500      	movs	r5, #0
  403c9e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403ca0:	2600      	movs	r6, #0
  403ca2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403ca6:	f043 0302 	orr.w	r3, r3, #2
  403caa:	2001      	movs	r0, #1
  403cac:	60a6      	str	r6, [r4, #8]
  403cae:	07ce      	lsls	r6, r1, #31
  403cb0:	81a3      	strh	r3, [r4, #12]
  403cb2:	6022      	str	r2, [r4, #0]
  403cb4:	6122      	str	r2, [r4, #16]
  403cb6:	6160      	str	r0, [r4, #20]
  403cb8:	d401      	bmi.n	403cbe <setvbuf+0xce>
  403cba:	0598      	lsls	r0, r3, #22
  403cbc:	d53e      	bpl.n	403d3c <setvbuf+0x14c>
  403cbe:	4628      	mov	r0, r5
  403cc0:	b003      	add	sp, #12
  403cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403cc6:	6921      	ldr	r1, [r4, #16]
  403cc8:	4628      	mov	r0, r5
  403cca:	f001 fa23 	bl	405114 <_free_r>
  403cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403cd2:	e7bd      	b.n	403c50 <setvbuf+0x60>
  403cd4:	4628      	mov	r0, r5
  403cd6:	f001 f8f7 	bl	404ec8 <__sinit>
  403cda:	e796      	b.n	403c0a <setvbuf+0x1a>
  403cdc:	2f00      	cmp	r7, #0
  403cde:	d0cb      	beq.n	403c78 <setvbuf+0x88>
  403ce0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403ce2:	2b00      	cmp	r3, #0
  403ce4:	d033      	beq.n	403d4e <setvbuf+0x15e>
  403ce6:	9b00      	ldr	r3, [sp, #0]
  403ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403cec:	6027      	str	r7, [r4, #0]
  403cee:	429e      	cmp	r6, r3
  403cf0:	bf1c      	itt	ne
  403cf2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  403cf6:	81a2      	strhne	r2, [r4, #12]
  403cf8:	f1b8 0f01 	cmp.w	r8, #1
  403cfc:	bf04      	itt	eq
  403cfe:	f042 0201 	orreq.w	r2, r2, #1
  403d02:	81a2      	strheq	r2, [r4, #12]
  403d04:	b292      	uxth	r2, r2
  403d06:	f012 0308 	ands.w	r3, r2, #8
  403d0a:	6127      	str	r7, [r4, #16]
  403d0c:	6166      	str	r6, [r4, #20]
  403d0e:	d00e      	beq.n	403d2e <setvbuf+0x13e>
  403d10:	07d1      	lsls	r1, r2, #31
  403d12:	d51a      	bpl.n	403d4a <setvbuf+0x15a>
  403d14:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403d16:	4276      	negs	r6, r6
  403d18:	2300      	movs	r3, #0
  403d1a:	f015 0501 	ands.w	r5, r5, #1
  403d1e:	61a6      	str	r6, [r4, #24]
  403d20:	60a3      	str	r3, [r4, #8]
  403d22:	d009      	beq.n	403d38 <setvbuf+0x148>
  403d24:	2500      	movs	r5, #0
  403d26:	4628      	mov	r0, r5
  403d28:	b003      	add	sp, #12
  403d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403d2e:	60a3      	str	r3, [r4, #8]
  403d30:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403d32:	f015 0501 	ands.w	r5, r5, #1
  403d36:	d1f5      	bne.n	403d24 <setvbuf+0x134>
  403d38:	0593      	lsls	r3, r2, #22
  403d3a:	d4c0      	bmi.n	403cbe <setvbuf+0xce>
  403d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403d3e:	f001 fc85 	bl	40564c <__retarget_lock_release_recursive>
  403d42:	4628      	mov	r0, r5
  403d44:	b003      	add	sp, #12
  403d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403d4a:	60a6      	str	r6, [r4, #8]
  403d4c:	e7f0      	b.n	403d30 <setvbuf+0x140>
  403d4e:	4628      	mov	r0, r5
  403d50:	f001 f8ba 	bl	404ec8 <__sinit>
  403d54:	e7c7      	b.n	403ce6 <setvbuf+0xf6>
  403d56:	f04f 35ff 	mov.w	r5, #4294967295
  403d5a:	e7b0      	b.n	403cbe <setvbuf+0xce>
  403d5c:	f8dd 9000 	ldr.w	r9, [sp]
  403d60:	45b1      	cmp	r9, r6
  403d62:	d004      	beq.n	403d6e <setvbuf+0x17e>
  403d64:	4648      	mov	r0, r9
  403d66:	f7ff fb75 	bl	403454 <malloc>
  403d6a:	4607      	mov	r7, r0
  403d6c:	b920      	cbnz	r0, 403d78 <setvbuf+0x188>
  403d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403d72:	f04f 35ff 	mov.w	r5, #4294967295
  403d76:	e792      	b.n	403c9e <setvbuf+0xae>
  403d78:	464e      	mov	r6, r9
  403d7a:	e783      	b.n	403c84 <setvbuf+0x94>
  403d7c:	2040000c 	.word	0x2040000c

00403d80 <strlen>:
  403d80:	f890 f000 	pld	[r0]
  403d84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403d88:	f020 0107 	bic.w	r1, r0, #7
  403d8c:	f06f 0c00 	mvn.w	ip, #0
  403d90:	f010 0407 	ands.w	r4, r0, #7
  403d94:	f891 f020 	pld	[r1, #32]
  403d98:	f040 8049 	bne.w	403e2e <strlen+0xae>
  403d9c:	f04f 0400 	mov.w	r4, #0
  403da0:	f06f 0007 	mvn.w	r0, #7
  403da4:	e9d1 2300 	ldrd	r2, r3, [r1]
  403da8:	f891 f040 	pld	[r1, #64]	; 0x40
  403dac:	f100 0008 	add.w	r0, r0, #8
  403db0:	fa82 f24c 	uadd8	r2, r2, ip
  403db4:	faa4 f28c 	sel	r2, r4, ip
  403db8:	fa83 f34c 	uadd8	r3, r3, ip
  403dbc:	faa2 f38c 	sel	r3, r2, ip
  403dc0:	bb4b      	cbnz	r3, 403e16 <strlen+0x96>
  403dc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403dc6:	fa82 f24c 	uadd8	r2, r2, ip
  403dca:	f100 0008 	add.w	r0, r0, #8
  403dce:	faa4 f28c 	sel	r2, r4, ip
  403dd2:	fa83 f34c 	uadd8	r3, r3, ip
  403dd6:	faa2 f38c 	sel	r3, r2, ip
  403dda:	b9e3      	cbnz	r3, 403e16 <strlen+0x96>
  403ddc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403de0:	fa82 f24c 	uadd8	r2, r2, ip
  403de4:	f100 0008 	add.w	r0, r0, #8
  403de8:	faa4 f28c 	sel	r2, r4, ip
  403dec:	fa83 f34c 	uadd8	r3, r3, ip
  403df0:	faa2 f38c 	sel	r3, r2, ip
  403df4:	b97b      	cbnz	r3, 403e16 <strlen+0x96>
  403df6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403dfa:	f101 0120 	add.w	r1, r1, #32
  403dfe:	fa82 f24c 	uadd8	r2, r2, ip
  403e02:	f100 0008 	add.w	r0, r0, #8
  403e06:	faa4 f28c 	sel	r2, r4, ip
  403e0a:	fa83 f34c 	uadd8	r3, r3, ip
  403e0e:	faa2 f38c 	sel	r3, r2, ip
  403e12:	2b00      	cmp	r3, #0
  403e14:	d0c6      	beq.n	403da4 <strlen+0x24>
  403e16:	2a00      	cmp	r2, #0
  403e18:	bf04      	itt	eq
  403e1a:	3004      	addeq	r0, #4
  403e1c:	461a      	moveq	r2, r3
  403e1e:	ba12      	rev	r2, r2
  403e20:	fab2 f282 	clz	r2, r2
  403e24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403e28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403e2c:	4770      	bx	lr
  403e2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403e32:	f004 0503 	and.w	r5, r4, #3
  403e36:	f1c4 0000 	rsb	r0, r4, #0
  403e3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403e3e:	f014 0f04 	tst.w	r4, #4
  403e42:	f891 f040 	pld	[r1, #64]	; 0x40
  403e46:	fa0c f505 	lsl.w	r5, ip, r5
  403e4a:	ea62 0205 	orn	r2, r2, r5
  403e4e:	bf1c      	itt	ne
  403e50:	ea63 0305 	ornne	r3, r3, r5
  403e54:	4662      	movne	r2, ip
  403e56:	f04f 0400 	mov.w	r4, #0
  403e5a:	e7a9      	b.n	403db0 <strlen+0x30>

00403e5c <__sprint_r.part.0>:
  403e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e60:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  403e62:	049c      	lsls	r4, r3, #18
  403e64:	4693      	mov	fp, r2
  403e66:	d52f      	bpl.n	403ec8 <__sprint_r.part.0+0x6c>
  403e68:	6893      	ldr	r3, [r2, #8]
  403e6a:	6812      	ldr	r2, [r2, #0]
  403e6c:	b353      	cbz	r3, 403ec4 <__sprint_r.part.0+0x68>
  403e6e:	460e      	mov	r6, r1
  403e70:	4607      	mov	r7, r0
  403e72:	f102 0908 	add.w	r9, r2, #8
  403e76:	e919 0420 	ldmdb	r9, {r5, sl}
  403e7a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  403e7e:	d017      	beq.n	403eb0 <__sprint_r.part.0+0x54>
  403e80:	3d04      	subs	r5, #4
  403e82:	2400      	movs	r4, #0
  403e84:	e001      	b.n	403e8a <__sprint_r.part.0+0x2e>
  403e86:	45a0      	cmp	r8, r4
  403e88:	d010      	beq.n	403eac <__sprint_r.part.0+0x50>
  403e8a:	4632      	mov	r2, r6
  403e8c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  403e90:	4638      	mov	r0, r7
  403e92:	f001 f8bb 	bl	40500c <_fputwc_r>
  403e96:	1c43      	adds	r3, r0, #1
  403e98:	f104 0401 	add.w	r4, r4, #1
  403e9c:	d1f3      	bne.n	403e86 <__sprint_r.part.0+0x2a>
  403e9e:	2300      	movs	r3, #0
  403ea0:	f8cb 3008 	str.w	r3, [fp, #8]
  403ea4:	f8cb 3004 	str.w	r3, [fp, #4]
  403ea8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403eac:	f8db 3008 	ldr.w	r3, [fp, #8]
  403eb0:	f02a 0a03 	bic.w	sl, sl, #3
  403eb4:	eba3 030a 	sub.w	r3, r3, sl
  403eb8:	f8cb 3008 	str.w	r3, [fp, #8]
  403ebc:	f109 0908 	add.w	r9, r9, #8
  403ec0:	2b00      	cmp	r3, #0
  403ec2:	d1d8      	bne.n	403e76 <__sprint_r.part.0+0x1a>
  403ec4:	2000      	movs	r0, #0
  403ec6:	e7ea      	b.n	403e9e <__sprint_r.part.0+0x42>
  403ec8:	f001 fa0a 	bl	4052e0 <__sfvwrite_r>
  403ecc:	2300      	movs	r3, #0
  403ece:	f8cb 3008 	str.w	r3, [fp, #8]
  403ed2:	f8cb 3004 	str.w	r3, [fp, #4]
  403ed6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403eda:	bf00      	nop

00403edc <_vfiprintf_r>:
  403edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ee0:	b0ad      	sub	sp, #180	; 0xb4
  403ee2:	461d      	mov	r5, r3
  403ee4:	468b      	mov	fp, r1
  403ee6:	4690      	mov	r8, r2
  403ee8:	9307      	str	r3, [sp, #28]
  403eea:	9006      	str	r0, [sp, #24]
  403eec:	b118      	cbz	r0, 403ef6 <_vfiprintf_r+0x1a>
  403eee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403ef0:	2b00      	cmp	r3, #0
  403ef2:	f000 80f3 	beq.w	4040dc <_vfiprintf_r+0x200>
  403ef6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403efa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  403efe:	07df      	lsls	r7, r3, #31
  403f00:	b281      	uxth	r1, r0
  403f02:	d402      	bmi.n	403f0a <_vfiprintf_r+0x2e>
  403f04:	058e      	lsls	r6, r1, #22
  403f06:	f140 80fc 	bpl.w	404102 <_vfiprintf_r+0x226>
  403f0a:	048c      	lsls	r4, r1, #18
  403f0c:	d40a      	bmi.n	403f24 <_vfiprintf_r+0x48>
  403f0e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403f12:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  403f16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  403f1a:	f8ab 100c 	strh.w	r1, [fp, #12]
  403f1e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  403f22:	b289      	uxth	r1, r1
  403f24:	0708      	lsls	r0, r1, #28
  403f26:	f140 80b3 	bpl.w	404090 <_vfiprintf_r+0x1b4>
  403f2a:	f8db 3010 	ldr.w	r3, [fp, #16]
  403f2e:	2b00      	cmp	r3, #0
  403f30:	f000 80ae 	beq.w	404090 <_vfiprintf_r+0x1b4>
  403f34:	f001 031a 	and.w	r3, r1, #26
  403f38:	2b0a      	cmp	r3, #10
  403f3a:	f000 80b5 	beq.w	4040a8 <_vfiprintf_r+0x1cc>
  403f3e:	2300      	movs	r3, #0
  403f40:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  403f44:	930b      	str	r3, [sp, #44]	; 0x2c
  403f46:	9311      	str	r3, [sp, #68]	; 0x44
  403f48:	9310      	str	r3, [sp, #64]	; 0x40
  403f4a:	9303      	str	r3, [sp, #12]
  403f4c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  403f50:	46ca      	mov	sl, r9
  403f52:	f8cd b010 	str.w	fp, [sp, #16]
  403f56:	f898 3000 	ldrb.w	r3, [r8]
  403f5a:	4644      	mov	r4, r8
  403f5c:	b1fb      	cbz	r3, 403f9e <_vfiprintf_r+0xc2>
  403f5e:	2b25      	cmp	r3, #37	; 0x25
  403f60:	d102      	bne.n	403f68 <_vfiprintf_r+0x8c>
  403f62:	e01c      	b.n	403f9e <_vfiprintf_r+0xc2>
  403f64:	2b25      	cmp	r3, #37	; 0x25
  403f66:	d003      	beq.n	403f70 <_vfiprintf_r+0x94>
  403f68:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403f6c:	2b00      	cmp	r3, #0
  403f6e:	d1f9      	bne.n	403f64 <_vfiprintf_r+0x88>
  403f70:	eba4 0508 	sub.w	r5, r4, r8
  403f74:	b19d      	cbz	r5, 403f9e <_vfiprintf_r+0xc2>
  403f76:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403f78:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403f7a:	f8ca 8000 	str.w	r8, [sl]
  403f7e:	3301      	adds	r3, #1
  403f80:	442a      	add	r2, r5
  403f82:	2b07      	cmp	r3, #7
  403f84:	f8ca 5004 	str.w	r5, [sl, #4]
  403f88:	9211      	str	r2, [sp, #68]	; 0x44
  403f8a:	9310      	str	r3, [sp, #64]	; 0x40
  403f8c:	dd7a      	ble.n	404084 <_vfiprintf_r+0x1a8>
  403f8e:	2a00      	cmp	r2, #0
  403f90:	f040 84b0 	bne.w	4048f4 <_vfiprintf_r+0xa18>
  403f94:	9b03      	ldr	r3, [sp, #12]
  403f96:	9210      	str	r2, [sp, #64]	; 0x40
  403f98:	442b      	add	r3, r5
  403f9a:	46ca      	mov	sl, r9
  403f9c:	9303      	str	r3, [sp, #12]
  403f9e:	7823      	ldrb	r3, [r4, #0]
  403fa0:	2b00      	cmp	r3, #0
  403fa2:	f000 83e0 	beq.w	404766 <_vfiprintf_r+0x88a>
  403fa6:	2000      	movs	r0, #0
  403fa8:	f04f 0300 	mov.w	r3, #0
  403fac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  403fb0:	f104 0801 	add.w	r8, r4, #1
  403fb4:	7862      	ldrb	r2, [r4, #1]
  403fb6:	4605      	mov	r5, r0
  403fb8:	4606      	mov	r6, r0
  403fba:	4603      	mov	r3, r0
  403fbc:	f04f 34ff 	mov.w	r4, #4294967295
  403fc0:	f108 0801 	add.w	r8, r8, #1
  403fc4:	f1a2 0120 	sub.w	r1, r2, #32
  403fc8:	2958      	cmp	r1, #88	; 0x58
  403fca:	f200 82de 	bhi.w	40458a <_vfiprintf_r+0x6ae>
  403fce:	e8df f011 	tbh	[pc, r1, lsl #1]
  403fd2:	0221      	.short	0x0221
  403fd4:	02dc02dc 	.word	0x02dc02dc
  403fd8:	02dc0229 	.word	0x02dc0229
  403fdc:	02dc02dc 	.word	0x02dc02dc
  403fe0:	02dc02dc 	.word	0x02dc02dc
  403fe4:	028902dc 	.word	0x028902dc
  403fe8:	02dc0295 	.word	0x02dc0295
  403fec:	02bd00a2 	.word	0x02bd00a2
  403ff0:	019f02dc 	.word	0x019f02dc
  403ff4:	01a401a4 	.word	0x01a401a4
  403ff8:	01a401a4 	.word	0x01a401a4
  403ffc:	01a401a4 	.word	0x01a401a4
  404000:	01a401a4 	.word	0x01a401a4
  404004:	02dc01a4 	.word	0x02dc01a4
  404008:	02dc02dc 	.word	0x02dc02dc
  40400c:	02dc02dc 	.word	0x02dc02dc
  404010:	02dc02dc 	.word	0x02dc02dc
  404014:	02dc02dc 	.word	0x02dc02dc
  404018:	01b202dc 	.word	0x01b202dc
  40401c:	02dc02dc 	.word	0x02dc02dc
  404020:	02dc02dc 	.word	0x02dc02dc
  404024:	02dc02dc 	.word	0x02dc02dc
  404028:	02dc02dc 	.word	0x02dc02dc
  40402c:	02dc02dc 	.word	0x02dc02dc
  404030:	02dc0197 	.word	0x02dc0197
  404034:	02dc02dc 	.word	0x02dc02dc
  404038:	02dc02dc 	.word	0x02dc02dc
  40403c:	02dc019b 	.word	0x02dc019b
  404040:	025302dc 	.word	0x025302dc
  404044:	02dc02dc 	.word	0x02dc02dc
  404048:	02dc02dc 	.word	0x02dc02dc
  40404c:	02dc02dc 	.word	0x02dc02dc
  404050:	02dc02dc 	.word	0x02dc02dc
  404054:	02dc02dc 	.word	0x02dc02dc
  404058:	021b025a 	.word	0x021b025a
  40405c:	02dc02dc 	.word	0x02dc02dc
  404060:	026e02dc 	.word	0x026e02dc
  404064:	02dc021b 	.word	0x02dc021b
  404068:	027302dc 	.word	0x027302dc
  40406c:	01f502dc 	.word	0x01f502dc
  404070:	02090182 	.word	0x02090182
  404074:	02dc02d7 	.word	0x02dc02d7
  404078:	02dc029a 	.word	0x02dc029a
  40407c:	02dc00a7 	.word	0x02dc00a7
  404080:	022e02dc 	.word	0x022e02dc
  404084:	f10a 0a08 	add.w	sl, sl, #8
  404088:	9b03      	ldr	r3, [sp, #12]
  40408a:	442b      	add	r3, r5
  40408c:	9303      	str	r3, [sp, #12]
  40408e:	e786      	b.n	403f9e <_vfiprintf_r+0xc2>
  404090:	4659      	mov	r1, fp
  404092:	9806      	ldr	r0, [sp, #24]
  404094:	f000 fdac 	bl	404bf0 <__swsetup_r>
  404098:	bb18      	cbnz	r0, 4040e2 <_vfiprintf_r+0x206>
  40409a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40409e:	f001 031a 	and.w	r3, r1, #26
  4040a2:	2b0a      	cmp	r3, #10
  4040a4:	f47f af4b 	bne.w	403f3e <_vfiprintf_r+0x62>
  4040a8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4040ac:	2b00      	cmp	r3, #0
  4040ae:	f6ff af46 	blt.w	403f3e <_vfiprintf_r+0x62>
  4040b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4040b6:	07db      	lsls	r3, r3, #31
  4040b8:	d405      	bmi.n	4040c6 <_vfiprintf_r+0x1ea>
  4040ba:	058f      	lsls	r7, r1, #22
  4040bc:	d403      	bmi.n	4040c6 <_vfiprintf_r+0x1ea>
  4040be:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4040c2:	f001 fac3 	bl	40564c <__retarget_lock_release_recursive>
  4040c6:	462b      	mov	r3, r5
  4040c8:	4642      	mov	r2, r8
  4040ca:	4659      	mov	r1, fp
  4040cc:	9806      	ldr	r0, [sp, #24]
  4040ce:	f000 fd4d 	bl	404b6c <__sbprintf>
  4040d2:	9003      	str	r0, [sp, #12]
  4040d4:	9803      	ldr	r0, [sp, #12]
  4040d6:	b02d      	add	sp, #180	; 0xb4
  4040d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040dc:	f000 fef4 	bl	404ec8 <__sinit>
  4040e0:	e709      	b.n	403ef6 <_vfiprintf_r+0x1a>
  4040e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4040e6:	07d9      	lsls	r1, r3, #31
  4040e8:	d404      	bmi.n	4040f4 <_vfiprintf_r+0x218>
  4040ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4040ee:	059a      	lsls	r2, r3, #22
  4040f0:	f140 84aa 	bpl.w	404a48 <_vfiprintf_r+0xb6c>
  4040f4:	f04f 33ff 	mov.w	r3, #4294967295
  4040f8:	9303      	str	r3, [sp, #12]
  4040fa:	9803      	ldr	r0, [sp, #12]
  4040fc:	b02d      	add	sp, #180	; 0xb4
  4040fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404102:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404106:	f001 fa9f 	bl	405648 <__retarget_lock_acquire_recursive>
  40410a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40410e:	b281      	uxth	r1, r0
  404110:	e6fb      	b.n	403f0a <_vfiprintf_r+0x2e>
  404112:	4276      	negs	r6, r6
  404114:	9207      	str	r2, [sp, #28]
  404116:	f043 0304 	orr.w	r3, r3, #4
  40411a:	f898 2000 	ldrb.w	r2, [r8]
  40411e:	e74f      	b.n	403fc0 <_vfiprintf_r+0xe4>
  404120:	9608      	str	r6, [sp, #32]
  404122:	069e      	lsls	r6, r3, #26
  404124:	f100 8450 	bmi.w	4049c8 <_vfiprintf_r+0xaec>
  404128:	9907      	ldr	r1, [sp, #28]
  40412a:	06dd      	lsls	r5, r3, #27
  40412c:	460a      	mov	r2, r1
  40412e:	f100 83ef 	bmi.w	404910 <_vfiprintf_r+0xa34>
  404132:	0658      	lsls	r0, r3, #25
  404134:	f140 83ec 	bpl.w	404910 <_vfiprintf_r+0xa34>
  404138:	880e      	ldrh	r6, [r1, #0]
  40413a:	3104      	adds	r1, #4
  40413c:	2700      	movs	r7, #0
  40413e:	2201      	movs	r2, #1
  404140:	9107      	str	r1, [sp, #28]
  404142:	f04f 0100 	mov.w	r1, #0
  404146:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40414a:	2500      	movs	r5, #0
  40414c:	1c61      	adds	r1, r4, #1
  40414e:	f000 8116 	beq.w	40437e <_vfiprintf_r+0x4a2>
  404152:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404156:	9102      	str	r1, [sp, #8]
  404158:	ea56 0107 	orrs.w	r1, r6, r7
  40415c:	f040 8114 	bne.w	404388 <_vfiprintf_r+0x4ac>
  404160:	2c00      	cmp	r4, #0
  404162:	f040 835c 	bne.w	40481e <_vfiprintf_r+0x942>
  404166:	2a00      	cmp	r2, #0
  404168:	f040 83b7 	bne.w	4048da <_vfiprintf_r+0x9fe>
  40416c:	f013 0301 	ands.w	r3, r3, #1
  404170:	9305      	str	r3, [sp, #20]
  404172:	f000 8457 	beq.w	404a24 <_vfiprintf_r+0xb48>
  404176:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40417a:	2330      	movs	r3, #48	; 0x30
  40417c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404180:	9b05      	ldr	r3, [sp, #20]
  404182:	42a3      	cmp	r3, r4
  404184:	bfb8      	it	lt
  404186:	4623      	movlt	r3, r4
  404188:	9301      	str	r3, [sp, #4]
  40418a:	b10d      	cbz	r5, 404190 <_vfiprintf_r+0x2b4>
  40418c:	3301      	adds	r3, #1
  40418e:	9301      	str	r3, [sp, #4]
  404190:	9b02      	ldr	r3, [sp, #8]
  404192:	f013 0302 	ands.w	r3, r3, #2
  404196:	9309      	str	r3, [sp, #36]	; 0x24
  404198:	d002      	beq.n	4041a0 <_vfiprintf_r+0x2c4>
  40419a:	9b01      	ldr	r3, [sp, #4]
  40419c:	3302      	adds	r3, #2
  40419e:	9301      	str	r3, [sp, #4]
  4041a0:	9b02      	ldr	r3, [sp, #8]
  4041a2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4041a6:	930a      	str	r3, [sp, #40]	; 0x28
  4041a8:	f040 8217 	bne.w	4045da <_vfiprintf_r+0x6fe>
  4041ac:	9b08      	ldr	r3, [sp, #32]
  4041ae:	9a01      	ldr	r2, [sp, #4]
  4041b0:	1a9d      	subs	r5, r3, r2
  4041b2:	2d00      	cmp	r5, #0
  4041b4:	f340 8211 	ble.w	4045da <_vfiprintf_r+0x6fe>
  4041b8:	2d10      	cmp	r5, #16
  4041ba:	f340 8490 	ble.w	404ade <_vfiprintf_r+0xc02>
  4041be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4041c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4041c2:	4ec4      	ldr	r6, [pc, #784]	; (4044d4 <_vfiprintf_r+0x5f8>)
  4041c4:	46d6      	mov	lr, sl
  4041c6:	2710      	movs	r7, #16
  4041c8:	46a2      	mov	sl, r4
  4041ca:	4619      	mov	r1, r3
  4041cc:	9c06      	ldr	r4, [sp, #24]
  4041ce:	e007      	b.n	4041e0 <_vfiprintf_r+0x304>
  4041d0:	f101 0c02 	add.w	ip, r1, #2
  4041d4:	f10e 0e08 	add.w	lr, lr, #8
  4041d8:	4601      	mov	r1, r0
  4041da:	3d10      	subs	r5, #16
  4041dc:	2d10      	cmp	r5, #16
  4041de:	dd11      	ble.n	404204 <_vfiprintf_r+0x328>
  4041e0:	1c48      	adds	r0, r1, #1
  4041e2:	3210      	adds	r2, #16
  4041e4:	2807      	cmp	r0, #7
  4041e6:	9211      	str	r2, [sp, #68]	; 0x44
  4041e8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4041ec:	9010      	str	r0, [sp, #64]	; 0x40
  4041ee:	ddef      	ble.n	4041d0 <_vfiprintf_r+0x2f4>
  4041f0:	2a00      	cmp	r2, #0
  4041f2:	f040 81e4 	bne.w	4045be <_vfiprintf_r+0x6e2>
  4041f6:	3d10      	subs	r5, #16
  4041f8:	2d10      	cmp	r5, #16
  4041fa:	4611      	mov	r1, r2
  4041fc:	f04f 0c01 	mov.w	ip, #1
  404200:	46ce      	mov	lr, r9
  404202:	dced      	bgt.n	4041e0 <_vfiprintf_r+0x304>
  404204:	4654      	mov	r4, sl
  404206:	4661      	mov	r1, ip
  404208:	46f2      	mov	sl, lr
  40420a:	442a      	add	r2, r5
  40420c:	2907      	cmp	r1, #7
  40420e:	9211      	str	r2, [sp, #68]	; 0x44
  404210:	f8ca 6000 	str.w	r6, [sl]
  404214:	f8ca 5004 	str.w	r5, [sl, #4]
  404218:	9110      	str	r1, [sp, #64]	; 0x40
  40421a:	f300 82ec 	bgt.w	4047f6 <_vfiprintf_r+0x91a>
  40421e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404222:	f10a 0a08 	add.w	sl, sl, #8
  404226:	1c48      	adds	r0, r1, #1
  404228:	2d00      	cmp	r5, #0
  40422a:	f040 81de 	bne.w	4045ea <_vfiprintf_r+0x70e>
  40422e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404230:	2b00      	cmp	r3, #0
  404232:	f000 81f8 	beq.w	404626 <_vfiprintf_r+0x74a>
  404236:	3202      	adds	r2, #2
  404238:	a90e      	add	r1, sp, #56	; 0x38
  40423a:	2302      	movs	r3, #2
  40423c:	2807      	cmp	r0, #7
  40423e:	9211      	str	r2, [sp, #68]	; 0x44
  404240:	9010      	str	r0, [sp, #64]	; 0x40
  404242:	e88a 000a 	stmia.w	sl, {r1, r3}
  404246:	f340 81ea 	ble.w	40461e <_vfiprintf_r+0x742>
  40424a:	2a00      	cmp	r2, #0
  40424c:	f040 838c 	bne.w	404968 <_vfiprintf_r+0xa8c>
  404250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404252:	2b80      	cmp	r3, #128	; 0x80
  404254:	f04f 0001 	mov.w	r0, #1
  404258:	4611      	mov	r1, r2
  40425a:	46ca      	mov	sl, r9
  40425c:	f040 81e7 	bne.w	40462e <_vfiprintf_r+0x752>
  404260:	9b08      	ldr	r3, [sp, #32]
  404262:	9d01      	ldr	r5, [sp, #4]
  404264:	1b5e      	subs	r6, r3, r5
  404266:	2e00      	cmp	r6, #0
  404268:	f340 81e1 	ble.w	40462e <_vfiprintf_r+0x752>
  40426c:	2e10      	cmp	r6, #16
  40426e:	4d9a      	ldr	r5, [pc, #616]	; (4044d8 <_vfiprintf_r+0x5fc>)
  404270:	f340 8450 	ble.w	404b14 <_vfiprintf_r+0xc38>
  404274:	46d4      	mov	ip, sl
  404276:	2710      	movs	r7, #16
  404278:	46a2      	mov	sl, r4
  40427a:	9c06      	ldr	r4, [sp, #24]
  40427c:	e007      	b.n	40428e <_vfiprintf_r+0x3b2>
  40427e:	f101 0e02 	add.w	lr, r1, #2
  404282:	f10c 0c08 	add.w	ip, ip, #8
  404286:	4601      	mov	r1, r0
  404288:	3e10      	subs	r6, #16
  40428a:	2e10      	cmp	r6, #16
  40428c:	dd11      	ble.n	4042b2 <_vfiprintf_r+0x3d6>
  40428e:	1c48      	adds	r0, r1, #1
  404290:	3210      	adds	r2, #16
  404292:	2807      	cmp	r0, #7
  404294:	9211      	str	r2, [sp, #68]	; 0x44
  404296:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40429a:	9010      	str	r0, [sp, #64]	; 0x40
  40429c:	ddef      	ble.n	40427e <_vfiprintf_r+0x3a2>
  40429e:	2a00      	cmp	r2, #0
  4042a0:	f040 829d 	bne.w	4047de <_vfiprintf_r+0x902>
  4042a4:	3e10      	subs	r6, #16
  4042a6:	2e10      	cmp	r6, #16
  4042a8:	f04f 0e01 	mov.w	lr, #1
  4042ac:	4611      	mov	r1, r2
  4042ae:	46cc      	mov	ip, r9
  4042b0:	dced      	bgt.n	40428e <_vfiprintf_r+0x3b2>
  4042b2:	4654      	mov	r4, sl
  4042b4:	46e2      	mov	sl, ip
  4042b6:	4432      	add	r2, r6
  4042b8:	f1be 0f07 	cmp.w	lr, #7
  4042bc:	9211      	str	r2, [sp, #68]	; 0x44
  4042be:	e88a 0060 	stmia.w	sl, {r5, r6}
  4042c2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4042c6:	f300 8369 	bgt.w	40499c <_vfiprintf_r+0xac0>
  4042ca:	f10a 0a08 	add.w	sl, sl, #8
  4042ce:	f10e 0001 	add.w	r0, lr, #1
  4042d2:	4671      	mov	r1, lr
  4042d4:	e1ab      	b.n	40462e <_vfiprintf_r+0x752>
  4042d6:	9608      	str	r6, [sp, #32]
  4042d8:	f013 0220 	ands.w	r2, r3, #32
  4042dc:	f040 838c 	bne.w	4049f8 <_vfiprintf_r+0xb1c>
  4042e0:	f013 0110 	ands.w	r1, r3, #16
  4042e4:	f040 831a 	bne.w	40491c <_vfiprintf_r+0xa40>
  4042e8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4042ec:	f000 8316 	beq.w	40491c <_vfiprintf_r+0xa40>
  4042f0:	9807      	ldr	r0, [sp, #28]
  4042f2:	460a      	mov	r2, r1
  4042f4:	4601      	mov	r1, r0
  4042f6:	3104      	adds	r1, #4
  4042f8:	8806      	ldrh	r6, [r0, #0]
  4042fa:	9107      	str	r1, [sp, #28]
  4042fc:	2700      	movs	r7, #0
  4042fe:	e720      	b.n	404142 <_vfiprintf_r+0x266>
  404300:	9608      	str	r6, [sp, #32]
  404302:	f043 0310 	orr.w	r3, r3, #16
  404306:	e7e7      	b.n	4042d8 <_vfiprintf_r+0x3fc>
  404308:	9608      	str	r6, [sp, #32]
  40430a:	f043 0310 	orr.w	r3, r3, #16
  40430e:	e708      	b.n	404122 <_vfiprintf_r+0x246>
  404310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404314:	f898 2000 	ldrb.w	r2, [r8]
  404318:	e652      	b.n	403fc0 <_vfiprintf_r+0xe4>
  40431a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40431e:	2600      	movs	r6, #0
  404320:	f818 2b01 	ldrb.w	r2, [r8], #1
  404324:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404328:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40432c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404330:	2909      	cmp	r1, #9
  404332:	d9f5      	bls.n	404320 <_vfiprintf_r+0x444>
  404334:	e646      	b.n	403fc4 <_vfiprintf_r+0xe8>
  404336:	9608      	str	r6, [sp, #32]
  404338:	2800      	cmp	r0, #0
  40433a:	f040 8408 	bne.w	404b4e <_vfiprintf_r+0xc72>
  40433e:	f043 0310 	orr.w	r3, r3, #16
  404342:	069e      	lsls	r6, r3, #26
  404344:	f100 834c 	bmi.w	4049e0 <_vfiprintf_r+0xb04>
  404348:	06dd      	lsls	r5, r3, #27
  40434a:	f100 82f3 	bmi.w	404934 <_vfiprintf_r+0xa58>
  40434e:	0658      	lsls	r0, r3, #25
  404350:	f140 82f0 	bpl.w	404934 <_vfiprintf_r+0xa58>
  404354:	9d07      	ldr	r5, [sp, #28]
  404356:	f9b5 6000 	ldrsh.w	r6, [r5]
  40435a:	462a      	mov	r2, r5
  40435c:	17f7      	asrs	r7, r6, #31
  40435e:	3204      	adds	r2, #4
  404360:	4630      	mov	r0, r6
  404362:	4639      	mov	r1, r7
  404364:	9207      	str	r2, [sp, #28]
  404366:	2800      	cmp	r0, #0
  404368:	f171 0200 	sbcs.w	r2, r1, #0
  40436c:	f2c0 835d 	blt.w	404a2a <_vfiprintf_r+0xb4e>
  404370:	1c61      	adds	r1, r4, #1
  404372:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404376:	f04f 0201 	mov.w	r2, #1
  40437a:	f47f aeea 	bne.w	404152 <_vfiprintf_r+0x276>
  40437e:	ea56 0107 	orrs.w	r1, r6, r7
  404382:	f000 824d 	beq.w	404820 <_vfiprintf_r+0x944>
  404386:	9302      	str	r3, [sp, #8]
  404388:	2a01      	cmp	r2, #1
  40438a:	f000 828c 	beq.w	4048a6 <_vfiprintf_r+0x9ca>
  40438e:	2a02      	cmp	r2, #2
  404390:	f040 825c 	bne.w	40484c <_vfiprintf_r+0x970>
  404394:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404396:	46cb      	mov	fp, r9
  404398:	0933      	lsrs	r3, r6, #4
  40439a:	f006 010f 	and.w	r1, r6, #15
  40439e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4043a2:	093a      	lsrs	r2, r7, #4
  4043a4:	461e      	mov	r6, r3
  4043a6:	4617      	mov	r7, r2
  4043a8:	5c43      	ldrb	r3, [r0, r1]
  4043aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4043ae:	ea56 0307 	orrs.w	r3, r6, r7
  4043b2:	d1f1      	bne.n	404398 <_vfiprintf_r+0x4bc>
  4043b4:	eba9 030b 	sub.w	r3, r9, fp
  4043b8:	9305      	str	r3, [sp, #20]
  4043ba:	e6e1      	b.n	404180 <_vfiprintf_r+0x2a4>
  4043bc:	2800      	cmp	r0, #0
  4043be:	f040 83c0 	bne.w	404b42 <_vfiprintf_r+0xc66>
  4043c2:	0699      	lsls	r1, r3, #26
  4043c4:	f100 8367 	bmi.w	404a96 <_vfiprintf_r+0xbba>
  4043c8:	06da      	lsls	r2, r3, #27
  4043ca:	f100 80f1 	bmi.w	4045b0 <_vfiprintf_r+0x6d4>
  4043ce:	065b      	lsls	r3, r3, #25
  4043d0:	f140 80ee 	bpl.w	4045b0 <_vfiprintf_r+0x6d4>
  4043d4:	9a07      	ldr	r2, [sp, #28]
  4043d6:	6813      	ldr	r3, [r2, #0]
  4043d8:	3204      	adds	r2, #4
  4043da:	9207      	str	r2, [sp, #28]
  4043dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4043e0:	801a      	strh	r2, [r3, #0]
  4043e2:	e5b8      	b.n	403f56 <_vfiprintf_r+0x7a>
  4043e4:	9807      	ldr	r0, [sp, #28]
  4043e6:	4a3d      	ldr	r2, [pc, #244]	; (4044dc <_vfiprintf_r+0x600>)
  4043e8:	9608      	str	r6, [sp, #32]
  4043ea:	920b      	str	r2, [sp, #44]	; 0x2c
  4043ec:	6806      	ldr	r6, [r0, #0]
  4043ee:	2278      	movs	r2, #120	; 0x78
  4043f0:	2130      	movs	r1, #48	; 0x30
  4043f2:	3004      	adds	r0, #4
  4043f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4043f8:	f043 0302 	orr.w	r3, r3, #2
  4043fc:	9007      	str	r0, [sp, #28]
  4043fe:	2700      	movs	r7, #0
  404400:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404404:	2202      	movs	r2, #2
  404406:	e69c      	b.n	404142 <_vfiprintf_r+0x266>
  404408:	9608      	str	r6, [sp, #32]
  40440a:	2800      	cmp	r0, #0
  40440c:	d099      	beq.n	404342 <_vfiprintf_r+0x466>
  40440e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404412:	e796      	b.n	404342 <_vfiprintf_r+0x466>
  404414:	f898 2000 	ldrb.w	r2, [r8]
  404418:	2d00      	cmp	r5, #0
  40441a:	f47f add1 	bne.w	403fc0 <_vfiprintf_r+0xe4>
  40441e:	2001      	movs	r0, #1
  404420:	2520      	movs	r5, #32
  404422:	e5cd      	b.n	403fc0 <_vfiprintf_r+0xe4>
  404424:	f043 0301 	orr.w	r3, r3, #1
  404428:	f898 2000 	ldrb.w	r2, [r8]
  40442c:	e5c8      	b.n	403fc0 <_vfiprintf_r+0xe4>
  40442e:	9608      	str	r6, [sp, #32]
  404430:	2800      	cmp	r0, #0
  404432:	f040 8393 	bne.w	404b5c <_vfiprintf_r+0xc80>
  404436:	4929      	ldr	r1, [pc, #164]	; (4044dc <_vfiprintf_r+0x600>)
  404438:	910b      	str	r1, [sp, #44]	; 0x2c
  40443a:	069f      	lsls	r7, r3, #26
  40443c:	f100 82e8 	bmi.w	404a10 <_vfiprintf_r+0xb34>
  404440:	9807      	ldr	r0, [sp, #28]
  404442:	06de      	lsls	r6, r3, #27
  404444:	4601      	mov	r1, r0
  404446:	f100 8270 	bmi.w	40492a <_vfiprintf_r+0xa4e>
  40444a:	065d      	lsls	r5, r3, #25
  40444c:	f140 826d 	bpl.w	40492a <_vfiprintf_r+0xa4e>
  404450:	3104      	adds	r1, #4
  404452:	8806      	ldrh	r6, [r0, #0]
  404454:	9107      	str	r1, [sp, #28]
  404456:	2700      	movs	r7, #0
  404458:	07d8      	lsls	r0, r3, #31
  40445a:	f140 8222 	bpl.w	4048a2 <_vfiprintf_r+0x9c6>
  40445e:	ea56 0107 	orrs.w	r1, r6, r7
  404462:	f000 821e 	beq.w	4048a2 <_vfiprintf_r+0x9c6>
  404466:	2130      	movs	r1, #48	; 0x30
  404468:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40446c:	f043 0302 	orr.w	r3, r3, #2
  404470:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404474:	2202      	movs	r2, #2
  404476:	e664      	b.n	404142 <_vfiprintf_r+0x266>
  404478:	9608      	str	r6, [sp, #32]
  40447a:	2800      	cmp	r0, #0
  40447c:	f040 836b 	bne.w	404b56 <_vfiprintf_r+0xc7a>
  404480:	4917      	ldr	r1, [pc, #92]	; (4044e0 <_vfiprintf_r+0x604>)
  404482:	910b      	str	r1, [sp, #44]	; 0x2c
  404484:	e7d9      	b.n	40443a <_vfiprintf_r+0x55e>
  404486:	9907      	ldr	r1, [sp, #28]
  404488:	9608      	str	r6, [sp, #32]
  40448a:	680a      	ldr	r2, [r1, #0]
  40448c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404490:	f04f 0000 	mov.w	r0, #0
  404494:	460a      	mov	r2, r1
  404496:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40449a:	3204      	adds	r2, #4
  40449c:	2001      	movs	r0, #1
  40449e:	9001      	str	r0, [sp, #4]
  4044a0:	9207      	str	r2, [sp, #28]
  4044a2:	9005      	str	r0, [sp, #20]
  4044a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4044a8:	9302      	str	r3, [sp, #8]
  4044aa:	2400      	movs	r4, #0
  4044ac:	e670      	b.n	404190 <_vfiprintf_r+0x2b4>
  4044ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4044b2:	f898 2000 	ldrb.w	r2, [r8]
  4044b6:	e583      	b.n	403fc0 <_vfiprintf_r+0xe4>
  4044b8:	f898 2000 	ldrb.w	r2, [r8]
  4044bc:	2a6c      	cmp	r2, #108	; 0x6c
  4044be:	bf03      	ittte	eq
  4044c0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4044c4:	f043 0320 	orreq.w	r3, r3, #32
  4044c8:	f108 0801 	addeq.w	r8, r8, #1
  4044cc:	f043 0310 	orrne.w	r3, r3, #16
  4044d0:	e576      	b.n	403fc0 <_vfiprintf_r+0xe4>
  4044d2:	bf00      	nop
  4044d4:	00406484 	.word	0x00406484
  4044d8:	00406494 	.word	0x00406494
  4044dc:	00406468 	.word	0x00406468
  4044e0:	00406454 	.word	0x00406454
  4044e4:	9907      	ldr	r1, [sp, #28]
  4044e6:	680e      	ldr	r6, [r1, #0]
  4044e8:	460a      	mov	r2, r1
  4044ea:	2e00      	cmp	r6, #0
  4044ec:	f102 0204 	add.w	r2, r2, #4
  4044f0:	f6ff ae0f 	blt.w	404112 <_vfiprintf_r+0x236>
  4044f4:	9207      	str	r2, [sp, #28]
  4044f6:	f898 2000 	ldrb.w	r2, [r8]
  4044fa:	e561      	b.n	403fc0 <_vfiprintf_r+0xe4>
  4044fc:	f898 2000 	ldrb.w	r2, [r8]
  404500:	2001      	movs	r0, #1
  404502:	252b      	movs	r5, #43	; 0x2b
  404504:	e55c      	b.n	403fc0 <_vfiprintf_r+0xe4>
  404506:	9907      	ldr	r1, [sp, #28]
  404508:	9608      	str	r6, [sp, #32]
  40450a:	f8d1 b000 	ldr.w	fp, [r1]
  40450e:	f04f 0200 	mov.w	r2, #0
  404512:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404516:	1d0e      	adds	r6, r1, #4
  404518:	f1bb 0f00 	cmp.w	fp, #0
  40451c:	f000 82e5 	beq.w	404aea <_vfiprintf_r+0xc0e>
  404520:	1c67      	adds	r7, r4, #1
  404522:	f000 82c4 	beq.w	404aae <_vfiprintf_r+0xbd2>
  404526:	4622      	mov	r2, r4
  404528:	2100      	movs	r1, #0
  40452a:	4658      	mov	r0, fp
  40452c:	9301      	str	r3, [sp, #4]
  40452e:	f001 f91f 	bl	405770 <memchr>
  404532:	9b01      	ldr	r3, [sp, #4]
  404534:	2800      	cmp	r0, #0
  404536:	f000 82e5 	beq.w	404b04 <_vfiprintf_r+0xc28>
  40453a:	eba0 020b 	sub.w	r2, r0, fp
  40453e:	9205      	str	r2, [sp, #20]
  404540:	9607      	str	r6, [sp, #28]
  404542:	9302      	str	r3, [sp, #8]
  404544:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404548:	2400      	movs	r4, #0
  40454a:	e619      	b.n	404180 <_vfiprintf_r+0x2a4>
  40454c:	f898 2000 	ldrb.w	r2, [r8]
  404550:	2a2a      	cmp	r2, #42	; 0x2a
  404552:	f108 0701 	add.w	r7, r8, #1
  404556:	f000 82e9 	beq.w	404b2c <_vfiprintf_r+0xc50>
  40455a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40455e:	2909      	cmp	r1, #9
  404560:	46b8      	mov	r8, r7
  404562:	f04f 0400 	mov.w	r4, #0
  404566:	f63f ad2d 	bhi.w	403fc4 <_vfiprintf_r+0xe8>
  40456a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40456e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404572:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404576:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40457a:	2909      	cmp	r1, #9
  40457c:	d9f5      	bls.n	40456a <_vfiprintf_r+0x68e>
  40457e:	e521      	b.n	403fc4 <_vfiprintf_r+0xe8>
  404580:	f043 0320 	orr.w	r3, r3, #32
  404584:	f898 2000 	ldrb.w	r2, [r8]
  404588:	e51a      	b.n	403fc0 <_vfiprintf_r+0xe4>
  40458a:	9608      	str	r6, [sp, #32]
  40458c:	2800      	cmp	r0, #0
  40458e:	f040 82db 	bne.w	404b48 <_vfiprintf_r+0xc6c>
  404592:	2a00      	cmp	r2, #0
  404594:	f000 80e7 	beq.w	404766 <_vfiprintf_r+0x88a>
  404598:	2101      	movs	r1, #1
  40459a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40459e:	f04f 0200 	mov.w	r2, #0
  4045a2:	9101      	str	r1, [sp, #4]
  4045a4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4045a8:	9105      	str	r1, [sp, #20]
  4045aa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4045ae:	e77b      	b.n	4044a8 <_vfiprintf_r+0x5cc>
  4045b0:	9a07      	ldr	r2, [sp, #28]
  4045b2:	6813      	ldr	r3, [r2, #0]
  4045b4:	3204      	adds	r2, #4
  4045b6:	9207      	str	r2, [sp, #28]
  4045b8:	9a03      	ldr	r2, [sp, #12]
  4045ba:	601a      	str	r2, [r3, #0]
  4045bc:	e4cb      	b.n	403f56 <_vfiprintf_r+0x7a>
  4045be:	aa0f      	add	r2, sp, #60	; 0x3c
  4045c0:	9904      	ldr	r1, [sp, #16]
  4045c2:	4620      	mov	r0, r4
  4045c4:	f7ff fc4a 	bl	403e5c <__sprint_r.part.0>
  4045c8:	2800      	cmp	r0, #0
  4045ca:	f040 8139 	bne.w	404840 <_vfiprintf_r+0x964>
  4045ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4045d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4045d2:	f101 0c01 	add.w	ip, r1, #1
  4045d6:	46ce      	mov	lr, r9
  4045d8:	e5ff      	b.n	4041da <_vfiprintf_r+0x2fe>
  4045da:	9910      	ldr	r1, [sp, #64]	; 0x40
  4045dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4045de:	1c48      	adds	r0, r1, #1
  4045e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4045e4:	2d00      	cmp	r5, #0
  4045e6:	f43f ae22 	beq.w	40422e <_vfiprintf_r+0x352>
  4045ea:	3201      	adds	r2, #1
  4045ec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4045f0:	2101      	movs	r1, #1
  4045f2:	2807      	cmp	r0, #7
  4045f4:	9211      	str	r2, [sp, #68]	; 0x44
  4045f6:	9010      	str	r0, [sp, #64]	; 0x40
  4045f8:	f8ca 5000 	str.w	r5, [sl]
  4045fc:	f8ca 1004 	str.w	r1, [sl, #4]
  404600:	f340 8108 	ble.w	404814 <_vfiprintf_r+0x938>
  404604:	2a00      	cmp	r2, #0
  404606:	f040 81bc 	bne.w	404982 <_vfiprintf_r+0xaa6>
  40460a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40460c:	2b00      	cmp	r3, #0
  40460e:	f43f ae1f 	beq.w	404250 <_vfiprintf_r+0x374>
  404612:	ab0e      	add	r3, sp, #56	; 0x38
  404614:	2202      	movs	r2, #2
  404616:	4608      	mov	r0, r1
  404618:	931c      	str	r3, [sp, #112]	; 0x70
  40461a:	921d      	str	r2, [sp, #116]	; 0x74
  40461c:	46ca      	mov	sl, r9
  40461e:	4601      	mov	r1, r0
  404620:	f10a 0a08 	add.w	sl, sl, #8
  404624:	3001      	adds	r0, #1
  404626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404628:	2b80      	cmp	r3, #128	; 0x80
  40462a:	f43f ae19 	beq.w	404260 <_vfiprintf_r+0x384>
  40462e:	9b05      	ldr	r3, [sp, #20]
  404630:	1ae4      	subs	r4, r4, r3
  404632:	2c00      	cmp	r4, #0
  404634:	dd2e      	ble.n	404694 <_vfiprintf_r+0x7b8>
  404636:	2c10      	cmp	r4, #16
  404638:	4db3      	ldr	r5, [pc, #716]	; (404908 <_vfiprintf_r+0xa2c>)
  40463a:	dd1e      	ble.n	40467a <_vfiprintf_r+0x79e>
  40463c:	46d6      	mov	lr, sl
  40463e:	2610      	movs	r6, #16
  404640:	9f06      	ldr	r7, [sp, #24]
  404642:	f8dd a010 	ldr.w	sl, [sp, #16]
  404646:	e006      	b.n	404656 <_vfiprintf_r+0x77a>
  404648:	1c88      	adds	r0, r1, #2
  40464a:	f10e 0e08 	add.w	lr, lr, #8
  40464e:	4619      	mov	r1, r3
  404650:	3c10      	subs	r4, #16
  404652:	2c10      	cmp	r4, #16
  404654:	dd10      	ble.n	404678 <_vfiprintf_r+0x79c>
  404656:	1c4b      	adds	r3, r1, #1
  404658:	3210      	adds	r2, #16
  40465a:	2b07      	cmp	r3, #7
  40465c:	9211      	str	r2, [sp, #68]	; 0x44
  40465e:	e88e 0060 	stmia.w	lr, {r5, r6}
  404662:	9310      	str	r3, [sp, #64]	; 0x40
  404664:	ddf0      	ble.n	404648 <_vfiprintf_r+0x76c>
  404666:	2a00      	cmp	r2, #0
  404668:	d165      	bne.n	404736 <_vfiprintf_r+0x85a>
  40466a:	3c10      	subs	r4, #16
  40466c:	2c10      	cmp	r4, #16
  40466e:	f04f 0001 	mov.w	r0, #1
  404672:	4611      	mov	r1, r2
  404674:	46ce      	mov	lr, r9
  404676:	dcee      	bgt.n	404656 <_vfiprintf_r+0x77a>
  404678:	46f2      	mov	sl, lr
  40467a:	4422      	add	r2, r4
  40467c:	2807      	cmp	r0, #7
  40467e:	9211      	str	r2, [sp, #68]	; 0x44
  404680:	f8ca 5000 	str.w	r5, [sl]
  404684:	f8ca 4004 	str.w	r4, [sl, #4]
  404688:	9010      	str	r0, [sp, #64]	; 0x40
  40468a:	f300 8085 	bgt.w	404798 <_vfiprintf_r+0x8bc>
  40468e:	f10a 0a08 	add.w	sl, sl, #8
  404692:	3001      	adds	r0, #1
  404694:	9905      	ldr	r1, [sp, #20]
  404696:	f8ca b000 	str.w	fp, [sl]
  40469a:	440a      	add	r2, r1
  40469c:	2807      	cmp	r0, #7
  40469e:	9211      	str	r2, [sp, #68]	; 0x44
  4046a0:	f8ca 1004 	str.w	r1, [sl, #4]
  4046a4:	9010      	str	r0, [sp, #64]	; 0x40
  4046a6:	f340 8082 	ble.w	4047ae <_vfiprintf_r+0x8d2>
  4046aa:	2a00      	cmp	r2, #0
  4046ac:	f040 8118 	bne.w	4048e0 <_vfiprintf_r+0xa04>
  4046b0:	9b02      	ldr	r3, [sp, #8]
  4046b2:	9210      	str	r2, [sp, #64]	; 0x40
  4046b4:	0758      	lsls	r0, r3, #29
  4046b6:	d535      	bpl.n	404724 <_vfiprintf_r+0x848>
  4046b8:	9b08      	ldr	r3, [sp, #32]
  4046ba:	9901      	ldr	r1, [sp, #4]
  4046bc:	1a5c      	subs	r4, r3, r1
  4046be:	2c00      	cmp	r4, #0
  4046c0:	f340 80e7 	ble.w	404892 <_vfiprintf_r+0x9b6>
  4046c4:	46ca      	mov	sl, r9
  4046c6:	2c10      	cmp	r4, #16
  4046c8:	f340 8218 	ble.w	404afc <_vfiprintf_r+0xc20>
  4046cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4046ce:	4e8f      	ldr	r6, [pc, #572]	; (40490c <_vfiprintf_r+0xa30>)
  4046d0:	9f06      	ldr	r7, [sp, #24]
  4046d2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4046d6:	2510      	movs	r5, #16
  4046d8:	e006      	b.n	4046e8 <_vfiprintf_r+0x80c>
  4046da:	1c88      	adds	r0, r1, #2
  4046dc:	f10a 0a08 	add.w	sl, sl, #8
  4046e0:	4619      	mov	r1, r3
  4046e2:	3c10      	subs	r4, #16
  4046e4:	2c10      	cmp	r4, #16
  4046e6:	dd11      	ble.n	40470c <_vfiprintf_r+0x830>
  4046e8:	1c4b      	adds	r3, r1, #1
  4046ea:	3210      	adds	r2, #16
  4046ec:	2b07      	cmp	r3, #7
  4046ee:	9211      	str	r2, [sp, #68]	; 0x44
  4046f0:	f8ca 6000 	str.w	r6, [sl]
  4046f4:	f8ca 5004 	str.w	r5, [sl, #4]
  4046f8:	9310      	str	r3, [sp, #64]	; 0x40
  4046fa:	ddee      	ble.n	4046da <_vfiprintf_r+0x7fe>
  4046fc:	bb42      	cbnz	r2, 404750 <_vfiprintf_r+0x874>
  4046fe:	3c10      	subs	r4, #16
  404700:	2c10      	cmp	r4, #16
  404702:	f04f 0001 	mov.w	r0, #1
  404706:	4611      	mov	r1, r2
  404708:	46ca      	mov	sl, r9
  40470a:	dced      	bgt.n	4046e8 <_vfiprintf_r+0x80c>
  40470c:	4422      	add	r2, r4
  40470e:	2807      	cmp	r0, #7
  404710:	9211      	str	r2, [sp, #68]	; 0x44
  404712:	f8ca 6000 	str.w	r6, [sl]
  404716:	f8ca 4004 	str.w	r4, [sl, #4]
  40471a:	9010      	str	r0, [sp, #64]	; 0x40
  40471c:	dd51      	ble.n	4047c2 <_vfiprintf_r+0x8e6>
  40471e:	2a00      	cmp	r2, #0
  404720:	f040 819b 	bne.w	404a5a <_vfiprintf_r+0xb7e>
  404724:	9b03      	ldr	r3, [sp, #12]
  404726:	9a08      	ldr	r2, [sp, #32]
  404728:	9901      	ldr	r1, [sp, #4]
  40472a:	428a      	cmp	r2, r1
  40472c:	bfac      	ite	ge
  40472e:	189b      	addge	r3, r3, r2
  404730:	185b      	addlt	r3, r3, r1
  404732:	9303      	str	r3, [sp, #12]
  404734:	e04e      	b.n	4047d4 <_vfiprintf_r+0x8f8>
  404736:	aa0f      	add	r2, sp, #60	; 0x3c
  404738:	4651      	mov	r1, sl
  40473a:	4638      	mov	r0, r7
  40473c:	f7ff fb8e 	bl	403e5c <__sprint_r.part.0>
  404740:	2800      	cmp	r0, #0
  404742:	f040 813f 	bne.w	4049c4 <_vfiprintf_r+0xae8>
  404746:	9910      	ldr	r1, [sp, #64]	; 0x40
  404748:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40474a:	1c48      	adds	r0, r1, #1
  40474c:	46ce      	mov	lr, r9
  40474e:	e77f      	b.n	404650 <_vfiprintf_r+0x774>
  404750:	aa0f      	add	r2, sp, #60	; 0x3c
  404752:	4659      	mov	r1, fp
  404754:	4638      	mov	r0, r7
  404756:	f7ff fb81 	bl	403e5c <__sprint_r.part.0>
  40475a:	b960      	cbnz	r0, 404776 <_vfiprintf_r+0x89a>
  40475c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40475e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404760:	1c48      	adds	r0, r1, #1
  404762:	46ca      	mov	sl, r9
  404764:	e7bd      	b.n	4046e2 <_vfiprintf_r+0x806>
  404766:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404768:	f8dd b010 	ldr.w	fp, [sp, #16]
  40476c:	2b00      	cmp	r3, #0
  40476e:	f040 81d4 	bne.w	404b1a <_vfiprintf_r+0xc3e>
  404772:	2300      	movs	r3, #0
  404774:	9310      	str	r3, [sp, #64]	; 0x40
  404776:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40477a:	f013 0f01 	tst.w	r3, #1
  40477e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404782:	d102      	bne.n	40478a <_vfiprintf_r+0x8ae>
  404784:	059a      	lsls	r2, r3, #22
  404786:	f140 80de 	bpl.w	404946 <_vfiprintf_r+0xa6a>
  40478a:	065b      	lsls	r3, r3, #25
  40478c:	f53f acb2 	bmi.w	4040f4 <_vfiprintf_r+0x218>
  404790:	9803      	ldr	r0, [sp, #12]
  404792:	b02d      	add	sp, #180	; 0xb4
  404794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404798:	2a00      	cmp	r2, #0
  40479a:	f040 8106 	bne.w	4049aa <_vfiprintf_r+0xace>
  40479e:	9a05      	ldr	r2, [sp, #20]
  4047a0:	921d      	str	r2, [sp, #116]	; 0x74
  4047a2:	2301      	movs	r3, #1
  4047a4:	9211      	str	r2, [sp, #68]	; 0x44
  4047a6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4047aa:	9310      	str	r3, [sp, #64]	; 0x40
  4047ac:	46ca      	mov	sl, r9
  4047ae:	f10a 0a08 	add.w	sl, sl, #8
  4047b2:	9b02      	ldr	r3, [sp, #8]
  4047b4:	0759      	lsls	r1, r3, #29
  4047b6:	d504      	bpl.n	4047c2 <_vfiprintf_r+0x8e6>
  4047b8:	9b08      	ldr	r3, [sp, #32]
  4047ba:	9901      	ldr	r1, [sp, #4]
  4047bc:	1a5c      	subs	r4, r3, r1
  4047be:	2c00      	cmp	r4, #0
  4047c0:	dc81      	bgt.n	4046c6 <_vfiprintf_r+0x7ea>
  4047c2:	9b03      	ldr	r3, [sp, #12]
  4047c4:	9908      	ldr	r1, [sp, #32]
  4047c6:	9801      	ldr	r0, [sp, #4]
  4047c8:	4281      	cmp	r1, r0
  4047ca:	bfac      	ite	ge
  4047cc:	185b      	addge	r3, r3, r1
  4047ce:	181b      	addlt	r3, r3, r0
  4047d0:	9303      	str	r3, [sp, #12]
  4047d2:	bb72      	cbnz	r2, 404832 <_vfiprintf_r+0x956>
  4047d4:	2300      	movs	r3, #0
  4047d6:	9310      	str	r3, [sp, #64]	; 0x40
  4047d8:	46ca      	mov	sl, r9
  4047da:	f7ff bbbc 	b.w	403f56 <_vfiprintf_r+0x7a>
  4047de:	aa0f      	add	r2, sp, #60	; 0x3c
  4047e0:	9904      	ldr	r1, [sp, #16]
  4047e2:	4620      	mov	r0, r4
  4047e4:	f7ff fb3a 	bl	403e5c <__sprint_r.part.0>
  4047e8:	bb50      	cbnz	r0, 404840 <_vfiprintf_r+0x964>
  4047ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4047ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4047ee:	f101 0e01 	add.w	lr, r1, #1
  4047f2:	46cc      	mov	ip, r9
  4047f4:	e548      	b.n	404288 <_vfiprintf_r+0x3ac>
  4047f6:	2a00      	cmp	r2, #0
  4047f8:	f040 8140 	bne.w	404a7c <_vfiprintf_r+0xba0>
  4047fc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404800:	2900      	cmp	r1, #0
  404802:	f000 811b 	beq.w	404a3c <_vfiprintf_r+0xb60>
  404806:	2201      	movs	r2, #1
  404808:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40480c:	4610      	mov	r0, r2
  40480e:	921d      	str	r2, [sp, #116]	; 0x74
  404810:	911c      	str	r1, [sp, #112]	; 0x70
  404812:	46ca      	mov	sl, r9
  404814:	4601      	mov	r1, r0
  404816:	f10a 0a08 	add.w	sl, sl, #8
  40481a:	3001      	adds	r0, #1
  40481c:	e507      	b.n	40422e <_vfiprintf_r+0x352>
  40481e:	9b02      	ldr	r3, [sp, #8]
  404820:	2a01      	cmp	r2, #1
  404822:	f000 8098 	beq.w	404956 <_vfiprintf_r+0xa7a>
  404826:	2a02      	cmp	r2, #2
  404828:	d10d      	bne.n	404846 <_vfiprintf_r+0x96a>
  40482a:	9302      	str	r3, [sp, #8]
  40482c:	2600      	movs	r6, #0
  40482e:	2700      	movs	r7, #0
  404830:	e5b0      	b.n	404394 <_vfiprintf_r+0x4b8>
  404832:	aa0f      	add	r2, sp, #60	; 0x3c
  404834:	9904      	ldr	r1, [sp, #16]
  404836:	9806      	ldr	r0, [sp, #24]
  404838:	f7ff fb10 	bl	403e5c <__sprint_r.part.0>
  40483c:	2800      	cmp	r0, #0
  40483e:	d0c9      	beq.n	4047d4 <_vfiprintf_r+0x8f8>
  404840:	f8dd b010 	ldr.w	fp, [sp, #16]
  404844:	e797      	b.n	404776 <_vfiprintf_r+0x89a>
  404846:	9302      	str	r3, [sp, #8]
  404848:	2600      	movs	r6, #0
  40484a:	2700      	movs	r7, #0
  40484c:	4649      	mov	r1, r9
  40484e:	e000      	b.n	404852 <_vfiprintf_r+0x976>
  404850:	4659      	mov	r1, fp
  404852:	08f2      	lsrs	r2, r6, #3
  404854:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404858:	08f8      	lsrs	r0, r7, #3
  40485a:	f006 0307 	and.w	r3, r6, #7
  40485e:	4607      	mov	r7, r0
  404860:	4616      	mov	r6, r2
  404862:	3330      	adds	r3, #48	; 0x30
  404864:	ea56 0207 	orrs.w	r2, r6, r7
  404868:	f801 3c01 	strb.w	r3, [r1, #-1]
  40486c:	f101 3bff 	add.w	fp, r1, #4294967295
  404870:	d1ee      	bne.n	404850 <_vfiprintf_r+0x974>
  404872:	9a02      	ldr	r2, [sp, #8]
  404874:	07d6      	lsls	r6, r2, #31
  404876:	f57f ad9d 	bpl.w	4043b4 <_vfiprintf_r+0x4d8>
  40487a:	2b30      	cmp	r3, #48	; 0x30
  40487c:	f43f ad9a 	beq.w	4043b4 <_vfiprintf_r+0x4d8>
  404880:	3902      	subs	r1, #2
  404882:	2330      	movs	r3, #48	; 0x30
  404884:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404888:	eba9 0301 	sub.w	r3, r9, r1
  40488c:	9305      	str	r3, [sp, #20]
  40488e:	468b      	mov	fp, r1
  404890:	e476      	b.n	404180 <_vfiprintf_r+0x2a4>
  404892:	9b03      	ldr	r3, [sp, #12]
  404894:	9a08      	ldr	r2, [sp, #32]
  404896:	428a      	cmp	r2, r1
  404898:	bfac      	ite	ge
  40489a:	189b      	addge	r3, r3, r2
  40489c:	185b      	addlt	r3, r3, r1
  40489e:	9303      	str	r3, [sp, #12]
  4048a0:	e798      	b.n	4047d4 <_vfiprintf_r+0x8f8>
  4048a2:	2202      	movs	r2, #2
  4048a4:	e44d      	b.n	404142 <_vfiprintf_r+0x266>
  4048a6:	2f00      	cmp	r7, #0
  4048a8:	bf08      	it	eq
  4048aa:	2e0a      	cmpeq	r6, #10
  4048ac:	d352      	bcc.n	404954 <_vfiprintf_r+0xa78>
  4048ae:	46cb      	mov	fp, r9
  4048b0:	4630      	mov	r0, r6
  4048b2:	4639      	mov	r1, r7
  4048b4:	220a      	movs	r2, #10
  4048b6:	2300      	movs	r3, #0
  4048b8:	f001 fbc6 	bl	406048 <__aeabi_uldivmod>
  4048bc:	3230      	adds	r2, #48	; 0x30
  4048be:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4048c2:	4630      	mov	r0, r6
  4048c4:	4639      	mov	r1, r7
  4048c6:	2300      	movs	r3, #0
  4048c8:	220a      	movs	r2, #10
  4048ca:	f001 fbbd 	bl	406048 <__aeabi_uldivmod>
  4048ce:	4606      	mov	r6, r0
  4048d0:	460f      	mov	r7, r1
  4048d2:	ea56 0307 	orrs.w	r3, r6, r7
  4048d6:	d1eb      	bne.n	4048b0 <_vfiprintf_r+0x9d4>
  4048d8:	e56c      	b.n	4043b4 <_vfiprintf_r+0x4d8>
  4048da:	9405      	str	r4, [sp, #20]
  4048dc:	46cb      	mov	fp, r9
  4048de:	e44f      	b.n	404180 <_vfiprintf_r+0x2a4>
  4048e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4048e2:	9904      	ldr	r1, [sp, #16]
  4048e4:	9806      	ldr	r0, [sp, #24]
  4048e6:	f7ff fab9 	bl	403e5c <__sprint_r.part.0>
  4048ea:	2800      	cmp	r0, #0
  4048ec:	d1a8      	bne.n	404840 <_vfiprintf_r+0x964>
  4048ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4048f0:	46ca      	mov	sl, r9
  4048f2:	e75e      	b.n	4047b2 <_vfiprintf_r+0x8d6>
  4048f4:	aa0f      	add	r2, sp, #60	; 0x3c
  4048f6:	9904      	ldr	r1, [sp, #16]
  4048f8:	9806      	ldr	r0, [sp, #24]
  4048fa:	f7ff faaf 	bl	403e5c <__sprint_r.part.0>
  4048fe:	2800      	cmp	r0, #0
  404900:	d19e      	bne.n	404840 <_vfiprintf_r+0x964>
  404902:	46ca      	mov	sl, r9
  404904:	f7ff bbc0 	b.w	404088 <_vfiprintf_r+0x1ac>
  404908:	00406494 	.word	0x00406494
  40490c:	00406484 	.word	0x00406484
  404910:	3104      	adds	r1, #4
  404912:	6816      	ldr	r6, [r2, #0]
  404914:	9107      	str	r1, [sp, #28]
  404916:	2201      	movs	r2, #1
  404918:	2700      	movs	r7, #0
  40491a:	e412      	b.n	404142 <_vfiprintf_r+0x266>
  40491c:	9807      	ldr	r0, [sp, #28]
  40491e:	4601      	mov	r1, r0
  404920:	3104      	adds	r1, #4
  404922:	6806      	ldr	r6, [r0, #0]
  404924:	9107      	str	r1, [sp, #28]
  404926:	2700      	movs	r7, #0
  404928:	e40b      	b.n	404142 <_vfiprintf_r+0x266>
  40492a:	680e      	ldr	r6, [r1, #0]
  40492c:	3104      	adds	r1, #4
  40492e:	9107      	str	r1, [sp, #28]
  404930:	2700      	movs	r7, #0
  404932:	e591      	b.n	404458 <_vfiprintf_r+0x57c>
  404934:	9907      	ldr	r1, [sp, #28]
  404936:	680e      	ldr	r6, [r1, #0]
  404938:	460a      	mov	r2, r1
  40493a:	17f7      	asrs	r7, r6, #31
  40493c:	3204      	adds	r2, #4
  40493e:	9207      	str	r2, [sp, #28]
  404940:	4630      	mov	r0, r6
  404942:	4639      	mov	r1, r7
  404944:	e50f      	b.n	404366 <_vfiprintf_r+0x48a>
  404946:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40494a:	f000 fe7f 	bl	40564c <__retarget_lock_release_recursive>
  40494e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404952:	e71a      	b.n	40478a <_vfiprintf_r+0x8ae>
  404954:	9b02      	ldr	r3, [sp, #8]
  404956:	9302      	str	r3, [sp, #8]
  404958:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40495c:	3630      	adds	r6, #48	; 0x30
  40495e:	2301      	movs	r3, #1
  404960:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404964:	9305      	str	r3, [sp, #20]
  404966:	e40b      	b.n	404180 <_vfiprintf_r+0x2a4>
  404968:	aa0f      	add	r2, sp, #60	; 0x3c
  40496a:	9904      	ldr	r1, [sp, #16]
  40496c:	9806      	ldr	r0, [sp, #24]
  40496e:	f7ff fa75 	bl	403e5c <__sprint_r.part.0>
  404972:	2800      	cmp	r0, #0
  404974:	f47f af64 	bne.w	404840 <_vfiprintf_r+0x964>
  404978:	9910      	ldr	r1, [sp, #64]	; 0x40
  40497a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40497c:	1c48      	adds	r0, r1, #1
  40497e:	46ca      	mov	sl, r9
  404980:	e651      	b.n	404626 <_vfiprintf_r+0x74a>
  404982:	aa0f      	add	r2, sp, #60	; 0x3c
  404984:	9904      	ldr	r1, [sp, #16]
  404986:	9806      	ldr	r0, [sp, #24]
  404988:	f7ff fa68 	bl	403e5c <__sprint_r.part.0>
  40498c:	2800      	cmp	r0, #0
  40498e:	f47f af57 	bne.w	404840 <_vfiprintf_r+0x964>
  404992:	9910      	ldr	r1, [sp, #64]	; 0x40
  404994:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404996:	1c48      	adds	r0, r1, #1
  404998:	46ca      	mov	sl, r9
  40499a:	e448      	b.n	40422e <_vfiprintf_r+0x352>
  40499c:	2a00      	cmp	r2, #0
  40499e:	f040 8091 	bne.w	404ac4 <_vfiprintf_r+0xbe8>
  4049a2:	2001      	movs	r0, #1
  4049a4:	4611      	mov	r1, r2
  4049a6:	46ca      	mov	sl, r9
  4049a8:	e641      	b.n	40462e <_vfiprintf_r+0x752>
  4049aa:	aa0f      	add	r2, sp, #60	; 0x3c
  4049ac:	9904      	ldr	r1, [sp, #16]
  4049ae:	9806      	ldr	r0, [sp, #24]
  4049b0:	f7ff fa54 	bl	403e5c <__sprint_r.part.0>
  4049b4:	2800      	cmp	r0, #0
  4049b6:	f47f af43 	bne.w	404840 <_vfiprintf_r+0x964>
  4049ba:	9810      	ldr	r0, [sp, #64]	; 0x40
  4049bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4049be:	3001      	adds	r0, #1
  4049c0:	46ca      	mov	sl, r9
  4049c2:	e667      	b.n	404694 <_vfiprintf_r+0x7b8>
  4049c4:	46d3      	mov	fp, sl
  4049c6:	e6d6      	b.n	404776 <_vfiprintf_r+0x89a>
  4049c8:	9e07      	ldr	r6, [sp, #28]
  4049ca:	3607      	adds	r6, #7
  4049cc:	f026 0207 	bic.w	r2, r6, #7
  4049d0:	f102 0108 	add.w	r1, r2, #8
  4049d4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4049d8:	9107      	str	r1, [sp, #28]
  4049da:	2201      	movs	r2, #1
  4049dc:	f7ff bbb1 	b.w	404142 <_vfiprintf_r+0x266>
  4049e0:	9e07      	ldr	r6, [sp, #28]
  4049e2:	3607      	adds	r6, #7
  4049e4:	f026 0607 	bic.w	r6, r6, #7
  4049e8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4049ec:	f106 0208 	add.w	r2, r6, #8
  4049f0:	9207      	str	r2, [sp, #28]
  4049f2:	4606      	mov	r6, r0
  4049f4:	460f      	mov	r7, r1
  4049f6:	e4b6      	b.n	404366 <_vfiprintf_r+0x48a>
  4049f8:	9e07      	ldr	r6, [sp, #28]
  4049fa:	3607      	adds	r6, #7
  4049fc:	f026 0207 	bic.w	r2, r6, #7
  404a00:	f102 0108 	add.w	r1, r2, #8
  404a04:	e9d2 6700 	ldrd	r6, r7, [r2]
  404a08:	9107      	str	r1, [sp, #28]
  404a0a:	2200      	movs	r2, #0
  404a0c:	f7ff bb99 	b.w	404142 <_vfiprintf_r+0x266>
  404a10:	9e07      	ldr	r6, [sp, #28]
  404a12:	3607      	adds	r6, #7
  404a14:	f026 0107 	bic.w	r1, r6, #7
  404a18:	f101 0008 	add.w	r0, r1, #8
  404a1c:	9007      	str	r0, [sp, #28]
  404a1e:	e9d1 6700 	ldrd	r6, r7, [r1]
  404a22:	e519      	b.n	404458 <_vfiprintf_r+0x57c>
  404a24:	46cb      	mov	fp, r9
  404a26:	f7ff bbab 	b.w	404180 <_vfiprintf_r+0x2a4>
  404a2a:	252d      	movs	r5, #45	; 0x2d
  404a2c:	4276      	negs	r6, r6
  404a2e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  404a32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404a36:	2201      	movs	r2, #1
  404a38:	f7ff bb88 	b.w	40414c <_vfiprintf_r+0x270>
  404a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404a3e:	b9b3      	cbnz	r3, 404a6e <_vfiprintf_r+0xb92>
  404a40:	4611      	mov	r1, r2
  404a42:	2001      	movs	r0, #1
  404a44:	46ca      	mov	sl, r9
  404a46:	e5f2      	b.n	40462e <_vfiprintf_r+0x752>
  404a48:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404a4c:	f000 fdfe 	bl	40564c <__retarget_lock_release_recursive>
  404a50:	f04f 33ff 	mov.w	r3, #4294967295
  404a54:	9303      	str	r3, [sp, #12]
  404a56:	f7ff bb50 	b.w	4040fa <_vfiprintf_r+0x21e>
  404a5a:	aa0f      	add	r2, sp, #60	; 0x3c
  404a5c:	9904      	ldr	r1, [sp, #16]
  404a5e:	9806      	ldr	r0, [sp, #24]
  404a60:	f7ff f9fc 	bl	403e5c <__sprint_r.part.0>
  404a64:	2800      	cmp	r0, #0
  404a66:	f47f aeeb 	bne.w	404840 <_vfiprintf_r+0x964>
  404a6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404a6c:	e6a9      	b.n	4047c2 <_vfiprintf_r+0x8e6>
  404a6e:	ab0e      	add	r3, sp, #56	; 0x38
  404a70:	2202      	movs	r2, #2
  404a72:	931c      	str	r3, [sp, #112]	; 0x70
  404a74:	921d      	str	r2, [sp, #116]	; 0x74
  404a76:	2001      	movs	r0, #1
  404a78:	46ca      	mov	sl, r9
  404a7a:	e5d0      	b.n	40461e <_vfiprintf_r+0x742>
  404a7c:	aa0f      	add	r2, sp, #60	; 0x3c
  404a7e:	9904      	ldr	r1, [sp, #16]
  404a80:	9806      	ldr	r0, [sp, #24]
  404a82:	f7ff f9eb 	bl	403e5c <__sprint_r.part.0>
  404a86:	2800      	cmp	r0, #0
  404a88:	f47f aeda 	bne.w	404840 <_vfiprintf_r+0x964>
  404a8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404a8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404a90:	1c48      	adds	r0, r1, #1
  404a92:	46ca      	mov	sl, r9
  404a94:	e5a4      	b.n	4045e0 <_vfiprintf_r+0x704>
  404a96:	9a07      	ldr	r2, [sp, #28]
  404a98:	9903      	ldr	r1, [sp, #12]
  404a9a:	6813      	ldr	r3, [r2, #0]
  404a9c:	17cd      	asrs	r5, r1, #31
  404a9e:	4608      	mov	r0, r1
  404aa0:	3204      	adds	r2, #4
  404aa2:	4629      	mov	r1, r5
  404aa4:	9207      	str	r2, [sp, #28]
  404aa6:	e9c3 0100 	strd	r0, r1, [r3]
  404aaa:	f7ff ba54 	b.w	403f56 <_vfiprintf_r+0x7a>
  404aae:	4658      	mov	r0, fp
  404ab0:	9607      	str	r6, [sp, #28]
  404ab2:	9302      	str	r3, [sp, #8]
  404ab4:	f7ff f964 	bl	403d80 <strlen>
  404ab8:	2400      	movs	r4, #0
  404aba:	9005      	str	r0, [sp, #20]
  404abc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404ac0:	f7ff bb5e 	b.w	404180 <_vfiprintf_r+0x2a4>
  404ac4:	aa0f      	add	r2, sp, #60	; 0x3c
  404ac6:	9904      	ldr	r1, [sp, #16]
  404ac8:	9806      	ldr	r0, [sp, #24]
  404aca:	f7ff f9c7 	bl	403e5c <__sprint_r.part.0>
  404ace:	2800      	cmp	r0, #0
  404ad0:	f47f aeb6 	bne.w	404840 <_vfiprintf_r+0x964>
  404ad4:	9910      	ldr	r1, [sp, #64]	; 0x40
  404ad6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ad8:	1c48      	adds	r0, r1, #1
  404ada:	46ca      	mov	sl, r9
  404adc:	e5a7      	b.n	40462e <_vfiprintf_r+0x752>
  404ade:	9910      	ldr	r1, [sp, #64]	; 0x40
  404ae0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ae2:	4e20      	ldr	r6, [pc, #128]	; (404b64 <_vfiprintf_r+0xc88>)
  404ae4:	3101      	adds	r1, #1
  404ae6:	f7ff bb90 	b.w	40420a <_vfiprintf_r+0x32e>
  404aea:	2c06      	cmp	r4, #6
  404aec:	bf28      	it	cs
  404aee:	2406      	movcs	r4, #6
  404af0:	9405      	str	r4, [sp, #20]
  404af2:	9607      	str	r6, [sp, #28]
  404af4:	9401      	str	r4, [sp, #4]
  404af6:	f8df b070 	ldr.w	fp, [pc, #112]	; 404b68 <_vfiprintf_r+0xc8c>
  404afa:	e4d5      	b.n	4044a8 <_vfiprintf_r+0x5cc>
  404afc:	9810      	ldr	r0, [sp, #64]	; 0x40
  404afe:	4e19      	ldr	r6, [pc, #100]	; (404b64 <_vfiprintf_r+0xc88>)
  404b00:	3001      	adds	r0, #1
  404b02:	e603      	b.n	40470c <_vfiprintf_r+0x830>
  404b04:	9405      	str	r4, [sp, #20]
  404b06:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404b0a:	9607      	str	r6, [sp, #28]
  404b0c:	9302      	str	r3, [sp, #8]
  404b0e:	4604      	mov	r4, r0
  404b10:	f7ff bb36 	b.w	404180 <_vfiprintf_r+0x2a4>
  404b14:	4686      	mov	lr, r0
  404b16:	f7ff bbce 	b.w	4042b6 <_vfiprintf_r+0x3da>
  404b1a:	9806      	ldr	r0, [sp, #24]
  404b1c:	aa0f      	add	r2, sp, #60	; 0x3c
  404b1e:	4659      	mov	r1, fp
  404b20:	f7ff f99c 	bl	403e5c <__sprint_r.part.0>
  404b24:	2800      	cmp	r0, #0
  404b26:	f43f ae24 	beq.w	404772 <_vfiprintf_r+0x896>
  404b2a:	e624      	b.n	404776 <_vfiprintf_r+0x89a>
  404b2c:	9907      	ldr	r1, [sp, #28]
  404b2e:	f898 2001 	ldrb.w	r2, [r8, #1]
  404b32:	680c      	ldr	r4, [r1, #0]
  404b34:	3104      	adds	r1, #4
  404b36:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  404b3a:	46b8      	mov	r8, r7
  404b3c:	9107      	str	r1, [sp, #28]
  404b3e:	f7ff ba3f 	b.w	403fc0 <_vfiprintf_r+0xe4>
  404b42:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404b46:	e43c      	b.n	4043c2 <_vfiprintf_r+0x4e6>
  404b48:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404b4c:	e521      	b.n	404592 <_vfiprintf_r+0x6b6>
  404b4e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404b52:	f7ff bbf4 	b.w	40433e <_vfiprintf_r+0x462>
  404b56:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404b5a:	e491      	b.n	404480 <_vfiprintf_r+0x5a4>
  404b5c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404b60:	e469      	b.n	404436 <_vfiprintf_r+0x55a>
  404b62:	bf00      	nop
  404b64:	00406484 	.word	0x00406484
  404b68:	0040647c 	.word	0x0040647c

00404b6c <__sbprintf>:
  404b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404b70:	460c      	mov	r4, r1
  404b72:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  404b76:	8989      	ldrh	r1, [r1, #12]
  404b78:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404b7a:	89e5      	ldrh	r5, [r4, #14]
  404b7c:	9619      	str	r6, [sp, #100]	; 0x64
  404b7e:	f021 0102 	bic.w	r1, r1, #2
  404b82:	4606      	mov	r6, r0
  404b84:	69e0      	ldr	r0, [r4, #28]
  404b86:	f8ad 100c 	strh.w	r1, [sp, #12]
  404b8a:	4617      	mov	r7, r2
  404b8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404b90:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404b92:	f8ad 500e 	strh.w	r5, [sp, #14]
  404b96:	4698      	mov	r8, r3
  404b98:	ad1a      	add	r5, sp, #104	; 0x68
  404b9a:	2300      	movs	r3, #0
  404b9c:	9007      	str	r0, [sp, #28]
  404b9e:	a816      	add	r0, sp, #88	; 0x58
  404ba0:	9209      	str	r2, [sp, #36]	; 0x24
  404ba2:	9306      	str	r3, [sp, #24]
  404ba4:	9500      	str	r5, [sp, #0]
  404ba6:	9504      	str	r5, [sp, #16]
  404ba8:	9102      	str	r1, [sp, #8]
  404baa:	9105      	str	r1, [sp, #20]
  404bac:	f000 fd48 	bl	405640 <__retarget_lock_init_recursive>
  404bb0:	4643      	mov	r3, r8
  404bb2:	463a      	mov	r2, r7
  404bb4:	4669      	mov	r1, sp
  404bb6:	4630      	mov	r0, r6
  404bb8:	f7ff f990 	bl	403edc <_vfiprintf_r>
  404bbc:	1e05      	subs	r5, r0, #0
  404bbe:	db07      	blt.n	404bd0 <__sbprintf+0x64>
  404bc0:	4630      	mov	r0, r6
  404bc2:	4669      	mov	r1, sp
  404bc4:	f000 f928 	bl	404e18 <_fflush_r>
  404bc8:	2800      	cmp	r0, #0
  404bca:	bf18      	it	ne
  404bcc:	f04f 35ff 	movne.w	r5, #4294967295
  404bd0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  404bd4:	065b      	lsls	r3, r3, #25
  404bd6:	d503      	bpl.n	404be0 <__sbprintf+0x74>
  404bd8:	89a3      	ldrh	r3, [r4, #12]
  404bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404bde:	81a3      	strh	r3, [r4, #12]
  404be0:	9816      	ldr	r0, [sp, #88]	; 0x58
  404be2:	f000 fd2f 	bl	405644 <__retarget_lock_close_recursive>
  404be6:	4628      	mov	r0, r5
  404be8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  404bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404bf0 <__swsetup_r>:
  404bf0:	b538      	push	{r3, r4, r5, lr}
  404bf2:	4b30      	ldr	r3, [pc, #192]	; (404cb4 <__swsetup_r+0xc4>)
  404bf4:	681b      	ldr	r3, [r3, #0]
  404bf6:	4605      	mov	r5, r0
  404bf8:	460c      	mov	r4, r1
  404bfa:	b113      	cbz	r3, 404c02 <__swsetup_r+0x12>
  404bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  404bfe:	2a00      	cmp	r2, #0
  404c00:	d038      	beq.n	404c74 <__swsetup_r+0x84>
  404c02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404c06:	b293      	uxth	r3, r2
  404c08:	0718      	lsls	r0, r3, #28
  404c0a:	d50c      	bpl.n	404c26 <__swsetup_r+0x36>
  404c0c:	6920      	ldr	r0, [r4, #16]
  404c0e:	b1a8      	cbz	r0, 404c3c <__swsetup_r+0x4c>
  404c10:	f013 0201 	ands.w	r2, r3, #1
  404c14:	d01e      	beq.n	404c54 <__swsetup_r+0x64>
  404c16:	6963      	ldr	r3, [r4, #20]
  404c18:	2200      	movs	r2, #0
  404c1a:	425b      	negs	r3, r3
  404c1c:	61a3      	str	r3, [r4, #24]
  404c1e:	60a2      	str	r2, [r4, #8]
  404c20:	b1f0      	cbz	r0, 404c60 <__swsetup_r+0x70>
  404c22:	2000      	movs	r0, #0
  404c24:	bd38      	pop	{r3, r4, r5, pc}
  404c26:	06d9      	lsls	r1, r3, #27
  404c28:	d53c      	bpl.n	404ca4 <__swsetup_r+0xb4>
  404c2a:	0758      	lsls	r0, r3, #29
  404c2c:	d426      	bmi.n	404c7c <__swsetup_r+0x8c>
  404c2e:	6920      	ldr	r0, [r4, #16]
  404c30:	f042 0308 	orr.w	r3, r2, #8
  404c34:	81a3      	strh	r3, [r4, #12]
  404c36:	b29b      	uxth	r3, r3
  404c38:	2800      	cmp	r0, #0
  404c3a:	d1e9      	bne.n	404c10 <__swsetup_r+0x20>
  404c3c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  404c40:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404c44:	d0e4      	beq.n	404c10 <__swsetup_r+0x20>
  404c46:	4628      	mov	r0, r5
  404c48:	4621      	mov	r1, r4
  404c4a:	f000 fd2f 	bl	4056ac <__smakebuf_r>
  404c4e:	89a3      	ldrh	r3, [r4, #12]
  404c50:	6920      	ldr	r0, [r4, #16]
  404c52:	e7dd      	b.n	404c10 <__swsetup_r+0x20>
  404c54:	0799      	lsls	r1, r3, #30
  404c56:	bf58      	it	pl
  404c58:	6962      	ldrpl	r2, [r4, #20]
  404c5a:	60a2      	str	r2, [r4, #8]
  404c5c:	2800      	cmp	r0, #0
  404c5e:	d1e0      	bne.n	404c22 <__swsetup_r+0x32>
  404c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c64:	061a      	lsls	r2, r3, #24
  404c66:	d5dd      	bpl.n	404c24 <__swsetup_r+0x34>
  404c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404c6c:	81a3      	strh	r3, [r4, #12]
  404c6e:	f04f 30ff 	mov.w	r0, #4294967295
  404c72:	bd38      	pop	{r3, r4, r5, pc}
  404c74:	4618      	mov	r0, r3
  404c76:	f000 f927 	bl	404ec8 <__sinit>
  404c7a:	e7c2      	b.n	404c02 <__swsetup_r+0x12>
  404c7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404c7e:	b151      	cbz	r1, 404c96 <__swsetup_r+0xa6>
  404c80:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404c84:	4299      	cmp	r1, r3
  404c86:	d004      	beq.n	404c92 <__swsetup_r+0xa2>
  404c88:	4628      	mov	r0, r5
  404c8a:	f000 fa43 	bl	405114 <_free_r>
  404c8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404c92:	2300      	movs	r3, #0
  404c94:	6323      	str	r3, [r4, #48]	; 0x30
  404c96:	2300      	movs	r3, #0
  404c98:	6920      	ldr	r0, [r4, #16]
  404c9a:	6063      	str	r3, [r4, #4]
  404c9c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  404ca0:	6020      	str	r0, [r4, #0]
  404ca2:	e7c5      	b.n	404c30 <__swsetup_r+0x40>
  404ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  404ca8:	2309      	movs	r3, #9
  404caa:	602b      	str	r3, [r5, #0]
  404cac:	f04f 30ff 	mov.w	r0, #4294967295
  404cb0:	81a2      	strh	r2, [r4, #12]
  404cb2:	bd38      	pop	{r3, r4, r5, pc}
  404cb4:	2040000c 	.word	0x2040000c

00404cb8 <register_fini>:
  404cb8:	4b02      	ldr	r3, [pc, #8]	; (404cc4 <register_fini+0xc>)
  404cba:	b113      	cbz	r3, 404cc2 <register_fini+0xa>
  404cbc:	4802      	ldr	r0, [pc, #8]	; (404cc8 <register_fini+0x10>)
  404cbe:	f000 b805 	b.w	404ccc <atexit>
  404cc2:	4770      	bx	lr
  404cc4:	00000000 	.word	0x00000000
  404cc8:	00404f39 	.word	0x00404f39

00404ccc <atexit>:
  404ccc:	2300      	movs	r3, #0
  404cce:	4601      	mov	r1, r0
  404cd0:	461a      	mov	r2, r3
  404cd2:	4618      	mov	r0, r3
  404cd4:	f001 b890 	b.w	405df8 <__register_exitproc>

00404cd8 <__sflush_r>:
  404cd8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  404cdc:	b29a      	uxth	r2, r3
  404cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404ce2:	460d      	mov	r5, r1
  404ce4:	0711      	lsls	r1, r2, #28
  404ce6:	4680      	mov	r8, r0
  404ce8:	d43a      	bmi.n	404d60 <__sflush_r+0x88>
  404cea:	686a      	ldr	r2, [r5, #4]
  404cec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404cf0:	2a00      	cmp	r2, #0
  404cf2:	81ab      	strh	r3, [r5, #12]
  404cf4:	dd6f      	ble.n	404dd6 <__sflush_r+0xfe>
  404cf6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404cf8:	2c00      	cmp	r4, #0
  404cfa:	d049      	beq.n	404d90 <__sflush_r+0xb8>
  404cfc:	2200      	movs	r2, #0
  404cfe:	b29b      	uxth	r3, r3
  404d00:	f8d8 6000 	ldr.w	r6, [r8]
  404d04:	f8c8 2000 	str.w	r2, [r8]
  404d08:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  404d0c:	d067      	beq.n	404dde <__sflush_r+0x106>
  404d0e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404d10:	075f      	lsls	r7, r3, #29
  404d12:	d505      	bpl.n	404d20 <__sflush_r+0x48>
  404d14:	6869      	ldr	r1, [r5, #4]
  404d16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404d18:	1a52      	subs	r2, r2, r1
  404d1a:	b10b      	cbz	r3, 404d20 <__sflush_r+0x48>
  404d1c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  404d1e:	1ad2      	subs	r2, r2, r3
  404d20:	2300      	movs	r3, #0
  404d22:	69e9      	ldr	r1, [r5, #28]
  404d24:	4640      	mov	r0, r8
  404d26:	47a0      	blx	r4
  404d28:	1c44      	adds	r4, r0, #1
  404d2a:	d03c      	beq.n	404da6 <__sflush_r+0xce>
  404d2c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404d30:	692a      	ldr	r2, [r5, #16]
  404d32:	602a      	str	r2, [r5, #0]
  404d34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404d38:	2200      	movs	r2, #0
  404d3a:	81ab      	strh	r3, [r5, #12]
  404d3c:	04db      	lsls	r3, r3, #19
  404d3e:	606a      	str	r2, [r5, #4]
  404d40:	d447      	bmi.n	404dd2 <__sflush_r+0xfa>
  404d42:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404d44:	f8c8 6000 	str.w	r6, [r8]
  404d48:	b311      	cbz	r1, 404d90 <__sflush_r+0xb8>
  404d4a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  404d4e:	4299      	cmp	r1, r3
  404d50:	d002      	beq.n	404d58 <__sflush_r+0x80>
  404d52:	4640      	mov	r0, r8
  404d54:	f000 f9de 	bl	405114 <_free_r>
  404d58:	2000      	movs	r0, #0
  404d5a:	6328      	str	r0, [r5, #48]	; 0x30
  404d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404d60:	692e      	ldr	r6, [r5, #16]
  404d62:	b1ae      	cbz	r6, 404d90 <__sflush_r+0xb8>
  404d64:	682c      	ldr	r4, [r5, #0]
  404d66:	602e      	str	r6, [r5, #0]
  404d68:	0791      	lsls	r1, r2, #30
  404d6a:	bf0c      	ite	eq
  404d6c:	696b      	ldreq	r3, [r5, #20]
  404d6e:	2300      	movne	r3, #0
  404d70:	1ba4      	subs	r4, r4, r6
  404d72:	60ab      	str	r3, [r5, #8]
  404d74:	e00a      	b.n	404d8c <__sflush_r+0xb4>
  404d76:	4623      	mov	r3, r4
  404d78:	4632      	mov	r2, r6
  404d7a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  404d7c:	69e9      	ldr	r1, [r5, #28]
  404d7e:	4640      	mov	r0, r8
  404d80:	47b8      	blx	r7
  404d82:	2800      	cmp	r0, #0
  404d84:	eba4 0400 	sub.w	r4, r4, r0
  404d88:	4406      	add	r6, r0
  404d8a:	dd04      	ble.n	404d96 <__sflush_r+0xbe>
  404d8c:	2c00      	cmp	r4, #0
  404d8e:	dcf2      	bgt.n	404d76 <__sflush_r+0x9e>
  404d90:	2000      	movs	r0, #0
  404d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404d96:	89ab      	ldrh	r3, [r5, #12]
  404d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404d9c:	81ab      	strh	r3, [r5, #12]
  404d9e:	f04f 30ff 	mov.w	r0, #4294967295
  404da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404da6:	f8d8 4000 	ldr.w	r4, [r8]
  404daa:	2c1d      	cmp	r4, #29
  404dac:	d8f3      	bhi.n	404d96 <__sflush_r+0xbe>
  404dae:	4b19      	ldr	r3, [pc, #100]	; (404e14 <__sflush_r+0x13c>)
  404db0:	40e3      	lsrs	r3, r4
  404db2:	43db      	mvns	r3, r3
  404db4:	f013 0301 	ands.w	r3, r3, #1
  404db8:	d1ed      	bne.n	404d96 <__sflush_r+0xbe>
  404dba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  404dbe:	606b      	str	r3, [r5, #4]
  404dc0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  404dc4:	6929      	ldr	r1, [r5, #16]
  404dc6:	81ab      	strh	r3, [r5, #12]
  404dc8:	04da      	lsls	r2, r3, #19
  404dca:	6029      	str	r1, [r5, #0]
  404dcc:	d5b9      	bpl.n	404d42 <__sflush_r+0x6a>
  404dce:	2c00      	cmp	r4, #0
  404dd0:	d1b7      	bne.n	404d42 <__sflush_r+0x6a>
  404dd2:	6528      	str	r0, [r5, #80]	; 0x50
  404dd4:	e7b5      	b.n	404d42 <__sflush_r+0x6a>
  404dd6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404dd8:	2a00      	cmp	r2, #0
  404dda:	dc8c      	bgt.n	404cf6 <__sflush_r+0x1e>
  404ddc:	e7d8      	b.n	404d90 <__sflush_r+0xb8>
  404dde:	2301      	movs	r3, #1
  404de0:	69e9      	ldr	r1, [r5, #28]
  404de2:	4640      	mov	r0, r8
  404de4:	47a0      	blx	r4
  404de6:	1c43      	adds	r3, r0, #1
  404de8:	4602      	mov	r2, r0
  404dea:	d002      	beq.n	404df2 <__sflush_r+0x11a>
  404dec:	89ab      	ldrh	r3, [r5, #12]
  404dee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404df0:	e78e      	b.n	404d10 <__sflush_r+0x38>
  404df2:	f8d8 3000 	ldr.w	r3, [r8]
  404df6:	2b00      	cmp	r3, #0
  404df8:	d0f8      	beq.n	404dec <__sflush_r+0x114>
  404dfa:	2b1d      	cmp	r3, #29
  404dfc:	d001      	beq.n	404e02 <__sflush_r+0x12a>
  404dfe:	2b16      	cmp	r3, #22
  404e00:	d102      	bne.n	404e08 <__sflush_r+0x130>
  404e02:	f8c8 6000 	str.w	r6, [r8]
  404e06:	e7c3      	b.n	404d90 <__sflush_r+0xb8>
  404e08:	89ab      	ldrh	r3, [r5, #12]
  404e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404e0e:	81ab      	strh	r3, [r5, #12]
  404e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404e14:	20400001 	.word	0x20400001

00404e18 <_fflush_r>:
  404e18:	b538      	push	{r3, r4, r5, lr}
  404e1a:	460d      	mov	r5, r1
  404e1c:	4604      	mov	r4, r0
  404e1e:	b108      	cbz	r0, 404e24 <_fflush_r+0xc>
  404e20:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404e22:	b1bb      	cbz	r3, 404e54 <_fflush_r+0x3c>
  404e24:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  404e28:	b188      	cbz	r0, 404e4e <_fflush_r+0x36>
  404e2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  404e2c:	07db      	lsls	r3, r3, #31
  404e2e:	d401      	bmi.n	404e34 <_fflush_r+0x1c>
  404e30:	0581      	lsls	r1, r0, #22
  404e32:	d517      	bpl.n	404e64 <_fflush_r+0x4c>
  404e34:	4620      	mov	r0, r4
  404e36:	4629      	mov	r1, r5
  404e38:	f7ff ff4e 	bl	404cd8 <__sflush_r>
  404e3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  404e3e:	07da      	lsls	r2, r3, #31
  404e40:	4604      	mov	r4, r0
  404e42:	d402      	bmi.n	404e4a <_fflush_r+0x32>
  404e44:	89ab      	ldrh	r3, [r5, #12]
  404e46:	059b      	lsls	r3, r3, #22
  404e48:	d507      	bpl.n	404e5a <_fflush_r+0x42>
  404e4a:	4620      	mov	r0, r4
  404e4c:	bd38      	pop	{r3, r4, r5, pc}
  404e4e:	4604      	mov	r4, r0
  404e50:	4620      	mov	r0, r4
  404e52:	bd38      	pop	{r3, r4, r5, pc}
  404e54:	f000 f838 	bl	404ec8 <__sinit>
  404e58:	e7e4      	b.n	404e24 <_fflush_r+0xc>
  404e5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404e5c:	f000 fbf6 	bl	40564c <__retarget_lock_release_recursive>
  404e60:	4620      	mov	r0, r4
  404e62:	bd38      	pop	{r3, r4, r5, pc}
  404e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404e66:	f000 fbef 	bl	405648 <__retarget_lock_acquire_recursive>
  404e6a:	e7e3      	b.n	404e34 <_fflush_r+0x1c>

00404e6c <_cleanup_r>:
  404e6c:	4901      	ldr	r1, [pc, #4]	; (404e74 <_cleanup_r+0x8>)
  404e6e:	f000 bbaf 	b.w	4055d0 <_fwalk_reent>
  404e72:	bf00      	nop
  404e74:	00405ee1 	.word	0x00405ee1

00404e78 <std.isra.0>:
  404e78:	b510      	push	{r4, lr}
  404e7a:	2300      	movs	r3, #0
  404e7c:	4604      	mov	r4, r0
  404e7e:	8181      	strh	r1, [r0, #12]
  404e80:	81c2      	strh	r2, [r0, #14]
  404e82:	6003      	str	r3, [r0, #0]
  404e84:	6043      	str	r3, [r0, #4]
  404e86:	6083      	str	r3, [r0, #8]
  404e88:	6643      	str	r3, [r0, #100]	; 0x64
  404e8a:	6103      	str	r3, [r0, #16]
  404e8c:	6143      	str	r3, [r0, #20]
  404e8e:	6183      	str	r3, [r0, #24]
  404e90:	4619      	mov	r1, r3
  404e92:	2208      	movs	r2, #8
  404e94:	305c      	adds	r0, #92	; 0x5c
  404e96:	f7fe fe37 	bl	403b08 <memset>
  404e9a:	4807      	ldr	r0, [pc, #28]	; (404eb8 <std.isra.0+0x40>)
  404e9c:	4907      	ldr	r1, [pc, #28]	; (404ebc <std.isra.0+0x44>)
  404e9e:	4a08      	ldr	r2, [pc, #32]	; (404ec0 <std.isra.0+0x48>)
  404ea0:	4b08      	ldr	r3, [pc, #32]	; (404ec4 <std.isra.0+0x4c>)
  404ea2:	6220      	str	r0, [r4, #32]
  404ea4:	61e4      	str	r4, [r4, #28]
  404ea6:	6261      	str	r1, [r4, #36]	; 0x24
  404ea8:	62a2      	str	r2, [r4, #40]	; 0x28
  404eaa:	62e3      	str	r3, [r4, #44]	; 0x2c
  404eac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  404eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404eb4:	f000 bbc4 	b.w	405640 <__retarget_lock_init_recursive>
  404eb8:	00405c25 	.word	0x00405c25
  404ebc:	00405c49 	.word	0x00405c49
  404ec0:	00405c85 	.word	0x00405c85
  404ec4:	00405ca5 	.word	0x00405ca5

00404ec8 <__sinit>:
  404ec8:	b510      	push	{r4, lr}
  404eca:	4604      	mov	r4, r0
  404ecc:	4812      	ldr	r0, [pc, #72]	; (404f18 <__sinit+0x50>)
  404ece:	f000 fbbb 	bl	405648 <__retarget_lock_acquire_recursive>
  404ed2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404ed4:	b9d2      	cbnz	r2, 404f0c <__sinit+0x44>
  404ed6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  404eda:	4810      	ldr	r0, [pc, #64]	; (404f1c <__sinit+0x54>)
  404edc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  404ee0:	2103      	movs	r1, #3
  404ee2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  404ee6:	63e0      	str	r0, [r4, #60]	; 0x3c
  404ee8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  404eec:	6860      	ldr	r0, [r4, #4]
  404eee:	2104      	movs	r1, #4
  404ef0:	f7ff ffc2 	bl	404e78 <std.isra.0>
  404ef4:	2201      	movs	r2, #1
  404ef6:	2109      	movs	r1, #9
  404ef8:	68a0      	ldr	r0, [r4, #8]
  404efa:	f7ff ffbd 	bl	404e78 <std.isra.0>
  404efe:	2202      	movs	r2, #2
  404f00:	2112      	movs	r1, #18
  404f02:	68e0      	ldr	r0, [r4, #12]
  404f04:	f7ff ffb8 	bl	404e78 <std.isra.0>
  404f08:	2301      	movs	r3, #1
  404f0a:	63a3      	str	r3, [r4, #56]	; 0x38
  404f0c:	4802      	ldr	r0, [pc, #8]	; (404f18 <__sinit+0x50>)
  404f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404f12:	f000 bb9b 	b.w	40564c <__retarget_lock_release_recursive>
  404f16:	bf00      	nop
  404f18:	20400d60 	.word	0x20400d60
  404f1c:	00404e6d 	.word	0x00404e6d

00404f20 <__sfp_lock_acquire>:
  404f20:	4801      	ldr	r0, [pc, #4]	; (404f28 <__sfp_lock_acquire+0x8>)
  404f22:	f000 bb91 	b.w	405648 <__retarget_lock_acquire_recursive>
  404f26:	bf00      	nop
  404f28:	20400d74 	.word	0x20400d74

00404f2c <__sfp_lock_release>:
  404f2c:	4801      	ldr	r0, [pc, #4]	; (404f34 <__sfp_lock_release+0x8>)
  404f2e:	f000 bb8d 	b.w	40564c <__retarget_lock_release_recursive>
  404f32:	bf00      	nop
  404f34:	20400d74 	.word	0x20400d74

00404f38 <__libc_fini_array>:
  404f38:	b538      	push	{r3, r4, r5, lr}
  404f3a:	4c0a      	ldr	r4, [pc, #40]	; (404f64 <__libc_fini_array+0x2c>)
  404f3c:	4d0a      	ldr	r5, [pc, #40]	; (404f68 <__libc_fini_array+0x30>)
  404f3e:	1b64      	subs	r4, r4, r5
  404f40:	10a4      	asrs	r4, r4, #2
  404f42:	d00a      	beq.n	404f5a <__libc_fini_array+0x22>
  404f44:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404f48:	3b01      	subs	r3, #1
  404f4a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404f4e:	3c01      	subs	r4, #1
  404f50:	f855 3904 	ldr.w	r3, [r5], #-4
  404f54:	4798      	blx	r3
  404f56:	2c00      	cmp	r4, #0
  404f58:	d1f9      	bne.n	404f4e <__libc_fini_array+0x16>
  404f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404f5e:	f001 bb35 	b.w	4065cc <_fini>
  404f62:	bf00      	nop
  404f64:	004065dc 	.word	0x004065dc
  404f68:	004065d8 	.word	0x004065d8

00404f6c <__fputwc>:
  404f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404f70:	b082      	sub	sp, #8
  404f72:	4680      	mov	r8, r0
  404f74:	4689      	mov	r9, r1
  404f76:	4614      	mov	r4, r2
  404f78:	f000 fb54 	bl	405624 <__locale_mb_cur_max>
  404f7c:	2801      	cmp	r0, #1
  404f7e:	d036      	beq.n	404fee <__fputwc+0x82>
  404f80:	464a      	mov	r2, r9
  404f82:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  404f86:	a901      	add	r1, sp, #4
  404f88:	4640      	mov	r0, r8
  404f8a:	f000 fee7 	bl	405d5c <_wcrtomb_r>
  404f8e:	1c42      	adds	r2, r0, #1
  404f90:	4606      	mov	r6, r0
  404f92:	d025      	beq.n	404fe0 <__fputwc+0x74>
  404f94:	b3a8      	cbz	r0, 405002 <__fputwc+0x96>
  404f96:	f89d e004 	ldrb.w	lr, [sp, #4]
  404f9a:	2500      	movs	r5, #0
  404f9c:	f10d 0a04 	add.w	sl, sp, #4
  404fa0:	e009      	b.n	404fb6 <__fputwc+0x4a>
  404fa2:	6823      	ldr	r3, [r4, #0]
  404fa4:	1c5a      	adds	r2, r3, #1
  404fa6:	6022      	str	r2, [r4, #0]
  404fa8:	f883 e000 	strb.w	lr, [r3]
  404fac:	3501      	adds	r5, #1
  404fae:	42b5      	cmp	r5, r6
  404fb0:	d227      	bcs.n	405002 <__fputwc+0x96>
  404fb2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  404fb6:	68a3      	ldr	r3, [r4, #8]
  404fb8:	3b01      	subs	r3, #1
  404fba:	2b00      	cmp	r3, #0
  404fbc:	60a3      	str	r3, [r4, #8]
  404fbe:	daf0      	bge.n	404fa2 <__fputwc+0x36>
  404fc0:	69a7      	ldr	r7, [r4, #24]
  404fc2:	42bb      	cmp	r3, r7
  404fc4:	4671      	mov	r1, lr
  404fc6:	4622      	mov	r2, r4
  404fc8:	4640      	mov	r0, r8
  404fca:	db02      	blt.n	404fd2 <__fputwc+0x66>
  404fcc:	f1be 0f0a 	cmp.w	lr, #10
  404fd0:	d1e7      	bne.n	404fa2 <__fputwc+0x36>
  404fd2:	f000 fe6b 	bl	405cac <__swbuf_r>
  404fd6:	1c43      	adds	r3, r0, #1
  404fd8:	d1e8      	bne.n	404fac <__fputwc+0x40>
  404fda:	b002      	add	sp, #8
  404fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404fe0:	89a3      	ldrh	r3, [r4, #12]
  404fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404fe6:	81a3      	strh	r3, [r4, #12]
  404fe8:	b002      	add	sp, #8
  404fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404fee:	f109 33ff 	add.w	r3, r9, #4294967295
  404ff2:	2bfe      	cmp	r3, #254	; 0xfe
  404ff4:	d8c4      	bhi.n	404f80 <__fputwc+0x14>
  404ff6:	fa5f fe89 	uxtb.w	lr, r9
  404ffa:	4606      	mov	r6, r0
  404ffc:	f88d e004 	strb.w	lr, [sp, #4]
  405000:	e7cb      	b.n	404f9a <__fputwc+0x2e>
  405002:	4648      	mov	r0, r9
  405004:	b002      	add	sp, #8
  405006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40500a:	bf00      	nop

0040500c <_fputwc_r>:
  40500c:	b530      	push	{r4, r5, lr}
  40500e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405010:	f013 0f01 	tst.w	r3, #1
  405014:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405018:	4614      	mov	r4, r2
  40501a:	b083      	sub	sp, #12
  40501c:	4605      	mov	r5, r0
  40501e:	b29a      	uxth	r2, r3
  405020:	d101      	bne.n	405026 <_fputwc_r+0x1a>
  405022:	0590      	lsls	r0, r2, #22
  405024:	d51c      	bpl.n	405060 <_fputwc_r+0x54>
  405026:	0490      	lsls	r0, r2, #18
  405028:	d406      	bmi.n	405038 <_fputwc_r+0x2c>
  40502a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40502c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405034:	81a3      	strh	r3, [r4, #12]
  405036:	6662      	str	r2, [r4, #100]	; 0x64
  405038:	4628      	mov	r0, r5
  40503a:	4622      	mov	r2, r4
  40503c:	f7ff ff96 	bl	404f6c <__fputwc>
  405040:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405042:	07da      	lsls	r2, r3, #31
  405044:	4605      	mov	r5, r0
  405046:	d402      	bmi.n	40504e <_fputwc_r+0x42>
  405048:	89a3      	ldrh	r3, [r4, #12]
  40504a:	059b      	lsls	r3, r3, #22
  40504c:	d502      	bpl.n	405054 <_fputwc_r+0x48>
  40504e:	4628      	mov	r0, r5
  405050:	b003      	add	sp, #12
  405052:	bd30      	pop	{r4, r5, pc}
  405054:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405056:	f000 faf9 	bl	40564c <__retarget_lock_release_recursive>
  40505a:	4628      	mov	r0, r5
  40505c:	b003      	add	sp, #12
  40505e:	bd30      	pop	{r4, r5, pc}
  405060:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405062:	9101      	str	r1, [sp, #4]
  405064:	f000 faf0 	bl	405648 <__retarget_lock_acquire_recursive>
  405068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40506c:	9901      	ldr	r1, [sp, #4]
  40506e:	b29a      	uxth	r2, r3
  405070:	e7d9      	b.n	405026 <_fputwc_r+0x1a>
  405072:	bf00      	nop

00405074 <_malloc_trim_r>:
  405074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405076:	4f24      	ldr	r7, [pc, #144]	; (405108 <_malloc_trim_r+0x94>)
  405078:	460c      	mov	r4, r1
  40507a:	4606      	mov	r6, r0
  40507c:	f7fe fd92 	bl	403ba4 <__malloc_lock>
  405080:	68bb      	ldr	r3, [r7, #8]
  405082:	685d      	ldr	r5, [r3, #4]
  405084:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405088:	310f      	adds	r1, #15
  40508a:	f025 0503 	bic.w	r5, r5, #3
  40508e:	4429      	add	r1, r5
  405090:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405094:	f021 010f 	bic.w	r1, r1, #15
  405098:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40509c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4050a0:	db07      	blt.n	4050b2 <_malloc_trim_r+0x3e>
  4050a2:	2100      	movs	r1, #0
  4050a4:	4630      	mov	r0, r6
  4050a6:	f7fe fd89 	bl	403bbc <_sbrk_r>
  4050aa:	68bb      	ldr	r3, [r7, #8]
  4050ac:	442b      	add	r3, r5
  4050ae:	4298      	cmp	r0, r3
  4050b0:	d004      	beq.n	4050bc <_malloc_trim_r+0x48>
  4050b2:	4630      	mov	r0, r6
  4050b4:	f7fe fd7c 	bl	403bb0 <__malloc_unlock>
  4050b8:	2000      	movs	r0, #0
  4050ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4050bc:	4261      	negs	r1, r4
  4050be:	4630      	mov	r0, r6
  4050c0:	f7fe fd7c 	bl	403bbc <_sbrk_r>
  4050c4:	3001      	adds	r0, #1
  4050c6:	d00d      	beq.n	4050e4 <_malloc_trim_r+0x70>
  4050c8:	4b10      	ldr	r3, [pc, #64]	; (40510c <_malloc_trim_r+0x98>)
  4050ca:	68ba      	ldr	r2, [r7, #8]
  4050cc:	6819      	ldr	r1, [r3, #0]
  4050ce:	1b2d      	subs	r5, r5, r4
  4050d0:	f045 0501 	orr.w	r5, r5, #1
  4050d4:	4630      	mov	r0, r6
  4050d6:	1b09      	subs	r1, r1, r4
  4050d8:	6055      	str	r5, [r2, #4]
  4050da:	6019      	str	r1, [r3, #0]
  4050dc:	f7fe fd68 	bl	403bb0 <__malloc_unlock>
  4050e0:	2001      	movs	r0, #1
  4050e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4050e4:	2100      	movs	r1, #0
  4050e6:	4630      	mov	r0, r6
  4050e8:	f7fe fd68 	bl	403bbc <_sbrk_r>
  4050ec:	68ba      	ldr	r2, [r7, #8]
  4050ee:	1a83      	subs	r3, r0, r2
  4050f0:	2b0f      	cmp	r3, #15
  4050f2:	ddde      	ble.n	4050b2 <_malloc_trim_r+0x3e>
  4050f4:	4c06      	ldr	r4, [pc, #24]	; (405110 <_malloc_trim_r+0x9c>)
  4050f6:	4905      	ldr	r1, [pc, #20]	; (40510c <_malloc_trim_r+0x98>)
  4050f8:	6824      	ldr	r4, [r4, #0]
  4050fa:	f043 0301 	orr.w	r3, r3, #1
  4050fe:	1b00      	subs	r0, r0, r4
  405100:	6053      	str	r3, [r2, #4]
  405102:	6008      	str	r0, [r1, #0]
  405104:	e7d5      	b.n	4050b2 <_malloc_trim_r+0x3e>
  405106:	bf00      	nop
  405108:	20400438 	.word	0x20400438
  40510c:	20400c44 	.word	0x20400c44
  405110:	20400840 	.word	0x20400840

00405114 <_free_r>:
  405114:	2900      	cmp	r1, #0
  405116:	d044      	beq.n	4051a2 <_free_r+0x8e>
  405118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40511c:	460d      	mov	r5, r1
  40511e:	4680      	mov	r8, r0
  405120:	f7fe fd40 	bl	403ba4 <__malloc_lock>
  405124:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405128:	4969      	ldr	r1, [pc, #420]	; (4052d0 <_free_r+0x1bc>)
  40512a:	f027 0301 	bic.w	r3, r7, #1
  40512e:	f1a5 0408 	sub.w	r4, r5, #8
  405132:	18e2      	adds	r2, r4, r3
  405134:	688e      	ldr	r6, [r1, #8]
  405136:	6850      	ldr	r0, [r2, #4]
  405138:	42b2      	cmp	r2, r6
  40513a:	f020 0003 	bic.w	r0, r0, #3
  40513e:	d05e      	beq.n	4051fe <_free_r+0xea>
  405140:	07fe      	lsls	r6, r7, #31
  405142:	6050      	str	r0, [r2, #4]
  405144:	d40b      	bmi.n	40515e <_free_r+0x4a>
  405146:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40514a:	1be4      	subs	r4, r4, r7
  40514c:	f101 0e08 	add.w	lr, r1, #8
  405150:	68a5      	ldr	r5, [r4, #8]
  405152:	4575      	cmp	r5, lr
  405154:	443b      	add	r3, r7
  405156:	d06d      	beq.n	405234 <_free_r+0x120>
  405158:	68e7      	ldr	r7, [r4, #12]
  40515a:	60ef      	str	r7, [r5, #12]
  40515c:	60bd      	str	r5, [r7, #8]
  40515e:	1815      	adds	r5, r2, r0
  405160:	686d      	ldr	r5, [r5, #4]
  405162:	07ed      	lsls	r5, r5, #31
  405164:	d53e      	bpl.n	4051e4 <_free_r+0xd0>
  405166:	f043 0201 	orr.w	r2, r3, #1
  40516a:	6062      	str	r2, [r4, #4]
  40516c:	50e3      	str	r3, [r4, r3]
  40516e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405172:	d217      	bcs.n	4051a4 <_free_r+0x90>
  405174:	08db      	lsrs	r3, r3, #3
  405176:	1c58      	adds	r0, r3, #1
  405178:	109a      	asrs	r2, r3, #2
  40517a:	684d      	ldr	r5, [r1, #4]
  40517c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405180:	60a7      	str	r7, [r4, #8]
  405182:	2301      	movs	r3, #1
  405184:	4093      	lsls	r3, r2
  405186:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40518a:	432b      	orrs	r3, r5
  40518c:	3a08      	subs	r2, #8
  40518e:	60e2      	str	r2, [r4, #12]
  405190:	604b      	str	r3, [r1, #4]
  405192:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405196:	60fc      	str	r4, [r7, #12]
  405198:	4640      	mov	r0, r8
  40519a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40519e:	f7fe bd07 	b.w	403bb0 <__malloc_unlock>
  4051a2:	4770      	bx	lr
  4051a4:	0a5a      	lsrs	r2, r3, #9
  4051a6:	2a04      	cmp	r2, #4
  4051a8:	d852      	bhi.n	405250 <_free_r+0x13c>
  4051aa:	099a      	lsrs	r2, r3, #6
  4051ac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4051b0:	00ff      	lsls	r7, r7, #3
  4051b2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4051b6:	19c8      	adds	r0, r1, r7
  4051b8:	59ca      	ldr	r2, [r1, r7]
  4051ba:	3808      	subs	r0, #8
  4051bc:	4290      	cmp	r0, r2
  4051be:	d04f      	beq.n	405260 <_free_r+0x14c>
  4051c0:	6851      	ldr	r1, [r2, #4]
  4051c2:	f021 0103 	bic.w	r1, r1, #3
  4051c6:	428b      	cmp	r3, r1
  4051c8:	d232      	bcs.n	405230 <_free_r+0x11c>
  4051ca:	6892      	ldr	r2, [r2, #8]
  4051cc:	4290      	cmp	r0, r2
  4051ce:	d1f7      	bne.n	4051c0 <_free_r+0xac>
  4051d0:	68c3      	ldr	r3, [r0, #12]
  4051d2:	60a0      	str	r0, [r4, #8]
  4051d4:	60e3      	str	r3, [r4, #12]
  4051d6:	609c      	str	r4, [r3, #8]
  4051d8:	60c4      	str	r4, [r0, #12]
  4051da:	4640      	mov	r0, r8
  4051dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4051e0:	f7fe bce6 	b.w	403bb0 <__malloc_unlock>
  4051e4:	6895      	ldr	r5, [r2, #8]
  4051e6:	4f3b      	ldr	r7, [pc, #236]	; (4052d4 <_free_r+0x1c0>)
  4051e8:	42bd      	cmp	r5, r7
  4051ea:	4403      	add	r3, r0
  4051ec:	d040      	beq.n	405270 <_free_r+0x15c>
  4051ee:	68d0      	ldr	r0, [r2, #12]
  4051f0:	60e8      	str	r0, [r5, #12]
  4051f2:	f043 0201 	orr.w	r2, r3, #1
  4051f6:	6085      	str	r5, [r0, #8]
  4051f8:	6062      	str	r2, [r4, #4]
  4051fa:	50e3      	str	r3, [r4, r3]
  4051fc:	e7b7      	b.n	40516e <_free_r+0x5a>
  4051fe:	07ff      	lsls	r7, r7, #31
  405200:	4403      	add	r3, r0
  405202:	d407      	bmi.n	405214 <_free_r+0x100>
  405204:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405208:	1aa4      	subs	r4, r4, r2
  40520a:	4413      	add	r3, r2
  40520c:	68a0      	ldr	r0, [r4, #8]
  40520e:	68e2      	ldr	r2, [r4, #12]
  405210:	60c2      	str	r2, [r0, #12]
  405212:	6090      	str	r0, [r2, #8]
  405214:	4a30      	ldr	r2, [pc, #192]	; (4052d8 <_free_r+0x1c4>)
  405216:	6812      	ldr	r2, [r2, #0]
  405218:	f043 0001 	orr.w	r0, r3, #1
  40521c:	4293      	cmp	r3, r2
  40521e:	6060      	str	r0, [r4, #4]
  405220:	608c      	str	r4, [r1, #8]
  405222:	d3b9      	bcc.n	405198 <_free_r+0x84>
  405224:	4b2d      	ldr	r3, [pc, #180]	; (4052dc <_free_r+0x1c8>)
  405226:	4640      	mov	r0, r8
  405228:	6819      	ldr	r1, [r3, #0]
  40522a:	f7ff ff23 	bl	405074 <_malloc_trim_r>
  40522e:	e7b3      	b.n	405198 <_free_r+0x84>
  405230:	4610      	mov	r0, r2
  405232:	e7cd      	b.n	4051d0 <_free_r+0xbc>
  405234:	1811      	adds	r1, r2, r0
  405236:	6849      	ldr	r1, [r1, #4]
  405238:	07c9      	lsls	r1, r1, #31
  40523a:	d444      	bmi.n	4052c6 <_free_r+0x1b2>
  40523c:	6891      	ldr	r1, [r2, #8]
  40523e:	68d2      	ldr	r2, [r2, #12]
  405240:	60ca      	str	r2, [r1, #12]
  405242:	4403      	add	r3, r0
  405244:	f043 0001 	orr.w	r0, r3, #1
  405248:	6091      	str	r1, [r2, #8]
  40524a:	6060      	str	r0, [r4, #4]
  40524c:	50e3      	str	r3, [r4, r3]
  40524e:	e7a3      	b.n	405198 <_free_r+0x84>
  405250:	2a14      	cmp	r2, #20
  405252:	d816      	bhi.n	405282 <_free_r+0x16e>
  405254:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405258:	00ff      	lsls	r7, r7, #3
  40525a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40525e:	e7aa      	b.n	4051b6 <_free_r+0xa2>
  405260:	10aa      	asrs	r2, r5, #2
  405262:	2301      	movs	r3, #1
  405264:	684d      	ldr	r5, [r1, #4]
  405266:	4093      	lsls	r3, r2
  405268:	432b      	orrs	r3, r5
  40526a:	604b      	str	r3, [r1, #4]
  40526c:	4603      	mov	r3, r0
  40526e:	e7b0      	b.n	4051d2 <_free_r+0xbe>
  405270:	f043 0201 	orr.w	r2, r3, #1
  405274:	614c      	str	r4, [r1, #20]
  405276:	610c      	str	r4, [r1, #16]
  405278:	60e5      	str	r5, [r4, #12]
  40527a:	60a5      	str	r5, [r4, #8]
  40527c:	6062      	str	r2, [r4, #4]
  40527e:	50e3      	str	r3, [r4, r3]
  405280:	e78a      	b.n	405198 <_free_r+0x84>
  405282:	2a54      	cmp	r2, #84	; 0x54
  405284:	d806      	bhi.n	405294 <_free_r+0x180>
  405286:	0b1a      	lsrs	r2, r3, #12
  405288:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40528c:	00ff      	lsls	r7, r7, #3
  40528e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405292:	e790      	b.n	4051b6 <_free_r+0xa2>
  405294:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405298:	d806      	bhi.n	4052a8 <_free_r+0x194>
  40529a:	0bda      	lsrs	r2, r3, #15
  40529c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4052a0:	00ff      	lsls	r7, r7, #3
  4052a2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4052a6:	e786      	b.n	4051b6 <_free_r+0xa2>
  4052a8:	f240 5054 	movw	r0, #1364	; 0x554
  4052ac:	4282      	cmp	r2, r0
  4052ae:	d806      	bhi.n	4052be <_free_r+0x1aa>
  4052b0:	0c9a      	lsrs	r2, r3, #18
  4052b2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4052b6:	00ff      	lsls	r7, r7, #3
  4052b8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4052bc:	e77b      	b.n	4051b6 <_free_r+0xa2>
  4052be:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4052c2:	257e      	movs	r5, #126	; 0x7e
  4052c4:	e777      	b.n	4051b6 <_free_r+0xa2>
  4052c6:	f043 0101 	orr.w	r1, r3, #1
  4052ca:	6061      	str	r1, [r4, #4]
  4052cc:	6013      	str	r3, [r2, #0]
  4052ce:	e763      	b.n	405198 <_free_r+0x84>
  4052d0:	20400438 	.word	0x20400438
  4052d4:	20400440 	.word	0x20400440
  4052d8:	20400844 	.word	0x20400844
  4052dc:	20400c74 	.word	0x20400c74

004052e0 <__sfvwrite_r>:
  4052e0:	6893      	ldr	r3, [r2, #8]
  4052e2:	2b00      	cmp	r3, #0
  4052e4:	d073      	beq.n	4053ce <__sfvwrite_r+0xee>
  4052e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4052ea:	898b      	ldrh	r3, [r1, #12]
  4052ec:	b083      	sub	sp, #12
  4052ee:	460c      	mov	r4, r1
  4052f0:	0719      	lsls	r1, r3, #28
  4052f2:	9000      	str	r0, [sp, #0]
  4052f4:	4616      	mov	r6, r2
  4052f6:	d526      	bpl.n	405346 <__sfvwrite_r+0x66>
  4052f8:	6922      	ldr	r2, [r4, #16]
  4052fa:	b322      	cbz	r2, 405346 <__sfvwrite_r+0x66>
  4052fc:	f013 0002 	ands.w	r0, r3, #2
  405300:	6835      	ldr	r5, [r6, #0]
  405302:	d02c      	beq.n	40535e <__sfvwrite_r+0x7e>
  405304:	f04f 0900 	mov.w	r9, #0
  405308:	4fb0      	ldr	r7, [pc, #704]	; (4055cc <__sfvwrite_r+0x2ec>)
  40530a:	46c8      	mov	r8, r9
  40530c:	46b2      	mov	sl, r6
  40530e:	45b8      	cmp	r8, r7
  405310:	4643      	mov	r3, r8
  405312:	464a      	mov	r2, r9
  405314:	bf28      	it	cs
  405316:	463b      	movcs	r3, r7
  405318:	9800      	ldr	r0, [sp, #0]
  40531a:	f1b8 0f00 	cmp.w	r8, #0
  40531e:	d050      	beq.n	4053c2 <__sfvwrite_r+0xe2>
  405320:	69e1      	ldr	r1, [r4, #28]
  405322:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405324:	47b0      	blx	r6
  405326:	2800      	cmp	r0, #0
  405328:	dd58      	ble.n	4053dc <__sfvwrite_r+0xfc>
  40532a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40532e:	1a1b      	subs	r3, r3, r0
  405330:	4481      	add	r9, r0
  405332:	eba8 0800 	sub.w	r8, r8, r0
  405336:	f8ca 3008 	str.w	r3, [sl, #8]
  40533a:	2b00      	cmp	r3, #0
  40533c:	d1e7      	bne.n	40530e <__sfvwrite_r+0x2e>
  40533e:	2000      	movs	r0, #0
  405340:	b003      	add	sp, #12
  405342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405346:	4621      	mov	r1, r4
  405348:	9800      	ldr	r0, [sp, #0]
  40534a:	f7ff fc51 	bl	404bf0 <__swsetup_r>
  40534e:	2800      	cmp	r0, #0
  405350:	f040 8133 	bne.w	4055ba <__sfvwrite_r+0x2da>
  405354:	89a3      	ldrh	r3, [r4, #12]
  405356:	6835      	ldr	r5, [r6, #0]
  405358:	f013 0002 	ands.w	r0, r3, #2
  40535c:	d1d2      	bne.n	405304 <__sfvwrite_r+0x24>
  40535e:	f013 0901 	ands.w	r9, r3, #1
  405362:	d145      	bne.n	4053f0 <__sfvwrite_r+0x110>
  405364:	464f      	mov	r7, r9
  405366:	9601      	str	r6, [sp, #4]
  405368:	b337      	cbz	r7, 4053b8 <__sfvwrite_r+0xd8>
  40536a:	059a      	lsls	r2, r3, #22
  40536c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405370:	f140 8083 	bpl.w	40547a <__sfvwrite_r+0x19a>
  405374:	4547      	cmp	r7, r8
  405376:	46c3      	mov	fp, r8
  405378:	f0c0 80ab 	bcc.w	4054d2 <__sfvwrite_r+0x1f2>
  40537c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405380:	f040 80ac 	bne.w	4054dc <__sfvwrite_r+0x1fc>
  405384:	6820      	ldr	r0, [r4, #0]
  405386:	46ba      	mov	sl, r7
  405388:	465a      	mov	r2, fp
  40538a:	4649      	mov	r1, r9
  40538c:	f000 fa40 	bl	405810 <memmove>
  405390:	68a2      	ldr	r2, [r4, #8]
  405392:	6823      	ldr	r3, [r4, #0]
  405394:	eba2 0208 	sub.w	r2, r2, r8
  405398:	445b      	add	r3, fp
  40539a:	60a2      	str	r2, [r4, #8]
  40539c:	6023      	str	r3, [r4, #0]
  40539e:	9a01      	ldr	r2, [sp, #4]
  4053a0:	6893      	ldr	r3, [r2, #8]
  4053a2:	eba3 030a 	sub.w	r3, r3, sl
  4053a6:	44d1      	add	r9, sl
  4053a8:	eba7 070a 	sub.w	r7, r7, sl
  4053ac:	6093      	str	r3, [r2, #8]
  4053ae:	2b00      	cmp	r3, #0
  4053b0:	d0c5      	beq.n	40533e <__sfvwrite_r+0x5e>
  4053b2:	89a3      	ldrh	r3, [r4, #12]
  4053b4:	2f00      	cmp	r7, #0
  4053b6:	d1d8      	bne.n	40536a <__sfvwrite_r+0x8a>
  4053b8:	f8d5 9000 	ldr.w	r9, [r5]
  4053bc:	686f      	ldr	r7, [r5, #4]
  4053be:	3508      	adds	r5, #8
  4053c0:	e7d2      	b.n	405368 <__sfvwrite_r+0x88>
  4053c2:	f8d5 9000 	ldr.w	r9, [r5]
  4053c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4053ca:	3508      	adds	r5, #8
  4053cc:	e79f      	b.n	40530e <__sfvwrite_r+0x2e>
  4053ce:	2000      	movs	r0, #0
  4053d0:	4770      	bx	lr
  4053d2:	4621      	mov	r1, r4
  4053d4:	9800      	ldr	r0, [sp, #0]
  4053d6:	f7ff fd1f 	bl	404e18 <_fflush_r>
  4053da:	b370      	cbz	r0, 40543a <__sfvwrite_r+0x15a>
  4053dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4053e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4053e4:	f04f 30ff 	mov.w	r0, #4294967295
  4053e8:	81a3      	strh	r3, [r4, #12]
  4053ea:	b003      	add	sp, #12
  4053ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4053f0:	4681      	mov	r9, r0
  4053f2:	4633      	mov	r3, r6
  4053f4:	464e      	mov	r6, r9
  4053f6:	46a8      	mov	r8, r5
  4053f8:	469a      	mov	sl, r3
  4053fa:	464d      	mov	r5, r9
  4053fc:	b34e      	cbz	r6, 405452 <__sfvwrite_r+0x172>
  4053fe:	b380      	cbz	r0, 405462 <__sfvwrite_r+0x182>
  405400:	6820      	ldr	r0, [r4, #0]
  405402:	6923      	ldr	r3, [r4, #16]
  405404:	6962      	ldr	r2, [r4, #20]
  405406:	45b1      	cmp	r9, r6
  405408:	46cb      	mov	fp, r9
  40540a:	bf28      	it	cs
  40540c:	46b3      	movcs	fp, r6
  40540e:	4298      	cmp	r0, r3
  405410:	465f      	mov	r7, fp
  405412:	d904      	bls.n	40541e <__sfvwrite_r+0x13e>
  405414:	68a3      	ldr	r3, [r4, #8]
  405416:	4413      	add	r3, r2
  405418:	459b      	cmp	fp, r3
  40541a:	f300 80a6 	bgt.w	40556a <__sfvwrite_r+0x28a>
  40541e:	4593      	cmp	fp, r2
  405420:	db4b      	blt.n	4054ba <__sfvwrite_r+0x1da>
  405422:	4613      	mov	r3, r2
  405424:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405426:	69e1      	ldr	r1, [r4, #28]
  405428:	9800      	ldr	r0, [sp, #0]
  40542a:	462a      	mov	r2, r5
  40542c:	47b8      	blx	r7
  40542e:	1e07      	subs	r7, r0, #0
  405430:	ddd4      	ble.n	4053dc <__sfvwrite_r+0xfc>
  405432:	ebb9 0907 	subs.w	r9, r9, r7
  405436:	d0cc      	beq.n	4053d2 <__sfvwrite_r+0xf2>
  405438:	2001      	movs	r0, #1
  40543a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40543e:	1bdb      	subs	r3, r3, r7
  405440:	443d      	add	r5, r7
  405442:	1bf6      	subs	r6, r6, r7
  405444:	f8ca 3008 	str.w	r3, [sl, #8]
  405448:	2b00      	cmp	r3, #0
  40544a:	f43f af78 	beq.w	40533e <__sfvwrite_r+0x5e>
  40544e:	2e00      	cmp	r6, #0
  405450:	d1d5      	bne.n	4053fe <__sfvwrite_r+0x11e>
  405452:	f108 0308 	add.w	r3, r8, #8
  405456:	e913 0060 	ldmdb	r3, {r5, r6}
  40545a:	4698      	mov	r8, r3
  40545c:	3308      	adds	r3, #8
  40545e:	2e00      	cmp	r6, #0
  405460:	d0f9      	beq.n	405456 <__sfvwrite_r+0x176>
  405462:	4632      	mov	r2, r6
  405464:	210a      	movs	r1, #10
  405466:	4628      	mov	r0, r5
  405468:	f000 f982 	bl	405770 <memchr>
  40546c:	2800      	cmp	r0, #0
  40546e:	f000 80a1 	beq.w	4055b4 <__sfvwrite_r+0x2d4>
  405472:	3001      	adds	r0, #1
  405474:	eba0 0905 	sub.w	r9, r0, r5
  405478:	e7c2      	b.n	405400 <__sfvwrite_r+0x120>
  40547a:	6820      	ldr	r0, [r4, #0]
  40547c:	6923      	ldr	r3, [r4, #16]
  40547e:	4298      	cmp	r0, r3
  405480:	d802      	bhi.n	405488 <__sfvwrite_r+0x1a8>
  405482:	6963      	ldr	r3, [r4, #20]
  405484:	429f      	cmp	r7, r3
  405486:	d25d      	bcs.n	405544 <__sfvwrite_r+0x264>
  405488:	45b8      	cmp	r8, r7
  40548a:	bf28      	it	cs
  40548c:	46b8      	movcs	r8, r7
  40548e:	4642      	mov	r2, r8
  405490:	4649      	mov	r1, r9
  405492:	f000 f9bd 	bl	405810 <memmove>
  405496:	68a3      	ldr	r3, [r4, #8]
  405498:	6822      	ldr	r2, [r4, #0]
  40549a:	eba3 0308 	sub.w	r3, r3, r8
  40549e:	4442      	add	r2, r8
  4054a0:	60a3      	str	r3, [r4, #8]
  4054a2:	6022      	str	r2, [r4, #0]
  4054a4:	b10b      	cbz	r3, 4054aa <__sfvwrite_r+0x1ca>
  4054a6:	46c2      	mov	sl, r8
  4054a8:	e779      	b.n	40539e <__sfvwrite_r+0xbe>
  4054aa:	4621      	mov	r1, r4
  4054ac:	9800      	ldr	r0, [sp, #0]
  4054ae:	f7ff fcb3 	bl	404e18 <_fflush_r>
  4054b2:	2800      	cmp	r0, #0
  4054b4:	d192      	bne.n	4053dc <__sfvwrite_r+0xfc>
  4054b6:	46c2      	mov	sl, r8
  4054b8:	e771      	b.n	40539e <__sfvwrite_r+0xbe>
  4054ba:	465a      	mov	r2, fp
  4054bc:	4629      	mov	r1, r5
  4054be:	f000 f9a7 	bl	405810 <memmove>
  4054c2:	68a2      	ldr	r2, [r4, #8]
  4054c4:	6823      	ldr	r3, [r4, #0]
  4054c6:	eba2 020b 	sub.w	r2, r2, fp
  4054ca:	445b      	add	r3, fp
  4054cc:	60a2      	str	r2, [r4, #8]
  4054ce:	6023      	str	r3, [r4, #0]
  4054d0:	e7af      	b.n	405432 <__sfvwrite_r+0x152>
  4054d2:	6820      	ldr	r0, [r4, #0]
  4054d4:	46b8      	mov	r8, r7
  4054d6:	46ba      	mov	sl, r7
  4054d8:	46bb      	mov	fp, r7
  4054da:	e755      	b.n	405388 <__sfvwrite_r+0xa8>
  4054dc:	6962      	ldr	r2, [r4, #20]
  4054de:	6820      	ldr	r0, [r4, #0]
  4054e0:	6921      	ldr	r1, [r4, #16]
  4054e2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4054e6:	eba0 0a01 	sub.w	sl, r0, r1
  4054ea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4054ee:	f10a 0001 	add.w	r0, sl, #1
  4054f2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4054f6:	4438      	add	r0, r7
  4054f8:	4540      	cmp	r0, r8
  4054fa:	4642      	mov	r2, r8
  4054fc:	bf84      	itt	hi
  4054fe:	4680      	movhi	r8, r0
  405500:	4642      	movhi	r2, r8
  405502:	055b      	lsls	r3, r3, #21
  405504:	d544      	bpl.n	405590 <__sfvwrite_r+0x2b0>
  405506:	4611      	mov	r1, r2
  405508:	9800      	ldr	r0, [sp, #0]
  40550a:	f7fd ffb3 	bl	403474 <_malloc_r>
  40550e:	4683      	mov	fp, r0
  405510:	2800      	cmp	r0, #0
  405512:	d055      	beq.n	4055c0 <__sfvwrite_r+0x2e0>
  405514:	4652      	mov	r2, sl
  405516:	6921      	ldr	r1, [r4, #16]
  405518:	f7fe fa5c 	bl	4039d4 <memcpy>
  40551c:	89a3      	ldrh	r3, [r4, #12]
  40551e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405526:	81a3      	strh	r3, [r4, #12]
  405528:	eb0b 000a 	add.w	r0, fp, sl
  40552c:	eba8 030a 	sub.w	r3, r8, sl
  405530:	f8c4 b010 	str.w	fp, [r4, #16]
  405534:	f8c4 8014 	str.w	r8, [r4, #20]
  405538:	6020      	str	r0, [r4, #0]
  40553a:	60a3      	str	r3, [r4, #8]
  40553c:	46b8      	mov	r8, r7
  40553e:	46ba      	mov	sl, r7
  405540:	46bb      	mov	fp, r7
  405542:	e721      	b.n	405388 <__sfvwrite_r+0xa8>
  405544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405548:	42b9      	cmp	r1, r7
  40554a:	bf28      	it	cs
  40554c:	4639      	movcs	r1, r7
  40554e:	464a      	mov	r2, r9
  405550:	fb91 f1f3 	sdiv	r1, r1, r3
  405554:	9800      	ldr	r0, [sp, #0]
  405556:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405558:	fb03 f301 	mul.w	r3, r3, r1
  40555c:	69e1      	ldr	r1, [r4, #28]
  40555e:	47b0      	blx	r6
  405560:	f1b0 0a00 	subs.w	sl, r0, #0
  405564:	f73f af1b 	bgt.w	40539e <__sfvwrite_r+0xbe>
  405568:	e738      	b.n	4053dc <__sfvwrite_r+0xfc>
  40556a:	461a      	mov	r2, r3
  40556c:	4629      	mov	r1, r5
  40556e:	9301      	str	r3, [sp, #4]
  405570:	f000 f94e 	bl	405810 <memmove>
  405574:	6822      	ldr	r2, [r4, #0]
  405576:	9b01      	ldr	r3, [sp, #4]
  405578:	9800      	ldr	r0, [sp, #0]
  40557a:	441a      	add	r2, r3
  40557c:	6022      	str	r2, [r4, #0]
  40557e:	4621      	mov	r1, r4
  405580:	f7ff fc4a 	bl	404e18 <_fflush_r>
  405584:	9b01      	ldr	r3, [sp, #4]
  405586:	2800      	cmp	r0, #0
  405588:	f47f af28 	bne.w	4053dc <__sfvwrite_r+0xfc>
  40558c:	461f      	mov	r7, r3
  40558e:	e750      	b.n	405432 <__sfvwrite_r+0x152>
  405590:	9800      	ldr	r0, [sp, #0]
  405592:	f000 f9a1 	bl	4058d8 <_realloc_r>
  405596:	4683      	mov	fp, r0
  405598:	2800      	cmp	r0, #0
  40559a:	d1c5      	bne.n	405528 <__sfvwrite_r+0x248>
  40559c:	9d00      	ldr	r5, [sp, #0]
  40559e:	6921      	ldr	r1, [r4, #16]
  4055a0:	4628      	mov	r0, r5
  4055a2:	f7ff fdb7 	bl	405114 <_free_r>
  4055a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4055aa:	220c      	movs	r2, #12
  4055ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4055b0:	602a      	str	r2, [r5, #0]
  4055b2:	e715      	b.n	4053e0 <__sfvwrite_r+0x100>
  4055b4:	f106 0901 	add.w	r9, r6, #1
  4055b8:	e722      	b.n	405400 <__sfvwrite_r+0x120>
  4055ba:	f04f 30ff 	mov.w	r0, #4294967295
  4055be:	e6bf      	b.n	405340 <__sfvwrite_r+0x60>
  4055c0:	9a00      	ldr	r2, [sp, #0]
  4055c2:	230c      	movs	r3, #12
  4055c4:	6013      	str	r3, [r2, #0]
  4055c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4055ca:	e709      	b.n	4053e0 <__sfvwrite_r+0x100>
  4055cc:	7ffffc00 	.word	0x7ffffc00

004055d0 <_fwalk_reent>:
  4055d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4055d4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4055d8:	d01f      	beq.n	40561a <_fwalk_reent+0x4a>
  4055da:	4688      	mov	r8, r1
  4055dc:	4606      	mov	r6, r0
  4055de:	f04f 0900 	mov.w	r9, #0
  4055e2:	687d      	ldr	r5, [r7, #4]
  4055e4:	68bc      	ldr	r4, [r7, #8]
  4055e6:	3d01      	subs	r5, #1
  4055e8:	d411      	bmi.n	40560e <_fwalk_reent+0x3e>
  4055ea:	89a3      	ldrh	r3, [r4, #12]
  4055ec:	2b01      	cmp	r3, #1
  4055ee:	f105 35ff 	add.w	r5, r5, #4294967295
  4055f2:	d908      	bls.n	405606 <_fwalk_reent+0x36>
  4055f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4055f8:	3301      	adds	r3, #1
  4055fa:	4621      	mov	r1, r4
  4055fc:	4630      	mov	r0, r6
  4055fe:	d002      	beq.n	405606 <_fwalk_reent+0x36>
  405600:	47c0      	blx	r8
  405602:	ea49 0900 	orr.w	r9, r9, r0
  405606:	1c6b      	adds	r3, r5, #1
  405608:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40560c:	d1ed      	bne.n	4055ea <_fwalk_reent+0x1a>
  40560e:	683f      	ldr	r7, [r7, #0]
  405610:	2f00      	cmp	r7, #0
  405612:	d1e6      	bne.n	4055e2 <_fwalk_reent+0x12>
  405614:	4648      	mov	r0, r9
  405616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40561a:	46b9      	mov	r9, r7
  40561c:	4648      	mov	r0, r9
  40561e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405622:	bf00      	nop

00405624 <__locale_mb_cur_max>:
  405624:	4b04      	ldr	r3, [pc, #16]	; (405638 <__locale_mb_cur_max+0x14>)
  405626:	4a05      	ldr	r2, [pc, #20]	; (40563c <__locale_mb_cur_max+0x18>)
  405628:	681b      	ldr	r3, [r3, #0]
  40562a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40562c:	2b00      	cmp	r3, #0
  40562e:	bf08      	it	eq
  405630:	4613      	moveq	r3, r2
  405632:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405636:	4770      	bx	lr
  405638:	2040000c 	.word	0x2040000c
  40563c:	2040084c 	.word	0x2040084c

00405640 <__retarget_lock_init_recursive>:
  405640:	4770      	bx	lr
  405642:	bf00      	nop

00405644 <__retarget_lock_close_recursive>:
  405644:	4770      	bx	lr
  405646:	bf00      	nop

00405648 <__retarget_lock_acquire_recursive>:
  405648:	4770      	bx	lr
  40564a:	bf00      	nop

0040564c <__retarget_lock_release_recursive>:
  40564c:	4770      	bx	lr
  40564e:	bf00      	nop

00405650 <__swhatbuf_r>:
  405650:	b570      	push	{r4, r5, r6, lr}
  405652:	460c      	mov	r4, r1
  405654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405658:	2900      	cmp	r1, #0
  40565a:	b090      	sub	sp, #64	; 0x40
  40565c:	4615      	mov	r5, r2
  40565e:	461e      	mov	r6, r3
  405660:	db14      	blt.n	40568c <__swhatbuf_r+0x3c>
  405662:	aa01      	add	r2, sp, #4
  405664:	f000 fc9e 	bl	405fa4 <_fstat_r>
  405668:	2800      	cmp	r0, #0
  40566a:	db0f      	blt.n	40568c <__swhatbuf_r+0x3c>
  40566c:	9a02      	ldr	r2, [sp, #8]
  40566e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405672:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405676:	fab2 f282 	clz	r2, r2
  40567a:	0952      	lsrs	r2, r2, #5
  40567c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405680:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405684:	6032      	str	r2, [r6, #0]
  405686:	602b      	str	r3, [r5, #0]
  405688:	b010      	add	sp, #64	; 0x40
  40568a:	bd70      	pop	{r4, r5, r6, pc}
  40568c:	89a2      	ldrh	r2, [r4, #12]
  40568e:	2300      	movs	r3, #0
  405690:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405694:	6033      	str	r3, [r6, #0]
  405696:	d004      	beq.n	4056a2 <__swhatbuf_r+0x52>
  405698:	2240      	movs	r2, #64	; 0x40
  40569a:	4618      	mov	r0, r3
  40569c:	602a      	str	r2, [r5, #0]
  40569e:	b010      	add	sp, #64	; 0x40
  4056a0:	bd70      	pop	{r4, r5, r6, pc}
  4056a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4056a6:	602b      	str	r3, [r5, #0]
  4056a8:	b010      	add	sp, #64	; 0x40
  4056aa:	bd70      	pop	{r4, r5, r6, pc}

004056ac <__smakebuf_r>:
  4056ac:	898a      	ldrh	r2, [r1, #12]
  4056ae:	0792      	lsls	r2, r2, #30
  4056b0:	460b      	mov	r3, r1
  4056b2:	d506      	bpl.n	4056c2 <__smakebuf_r+0x16>
  4056b4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4056b8:	2101      	movs	r1, #1
  4056ba:	601a      	str	r2, [r3, #0]
  4056bc:	611a      	str	r2, [r3, #16]
  4056be:	6159      	str	r1, [r3, #20]
  4056c0:	4770      	bx	lr
  4056c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4056c4:	b083      	sub	sp, #12
  4056c6:	ab01      	add	r3, sp, #4
  4056c8:	466a      	mov	r2, sp
  4056ca:	460c      	mov	r4, r1
  4056cc:	4606      	mov	r6, r0
  4056ce:	f7ff ffbf 	bl	405650 <__swhatbuf_r>
  4056d2:	9900      	ldr	r1, [sp, #0]
  4056d4:	4605      	mov	r5, r0
  4056d6:	4630      	mov	r0, r6
  4056d8:	f7fd fecc 	bl	403474 <_malloc_r>
  4056dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4056e0:	b1d8      	cbz	r0, 40571a <__smakebuf_r+0x6e>
  4056e2:	9a01      	ldr	r2, [sp, #4]
  4056e4:	4f15      	ldr	r7, [pc, #84]	; (40573c <__smakebuf_r+0x90>)
  4056e6:	9900      	ldr	r1, [sp, #0]
  4056e8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4056ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4056ee:	81a3      	strh	r3, [r4, #12]
  4056f0:	6020      	str	r0, [r4, #0]
  4056f2:	6120      	str	r0, [r4, #16]
  4056f4:	6161      	str	r1, [r4, #20]
  4056f6:	b91a      	cbnz	r2, 405700 <__smakebuf_r+0x54>
  4056f8:	432b      	orrs	r3, r5
  4056fa:	81a3      	strh	r3, [r4, #12]
  4056fc:	b003      	add	sp, #12
  4056fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405700:	4630      	mov	r0, r6
  405702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405706:	f000 fc61 	bl	405fcc <_isatty_r>
  40570a:	b1a0      	cbz	r0, 405736 <__smakebuf_r+0x8a>
  40570c:	89a3      	ldrh	r3, [r4, #12]
  40570e:	f023 0303 	bic.w	r3, r3, #3
  405712:	f043 0301 	orr.w	r3, r3, #1
  405716:	b21b      	sxth	r3, r3
  405718:	e7ee      	b.n	4056f8 <__smakebuf_r+0x4c>
  40571a:	059a      	lsls	r2, r3, #22
  40571c:	d4ee      	bmi.n	4056fc <__smakebuf_r+0x50>
  40571e:	f023 0303 	bic.w	r3, r3, #3
  405722:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405726:	f043 0302 	orr.w	r3, r3, #2
  40572a:	2101      	movs	r1, #1
  40572c:	81a3      	strh	r3, [r4, #12]
  40572e:	6022      	str	r2, [r4, #0]
  405730:	6122      	str	r2, [r4, #16]
  405732:	6161      	str	r1, [r4, #20]
  405734:	e7e2      	b.n	4056fc <__smakebuf_r+0x50>
  405736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40573a:	e7dd      	b.n	4056f8 <__smakebuf_r+0x4c>
  40573c:	00404e6d 	.word	0x00404e6d

00405740 <__ascii_mbtowc>:
  405740:	b082      	sub	sp, #8
  405742:	b149      	cbz	r1, 405758 <__ascii_mbtowc+0x18>
  405744:	b15a      	cbz	r2, 40575e <__ascii_mbtowc+0x1e>
  405746:	b16b      	cbz	r3, 405764 <__ascii_mbtowc+0x24>
  405748:	7813      	ldrb	r3, [r2, #0]
  40574a:	600b      	str	r3, [r1, #0]
  40574c:	7812      	ldrb	r2, [r2, #0]
  40574e:	1c10      	adds	r0, r2, #0
  405750:	bf18      	it	ne
  405752:	2001      	movne	r0, #1
  405754:	b002      	add	sp, #8
  405756:	4770      	bx	lr
  405758:	a901      	add	r1, sp, #4
  40575a:	2a00      	cmp	r2, #0
  40575c:	d1f3      	bne.n	405746 <__ascii_mbtowc+0x6>
  40575e:	4610      	mov	r0, r2
  405760:	b002      	add	sp, #8
  405762:	4770      	bx	lr
  405764:	f06f 0001 	mvn.w	r0, #1
  405768:	e7f4      	b.n	405754 <__ascii_mbtowc+0x14>
  40576a:	bf00      	nop
  40576c:	0000      	movs	r0, r0
	...

00405770 <memchr>:
  405770:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405774:	2a10      	cmp	r2, #16
  405776:	db2b      	blt.n	4057d0 <memchr+0x60>
  405778:	f010 0f07 	tst.w	r0, #7
  40577c:	d008      	beq.n	405790 <memchr+0x20>
  40577e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405782:	3a01      	subs	r2, #1
  405784:	428b      	cmp	r3, r1
  405786:	d02d      	beq.n	4057e4 <memchr+0x74>
  405788:	f010 0f07 	tst.w	r0, #7
  40578c:	b342      	cbz	r2, 4057e0 <memchr+0x70>
  40578e:	d1f6      	bne.n	40577e <memchr+0xe>
  405790:	b4f0      	push	{r4, r5, r6, r7}
  405792:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405796:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40579a:	f022 0407 	bic.w	r4, r2, #7
  40579e:	f07f 0700 	mvns.w	r7, #0
  4057a2:	2300      	movs	r3, #0
  4057a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4057a8:	3c08      	subs	r4, #8
  4057aa:	ea85 0501 	eor.w	r5, r5, r1
  4057ae:	ea86 0601 	eor.w	r6, r6, r1
  4057b2:	fa85 f547 	uadd8	r5, r5, r7
  4057b6:	faa3 f587 	sel	r5, r3, r7
  4057ba:	fa86 f647 	uadd8	r6, r6, r7
  4057be:	faa5 f687 	sel	r6, r5, r7
  4057c2:	b98e      	cbnz	r6, 4057e8 <memchr+0x78>
  4057c4:	d1ee      	bne.n	4057a4 <memchr+0x34>
  4057c6:	bcf0      	pop	{r4, r5, r6, r7}
  4057c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4057cc:	f002 0207 	and.w	r2, r2, #7
  4057d0:	b132      	cbz	r2, 4057e0 <memchr+0x70>
  4057d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4057d6:	3a01      	subs	r2, #1
  4057d8:	ea83 0301 	eor.w	r3, r3, r1
  4057dc:	b113      	cbz	r3, 4057e4 <memchr+0x74>
  4057de:	d1f8      	bne.n	4057d2 <memchr+0x62>
  4057e0:	2000      	movs	r0, #0
  4057e2:	4770      	bx	lr
  4057e4:	3801      	subs	r0, #1
  4057e6:	4770      	bx	lr
  4057e8:	2d00      	cmp	r5, #0
  4057ea:	bf06      	itte	eq
  4057ec:	4635      	moveq	r5, r6
  4057ee:	3803      	subeq	r0, #3
  4057f0:	3807      	subne	r0, #7
  4057f2:	f015 0f01 	tst.w	r5, #1
  4057f6:	d107      	bne.n	405808 <memchr+0x98>
  4057f8:	3001      	adds	r0, #1
  4057fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4057fe:	bf02      	ittt	eq
  405800:	3001      	addeq	r0, #1
  405802:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405806:	3001      	addeq	r0, #1
  405808:	bcf0      	pop	{r4, r5, r6, r7}
  40580a:	3801      	subs	r0, #1
  40580c:	4770      	bx	lr
  40580e:	bf00      	nop

00405810 <memmove>:
  405810:	4288      	cmp	r0, r1
  405812:	b5f0      	push	{r4, r5, r6, r7, lr}
  405814:	d90d      	bls.n	405832 <memmove+0x22>
  405816:	188b      	adds	r3, r1, r2
  405818:	4298      	cmp	r0, r3
  40581a:	d20a      	bcs.n	405832 <memmove+0x22>
  40581c:	1884      	adds	r4, r0, r2
  40581e:	2a00      	cmp	r2, #0
  405820:	d051      	beq.n	4058c6 <memmove+0xb6>
  405822:	4622      	mov	r2, r4
  405824:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405828:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40582c:	4299      	cmp	r1, r3
  40582e:	d1f9      	bne.n	405824 <memmove+0x14>
  405830:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405832:	2a0f      	cmp	r2, #15
  405834:	d948      	bls.n	4058c8 <memmove+0xb8>
  405836:	ea41 0300 	orr.w	r3, r1, r0
  40583a:	079b      	lsls	r3, r3, #30
  40583c:	d146      	bne.n	4058cc <memmove+0xbc>
  40583e:	f100 0410 	add.w	r4, r0, #16
  405842:	f101 0310 	add.w	r3, r1, #16
  405846:	4615      	mov	r5, r2
  405848:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40584c:	f844 6c10 	str.w	r6, [r4, #-16]
  405850:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405854:	f844 6c0c 	str.w	r6, [r4, #-12]
  405858:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40585c:	f844 6c08 	str.w	r6, [r4, #-8]
  405860:	3d10      	subs	r5, #16
  405862:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405866:	f844 6c04 	str.w	r6, [r4, #-4]
  40586a:	2d0f      	cmp	r5, #15
  40586c:	f103 0310 	add.w	r3, r3, #16
  405870:	f104 0410 	add.w	r4, r4, #16
  405874:	d8e8      	bhi.n	405848 <memmove+0x38>
  405876:	f1a2 0310 	sub.w	r3, r2, #16
  40587a:	f023 030f 	bic.w	r3, r3, #15
  40587e:	f002 0e0f 	and.w	lr, r2, #15
  405882:	3310      	adds	r3, #16
  405884:	f1be 0f03 	cmp.w	lr, #3
  405888:	4419      	add	r1, r3
  40588a:	4403      	add	r3, r0
  40588c:	d921      	bls.n	4058d2 <memmove+0xc2>
  40588e:	1f1e      	subs	r6, r3, #4
  405890:	460d      	mov	r5, r1
  405892:	4674      	mov	r4, lr
  405894:	3c04      	subs	r4, #4
  405896:	f855 7b04 	ldr.w	r7, [r5], #4
  40589a:	f846 7f04 	str.w	r7, [r6, #4]!
  40589e:	2c03      	cmp	r4, #3
  4058a0:	d8f8      	bhi.n	405894 <memmove+0x84>
  4058a2:	f1ae 0404 	sub.w	r4, lr, #4
  4058a6:	f024 0403 	bic.w	r4, r4, #3
  4058aa:	3404      	adds	r4, #4
  4058ac:	4421      	add	r1, r4
  4058ae:	4423      	add	r3, r4
  4058b0:	f002 0203 	and.w	r2, r2, #3
  4058b4:	b162      	cbz	r2, 4058d0 <memmove+0xc0>
  4058b6:	3b01      	subs	r3, #1
  4058b8:	440a      	add	r2, r1
  4058ba:	f811 4b01 	ldrb.w	r4, [r1], #1
  4058be:	f803 4f01 	strb.w	r4, [r3, #1]!
  4058c2:	428a      	cmp	r2, r1
  4058c4:	d1f9      	bne.n	4058ba <memmove+0xaa>
  4058c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4058c8:	4603      	mov	r3, r0
  4058ca:	e7f3      	b.n	4058b4 <memmove+0xa4>
  4058cc:	4603      	mov	r3, r0
  4058ce:	e7f2      	b.n	4058b6 <memmove+0xa6>
  4058d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4058d2:	4672      	mov	r2, lr
  4058d4:	e7ee      	b.n	4058b4 <memmove+0xa4>
  4058d6:	bf00      	nop

004058d8 <_realloc_r>:
  4058d8:	2900      	cmp	r1, #0
  4058da:	f000 8095 	beq.w	405a08 <_realloc_r+0x130>
  4058de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4058e2:	460d      	mov	r5, r1
  4058e4:	4616      	mov	r6, r2
  4058e6:	b083      	sub	sp, #12
  4058e8:	4680      	mov	r8, r0
  4058ea:	f106 070b 	add.w	r7, r6, #11
  4058ee:	f7fe f959 	bl	403ba4 <__malloc_lock>
  4058f2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4058f6:	2f16      	cmp	r7, #22
  4058f8:	f02e 0403 	bic.w	r4, lr, #3
  4058fc:	f1a5 0908 	sub.w	r9, r5, #8
  405900:	d83c      	bhi.n	40597c <_realloc_r+0xa4>
  405902:	2210      	movs	r2, #16
  405904:	4617      	mov	r7, r2
  405906:	42be      	cmp	r6, r7
  405908:	d83d      	bhi.n	405986 <_realloc_r+0xae>
  40590a:	4294      	cmp	r4, r2
  40590c:	da43      	bge.n	405996 <_realloc_r+0xbe>
  40590e:	4bc4      	ldr	r3, [pc, #784]	; (405c20 <_realloc_r+0x348>)
  405910:	6899      	ldr	r1, [r3, #8]
  405912:	eb09 0004 	add.w	r0, r9, r4
  405916:	4288      	cmp	r0, r1
  405918:	f000 80b4 	beq.w	405a84 <_realloc_r+0x1ac>
  40591c:	6843      	ldr	r3, [r0, #4]
  40591e:	f023 0101 	bic.w	r1, r3, #1
  405922:	4401      	add	r1, r0
  405924:	6849      	ldr	r1, [r1, #4]
  405926:	07c9      	lsls	r1, r1, #31
  405928:	d54c      	bpl.n	4059c4 <_realloc_r+0xec>
  40592a:	f01e 0f01 	tst.w	lr, #1
  40592e:	f000 809b 	beq.w	405a68 <_realloc_r+0x190>
  405932:	4631      	mov	r1, r6
  405934:	4640      	mov	r0, r8
  405936:	f7fd fd9d 	bl	403474 <_malloc_r>
  40593a:	4606      	mov	r6, r0
  40593c:	2800      	cmp	r0, #0
  40593e:	d03a      	beq.n	4059b6 <_realloc_r+0xde>
  405940:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405944:	f023 0301 	bic.w	r3, r3, #1
  405948:	444b      	add	r3, r9
  40594a:	f1a0 0208 	sub.w	r2, r0, #8
  40594e:	429a      	cmp	r2, r3
  405950:	f000 8121 	beq.w	405b96 <_realloc_r+0x2be>
  405954:	1f22      	subs	r2, r4, #4
  405956:	2a24      	cmp	r2, #36	; 0x24
  405958:	f200 8107 	bhi.w	405b6a <_realloc_r+0x292>
  40595c:	2a13      	cmp	r2, #19
  40595e:	f200 80db 	bhi.w	405b18 <_realloc_r+0x240>
  405962:	4603      	mov	r3, r0
  405964:	462a      	mov	r2, r5
  405966:	6811      	ldr	r1, [r2, #0]
  405968:	6019      	str	r1, [r3, #0]
  40596a:	6851      	ldr	r1, [r2, #4]
  40596c:	6059      	str	r1, [r3, #4]
  40596e:	6892      	ldr	r2, [r2, #8]
  405970:	609a      	str	r2, [r3, #8]
  405972:	4629      	mov	r1, r5
  405974:	4640      	mov	r0, r8
  405976:	f7ff fbcd 	bl	405114 <_free_r>
  40597a:	e01c      	b.n	4059b6 <_realloc_r+0xde>
  40597c:	f027 0707 	bic.w	r7, r7, #7
  405980:	2f00      	cmp	r7, #0
  405982:	463a      	mov	r2, r7
  405984:	dabf      	bge.n	405906 <_realloc_r+0x2e>
  405986:	2600      	movs	r6, #0
  405988:	230c      	movs	r3, #12
  40598a:	4630      	mov	r0, r6
  40598c:	f8c8 3000 	str.w	r3, [r8]
  405990:	b003      	add	sp, #12
  405992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405996:	462e      	mov	r6, r5
  405998:	1be3      	subs	r3, r4, r7
  40599a:	2b0f      	cmp	r3, #15
  40599c:	d81e      	bhi.n	4059dc <_realloc_r+0x104>
  40599e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4059a2:	f003 0301 	and.w	r3, r3, #1
  4059a6:	4323      	orrs	r3, r4
  4059a8:	444c      	add	r4, r9
  4059aa:	f8c9 3004 	str.w	r3, [r9, #4]
  4059ae:	6863      	ldr	r3, [r4, #4]
  4059b0:	f043 0301 	orr.w	r3, r3, #1
  4059b4:	6063      	str	r3, [r4, #4]
  4059b6:	4640      	mov	r0, r8
  4059b8:	f7fe f8fa 	bl	403bb0 <__malloc_unlock>
  4059bc:	4630      	mov	r0, r6
  4059be:	b003      	add	sp, #12
  4059c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059c4:	f023 0303 	bic.w	r3, r3, #3
  4059c8:	18e1      	adds	r1, r4, r3
  4059ca:	4291      	cmp	r1, r2
  4059cc:	db1f      	blt.n	405a0e <_realloc_r+0x136>
  4059ce:	68c3      	ldr	r3, [r0, #12]
  4059d0:	6882      	ldr	r2, [r0, #8]
  4059d2:	462e      	mov	r6, r5
  4059d4:	60d3      	str	r3, [r2, #12]
  4059d6:	460c      	mov	r4, r1
  4059d8:	609a      	str	r2, [r3, #8]
  4059da:	e7dd      	b.n	405998 <_realloc_r+0xc0>
  4059dc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4059e0:	eb09 0107 	add.w	r1, r9, r7
  4059e4:	f002 0201 	and.w	r2, r2, #1
  4059e8:	444c      	add	r4, r9
  4059ea:	f043 0301 	orr.w	r3, r3, #1
  4059ee:	4317      	orrs	r7, r2
  4059f0:	f8c9 7004 	str.w	r7, [r9, #4]
  4059f4:	604b      	str	r3, [r1, #4]
  4059f6:	6863      	ldr	r3, [r4, #4]
  4059f8:	f043 0301 	orr.w	r3, r3, #1
  4059fc:	3108      	adds	r1, #8
  4059fe:	6063      	str	r3, [r4, #4]
  405a00:	4640      	mov	r0, r8
  405a02:	f7ff fb87 	bl	405114 <_free_r>
  405a06:	e7d6      	b.n	4059b6 <_realloc_r+0xde>
  405a08:	4611      	mov	r1, r2
  405a0a:	f7fd bd33 	b.w	403474 <_malloc_r>
  405a0e:	f01e 0f01 	tst.w	lr, #1
  405a12:	d18e      	bne.n	405932 <_realloc_r+0x5a>
  405a14:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405a18:	eba9 0a01 	sub.w	sl, r9, r1
  405a1c:	f8da 1004 	ldr.w	r1, [sl, #4]
  405a20:	f021 0103 	bic.w	r1, r1, #3
  405a24:	440b      	add	r3, r1
  405a26:	4423      	add	r3, r4
  405a28:	4293      	cmp	r3, r2
  405a2a:	db25      	blt.n	405a78 <_realloc_r+0x1a0>
  405a2c:	68c2      	ldr	r2, [r0, #12]
  405a2e:	6881      	ldr	r1, [r0, #8]
  405a30:	4656      	mov	r6, sl
  405a32:	60ca      	str	r2, [r1, #12]
  405a34:	6091      	str	r1, [r2, #8]
  405a36:	f8da 100c 	ldr.w	r1, [sl, #12]
  405a3a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405a3e:	1f22      	subs	r2, r4, #4
  405a40:	2a24      	cmp	r2, #36	; 0x24
  405a42:	60c1      	str	r1, [r0, #12]
  405a44:	6088      	str	r0, [r1, #8]
  405a46:	f200 8094 	bhi.w	405b72 <_realloc_r+0x29a>
  405a4a:	2a13      	cmp	r2, #19
  405a4c:	d96f      	bls.n	405b2e <_realloc_r+0x256>
  405a4e:	6829      	ldr	r1, [r5, #0]
  405a50:	f8ca 1008 	str.w	r1, [sl, #8]
  405a54:	6869      	ldr	r1, [r5, #4]
  405a56:	f8ca 100c 	str.w	r1, [sl, #12]
  405a5a:	2a1b      	cmp	r2, #27
  405a5c:	f200 80a2 	bhi.w	405ba4 <_realloc_r+0x2cc>
  405a60:	3508      	adds	r5, #8
  405a62:	f10a 0210 	add.w	r2, sl, #16
  405a66:	e063      	b.n	405b30 <_realloc_r+0x258>
  405a68:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405a6c:	eba9 0a03 	sub.w	sl, r9, r3
  405a70:	f8da 1004 	ldr.w	r1, [sl, #4]
  405a74:	f021 0103 	bic.w	r1, r1, #3
  405a78:	1863      	adds	r3, r4, r1
  405a7a:	4293      	cmp	r3, r2
  405a7c:	f6ff af59 	blt.w	405932 <_realloc_r+0x5a>
  405a80:	4656      	mov	r6, sl
  405a82:	e7d8      	b.n	405a36 <_realloc_r+0x15e>
  405a84:	6841      	ldr	r1, [r0, #4]
  405a86:	f021 0b03 	bic.w	fp, r1, #3
  405a8a:	44a3      	add	fp, r4
  405a8c:	f107 0010 	add.w	r0, r7, #16
  405a90:	4583      	cmp	fp, r0
  405a92:	da56      	bge.n	405b42 <_realloc_r+0x26a>
  405a94:	f01e 0f01 	tst.w	lr, #1
  405a98:	f47f af4b 	bne.w	405932 <_realloc_r+0x5a>
  405a9c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405aa0:	eba9 0a01 	sub.w	sl, r9, r1
  405aa4:	f8da 1004 	ldr.w	r1, [sl, #4]
  405aa8:	f021 0103 	bic.w	r1, r1, #3
  405aac:	448b      	add	fp, r1
  405aae:	4558      	cmp	r0, fp
  405ab0:	dce2      	bgt.n	405a78 <_realloc_r+0x1a0>
  405ab2:	4656      	mov	r6, sl
  405ab4:	f8da 100c 	ldr.w	r1, [sl, #12]
  405ab8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405abc:	1f22      	subs	r2, r4, #4
  405abe:	2a24      	cmp	r2, #36	; 0x24
  405ac0:	60c1      	str	r1, [r0, #12]
  405ac2:	6088      	str	r0, [r1, #8]
  405ac4:	f200 808f 	bhi.w	405be6 <_realloc_r+0x30e>
  405ac8:	2a13      	cmp	r2, #19
  405aca:	f240 808a 	bls.w	405be2 <_realloc_r+0x30a>
  405ace:	6829      	ldr	r1, [r5, #0]
  405ad0:	f8ca 1008 	str.w	r1, [sl, #8]
  405ad4:	6869      	ldr	r1, [r5, #4]
  405ad6:	f8ca 100c 	str.w	r1, [sl, #12]
  405ada:	2a1b      	cmp	r2, #27
  405adc:	f200 808a 	bhi.w	405bf4 <_realloc_r+0x31c>
  405ae0:	3508      	adds	r5, #8
  405ae2:	f10a 0210 	add.w	r2, sl, #16
  405ae6:	6829      	ldr	r1, [r5, #0]
  405ae8:	6011      	str	r1, [r2, #0]
  405aea:	6869      	ldr	r1, [r5, #4]
  405aec:	6051      	str	r1, [r2, #4]
  405aee:	68a9      	ldr	r1, [r5, #8]
  405af0:	6091      	str	r1, [r2, #8]
  405af2:	eb0a 0107 	add.w	r1, sl, r7
  405af6:	ebab 0207 	sub.w	r2, fp, r7
  405afa:	f042 0201 	orr.w	r2, r2, #1
  405afe:	6099      	str	r1, [r3, #8]
  405b00:	604a      	str	r2, [r1, #4]
  405b02:	f8da 3004 	ldr.w	r3, [sl, #4]
  405b06:	f003 0301 	and.w	r3, r3, #1
  405b0a:	431f      	orrs	r7, r3
  405b0c:	4640      	mov	r0, r8
  405b0e:	f8ca 7004 	str.w	r7, [sl, #4]
  405b12:	f7fe f84d 	bl	403bb0 <__malloc_unlock>
  405b16:	e751      	b.n	4059bc <_realloc_r+0xe4>
  405b18:	682b      	ldr	r3, [r5, #0]
  405b1a:	6003      	str	r3, [r0, #0]
  405b1c:	686b      	ldr	r3, [r5, #4]
  405b1e:	6043      	str	r3, [r0, #4]
  405b20:	2a1b      	cmp	r2, #27
  405b22:	d82d      	bhi.n	405b80 <_realloc_r+0x2a8>
  405b24:	f100 0308 	add.w	r3, r0, #8
  405b28:	f105 0208 	add.w	r2, r5, #8
  405b2c:	e71b      	b.n	405966 <_realloc_r+0x8e>
  405b2e:	4632      	mov	r2, r6
  405b30:	6829      	ldr	r1, [r5, #0]
  405b32:	6011      	str	r1, [r2, #0]
  405b34:	6869      	ldr	r1, [r5, #4]
  405b36:	6051      	str	r1, [r2, #4]
  405b38:	68a9      	ldr	r1, [r5, #8]
  405b3a:	6091      	str	r1, [r2, #8]
  405b3c:	461c      	mov	r4, r3
  405b3e:	46d1      	mov	r9, sl
  405b40:	e72a      	b.n	405998 <_realloc_r+0xc0>
  405b42:	eb09 0107 	add.w	r1, r9, r7
  405b46:	ebab 0b07 	sub.w	fp, fp, r7
  405b4a:	f04b 0201 	orr.w	r2, fp, #1
  405b4e:	6099      	str	r1, [r3, #8]
  405b50:	604a      	str	r2, [r1, #4]
  405b52:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405b56:	f003 0301 	and.w	r3, r3, #1
  405b5a:	431f      	orrs	r7, r3
  405b5c:	4640      	mov	r0, r8
  405b5e:	f845 7c04 	str.w	r7, [r5, #-4]
  405b62:	f7fe f825 	bl	403bb0 <__malloc_unlock>
  405b66:	462e      	mov	r6, r5
  405b68:	e728      	b.n	4059bc <_realloc_r+0xe4>
  405b6a:	4629      	mov	r1, r5
  405b6c:	f7ff fe50 	bl	405810 <memmove>
  405b70:	e6ff      	b.n	405972 <_realloc_r+0x9a>
  405b72:	4629      	mov	r1, r5
  405b74:	4630      	mov	r0, r6
  405b76:	461c      	mov	r4, r3
  405b78:	46d1      	mov	r9, sl
  405b7a:	f7ff fe49 	bl	405810 <memmove>
  405b7e:	e70b      	b.n	405998 <_realloc_r+0xc0>
  405b80:	68ab      	ldr	r3, [r5, #8]
  405b82:	6083      	str	r3, [r0, #8]
  405b84:	68eb      	ldr	r3, [r5, #12]
  405b86:	60c3      	str	r3, [r0, #12]
  405b88:	2a24      	cmp	r2, #36	; 0x24
  405b8a:	d017      	beq.n	405bbc <_realloc_r+0x2e4>
  405b8c:	f100 0310 	add.w	r3, r0, #16
  405b90:	f105 0210 	add.w	r2, r5, #16
  405b94:	e6e7      	b.n	405966 <_realloc_r+0x8e>
  405b96:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405b9a:	f023 0303 	bic.w	r3, r3, #3
  405b9e:	441c      	add	r4, r3
  405ba0:	462e      	mov	r6, r5
  405ba2:	e6f9      	b.n	405998 <_realloc_r+0xc0>
  405ba4:	68a9      	ldr	r1, [r5, #8]
  405ba6:	f8ca 1010 	str.w	r1, [sl, #16]
  405baa:	68e9      	ldr	r1, [r5, #12]
  405bac:	f8ca 1014 	str.w	r1, [sl, #20]
  405bb0:	2a24      	cmp	r2, #36	; 0x24
  405bb2:	d00c      	beq.n	405bce <_realloc_r+0x2f6>
  405bb4:	3510      	adds	r5, #16
  405bb6:	f10a 0218 	add.w	r2, sl, #24
  405bba:	e7b9      	b.n	405b30 <_realloc_r+0x258>
  405bbc:	692b      	ldr	r3, [r5, #16]
  405bbe:	6103      	str	r3, [r0, #16]
  405bc0:	696b      	ldr	r3, [r5, #20]
  405bc2:	6143      	str	r3, [r0, #20]
  405bc4:	f105 0218 	add.w	r2, r5, #24
  405bc8:	f100 0318 	add.w	r3, r0, #24
  405bcc:	e6cb      	b.n	405966 <_realloc_r+0x8e>
  405bce:	692a      	ldr	r2, [r5, #16]
  405bd0:	f8ca 2018 	str.w	r2, [sl, #24]
  405bd4:	696a      	ldr	r2, [r5, #20]
  405bd6:	f8ca 201c 	str.w	r2, [sl, #28]
  405bda:	3518      	adds	r5, #24
  405bdc:	f10a 0220 	add.w	r2, sl, #32
  405be0:	e7a6      	b.n	405b30 <_realloc_r+0x258>
  405be2:	4632      	mov	r2, r6
  405be4:	e77f      	b.n	405ae6 <_realloc_r+0x20e>
  405be6:	4629      	mov	r1, r5
  405be8:	4630      	mov	r0, r6
  405bea:	9301      	str	r3, [sp, #4]
  405bec:	f7ff fe10 	bl	405810 <memmove>
  405bf0:	9b01      	ldr	r3, [sp, #4]
  405bf2:	e77e      	b.n	405af2 <_realloc_r+0x21a>
  405bf4:	68a9      	ldr	r1, [r5, #8]
  405bf6:	f8ca 1010 	str.w	r1, [sl, #16]
  405bfa:	68e9      	ldr	r1, [r5, #12]
  405bfc:	f8ca 1014 	str.w	r1, [sl, #20]
  405c00:	2a24      	cmp	r2, #36	; 0x24
  405c02:	d003      	beq.n	405c0c <_realloc_r+0x334>
  405c04:	3510      	adds	r5, #16
  405c06:	f10a 0218 	add.w	r2, sl, #24
  405c0a:	e76c      	b.n	405ae6 <_realloc_r+0x20e>
  405c0c:	692a      	ldr	r2, [r5, #16]
  405c0e:	f8ca 2018 	str.w	r2, [sl, #24]
  405c12:	696a      	ldr	r2, [r5, #20]
  405c14:	f8ca 201c 	str.w	r2, [sl, #28]
  405c18:	3518      	adds	r5, #24
  405c1a:	f10a 0220 	add.w	r2, sl, #32
  405c1e:	e762      	b.n	405ae6 <_realloc_r+0x20e>
  405c20:	20400438 	.word	0x20400438

00405c24 <__sread>:
  405c24:	b510      	push	{r4, lr}
  405c26:	460c      	mov	r4, r1
  405c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405c2c:	f000 f9f6 	bl	40601c <_read_r>
  405c30:	2800      	cmp	r0, #0
  405c32:	db03      	blt.n	405c3c <__sread+0x18>
  405c34:	6d23      	ldr	r3, [r4, #80]	; 0x50
  405c36:	4403      	add	r3, r0
  405c38:	6523      	str	r3, [r4, #80]	; 0x50
  405c3a:	bd10      	pop	{r4, pc}
  405c3c:	89a3      	ldrh	r3, [r4, #12]
  405c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405c42:	81a3      	strh	r3, [r4, #12]
  405c44:	bd10      	pop	{r4, pc}
  405c46:	bf00      	nop

00405c48 <__swrite>:
  405c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c4c:	4616      	mov	r6, r2
  405c4e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  405c52:	461f      	mov	r7, r3
  405c54:	05d3      	lsls	r3, r2, #23
  405c56:	460c      	mov	r4, r1
  405c58:	4605      	mov	r5, r0
  405c5a:	d507      	bpl.n	405c6c <__swrite+0x24>
  405c5c:	2200      	movs	r2, #0
  405c5e:	2302      	movs	r3, #2
  405c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405c64:	f000 f9c4 	bl	405ff0 <_lseek_r>
  405c68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405c70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  405c74:	81a2      	strh	r2, [r4, #12]
  405c76:	463b      	mov	r3, r7
  405c78:	4632      	mov	r2, r6
  405c7a:	4628      	mov	r0, r5
  405c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405c80:	f000 b8a4 	b.w	405dcc <_write_r>

00405c84 <__sseek>:
  405c84:	b510      	push	{r4, lr}
  405c86:	460c      	mov	r4, r1
  405c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405c8c:	f000 f9b0 	bl	405ff0 <_lseek_r>
  405c90:	89a3      	ldrh	r3, [r4, #12]
  405c92:	1c42      	adds	r2, r0, #1
  405c94:	bf0e      	itee	eq
  405c96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405c9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405c9e:	6520      	strne	r0, [r4, #80]	; 0x50
  405ca0:	81a3      	strh	r3, [r4, #12]
  405ca2:	bd10      	pop	{r4, pc}

00405ca4 <__sclose>:
  405ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405ca8:	f000 b908 	b.w	405ebc <_close_r>

00405cac <__swbuf_r>:
  405cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405cae:	460d      	mov	r5, r1
  405cb0:	4614      	mov	r4, r2
  405cb2:	4606      	mov	r6, r0
  405cb4:	b110      	cbz	r0, 405cbc <__swbuf_r+0x10>
  405cb6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405cb8:	2b00      	cmp	r3, #0
  405cba:	d04b      	beq.n	405d54 <__swbuf_r+0xa8>
  405cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405cc0:	69a3      	ldr	r3, [r4, #24]
  405cc2:	60a3      	str	r3, [r4, #8]
  405cc4:	b291      	uxth	r1, r2
  405cc6:	0708      	lsls	r0, r1, #28
  405cc8:	d539      	bpl.n	405d3e <__swbuf_r+0x92>
  405cca:	6923      	ldr	r3, [r4, #16]
  405ccc:	2b00      	cmp	r3, #0
  405cce:	d036      	beq.n	405d3e <__swbuf_r+0x92>
  405cd0:	b2ed      	uxtb	r5, r5
  405cd2:	0489      	lsls	r1, r1, #18
  405cd4:	462f      	mov	r7, r5
  405cd6:	d515      	bpl.n	405d04 <__swbuf_r+0x58>
  405cd8:	6822      	ldr	r2, [r4, #0]
  405cda:	6961      	ldr	r1, [r4, #20]
  405cdc:	1ad3      	subs	r3, r2, r3
  405cde:	428b      	cmp	r3, r1
  405ce0:	da1c      	bge.n	405d1c <__swbuf_r+0x70>
  405ce2:	3301      	adds	r3, #1
  405ce4:	68a1      	ldr	r1, [r4, #8]
  405ce6:	1c50      	adds	r0, r2, #1
  405ce8:	3901      	subs	r1, #1
  405cea:	60a1      	str	r1, [r4, #8]
  405cec:	6020      	str	r0, [r4, #0]
  405cee:	7015      	strb	r5, [r2, #0]
  405cf0:	6962      	ldr	r2, [r4, #20]
  405cf2:	429a      	cmp	r2, r3
  405cf4:	d01a      	beq.n	405d2c <__swbuf_r+0x80>
  405cf6:	89a3      	ldrh	r3, [r4, #12]
  405cf8:	07db      	lsls	r3, r3, #31
  405cfa:	d501      	bpl.n	405d00 <__swbuf_r+0x54>
  405cfc:	2d0a      	cmp	r5, #10
  405cfe:	d015      	beq.n	405d2c <__swbuf_r+0x80>
  405d00:	4638      	mov	r0, r7
  405d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405d04:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405d06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405d0a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  405d0e:	81a2      	strh	r2, [r4, #12]
  405d10:	6822      	ldr	r2, [r4, #0]
  405d12:	6661      	str	r1, [r4, #100]	; 0x64
  405d14:	6961      	ldr	r1, [r4, #20]
  405d16:	1ad3      	subs	r3, r2, r3
  405d18:	428b      	cmp	r3, r1
  405d1a:	dbe2      	blt.n	405ce2 <__swbuf_r+0x36>
  405d1c:	4621      	mov	r1, r4
  405d1e:	4630      	mov	r0, r6
  405d20:	f7ff f87a 	bl	404e18 <_fflush_r>
  405d24:	b940      	cbnz	r0, 405d38 <__swbuf_r+0x8c>
  405d26:	6822      	ldr	r2, [r4, #0]
  405d28:	2301      	movs	r3, #1
  405d2a:	e7db      	b.n	405ce4 <__swbuf_r+0x38>
  405d2c:	4621      	mov	r1, r4
  405d2e:	4630      	mov	r0, r6
  405d30:	f7ff f872 	bl	404e18 <_fflush_r>
  405d34:	2800      	cmp	r0, #0
  405d36:	d0e3      	beq.n	405d00 <__swbuf_r+0x54>
  405d38:	f04f 37ff 	mov.w	r7, #4294967295
  405d3c:	e7e0      	b.n	405d00 <__swbuf_r+0x54>
  405d3e:	4621      	mov	r1, r4
  405d40:	4630      	mov	r0, r6
  405d42:	f7fe ff55 	bl	404bf0 <__swsetup_r>
  405d46:	2800      	cmp	r0, #0
  405d48:	d1f6      	bne.n	405d38 <__swbuf_r+0x8c>
  405d4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405d4e:	6923      	ldr	r3, [r4, #16]
  405d50:	b291      	uxth	r1, r2
  405d52:	e7bd      	b.n	405cd0 <__swbuf_r+0x24>
  405d54:	f7ff f8b8 	bl	404ec8 <__sinit>
  405d58:	e7b0      	b.n	405cbc <__swbuf_r+0x10>
  405d5a:	bf00      	nop

00405d5c <_wcrtomb_r>:
  405d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  405d5e:	4606      	mov	r6, r0
  405d60:	b085      	sub	sp, #20
  405d62:	461f      	mov	r7, r3
  405d64:	b189      	cbz	r1, 405d8a <_wcrtomb_r+0x2e>
  405d66:	4c10      	ldr	r4, [pc, #64]	; (405da8 <_wcrtomb_r+0x4c>)
  405d68:	4d10      	ldr	r5, [pc, #64]	; (405dac <_wcrtomb_r+0x50>)
  405d6a:	6824      	ldr	r4, [r4, #0]
  405d6c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  405d6e:	2c00      	cmp	r4, #0
  405d70:	bf08      	it	eq
  405d72:	462c      	moveq	r4, r5
  405d74:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  405d78:	47a0      	blx	r4
  405d7a:	1c43      	adds	r3, r0, #1
  405d7c:	d103      	bne.n	405d86 <_wcrtomb_r+0x2a>
  405d7e:	2200      	movs	r2, #0
  405d80:	238a      	movs	r3, #138	; 0x8a
  405d82:	603a      	str	r2, [r7, #0]
  405d84:	6033      	str	r3, [r6, #0]
  405d86:	b005      	add	sp, #20
  405d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405d8a:	460c      	mov	r4, r1
  405d8c:	4906      	ldr	r1, [pc, #24]	; (405da8 <_wcrtomb_r+0x4c>)
  405d8e:	4a07      	ldr	r2, [pc, #28]	; (405dac <_wcrtomb_r+0x50>)
  405d90:	6809      	ldr	r1, [r1, #0]
  405d92:	6b49      	ldr	r1, [r1, #52]	; 0x34
  405d94:	2900      	cmp	r1, #0
  405d96:	bf08      	it	eq
  405d98:	4611      	moveq	r1, r2
  405d9a:	4622      	mov	r2, r4
  405d9c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  405da0:	a901      	add	r1, sp, #4
  405da2:	47a0      	blx	r4
  405da4:	e7e9      	b.n	405d7a <_wcrtomb_r+0x1e>
  405da6:	bf00      	nop
  405da8:	2040000c 	.word	0x2040000c
  405dac:	2040084c 	.word	0x2040084c

00405db0 <__ascii_wctomb>:
  405db0:	b121      	cbz	r1, 405dbc <__ascii_wctomb+0xc>
  405db2:	2aff      	cmp	r2, #255	; 0xff
  405db4:	d804      	bhi.n	405dc0 <__ascii_wctomb+0x10>
  405db6:	700a      	strb	r2, [r1, #0]
  405db8:	2001      	movs	r0, #1
  405dba:	4770      	bx	lr
  405dbc:	4608      	mov	r0, r1
  405dbe:	4770      	bx	lr
  405dc0:	238a      	movs	r3, #138	; 0x8a
  405dc2:	6003      	str	r3, [r0, #0]
  405dc4:	f04f 30ff 	mov.w	r0, #4294967295
  405dc8:	4770      	bx	lr
  405dca:	bf00      	nop

00405dcc <_write_r>:
  405dcc:	b570      	push	{r4, r5, r6, lr}
  405dce:	460d      	mov	r5, r1
  405dd0:	4c08      	ldr	r4, [pc, #32]	; (405df4 <_write_r+0x28>)
  405dd2:	4611      	mov	r1, r2
  405dd4:	4606      	mov	r6, r0
  405dd6:	461a      	mov	r2, r3
  405dd8:	4628      	mov	r0, r5
  405dda:	2300      	movs	r3, #0
  405ddc:	6023      	str	r3, [r4, #0]
  405dde:	f7fa fd39 	bl	400854 <_write>
  405de2:	1c43      	adds	r3, r0, #1
  405de4:	d000      	beq.n	405de8 <_write_r+0x1c>
  405de6:	bd70      	pop	{r4, r5, r6, pc}
  405de8:	6823      	ldr	r3, [r4, #0]
  405dea:	2b00      	cmp	r3, #0
  405dec:	d0fb      	beq.n	405de6 <_write_r+0x1a>
  405dee:	6033      	str	r3, [r6, #0]
  405df0:	bd70      	pop	{r4, r5, r6, pc}
  405df2:	bf00      	nop
  405df4:	20400d78 	.word	0x20400d78

00405df8 <__register_exitproc>:
  405df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405dfc:	4d2c      	ldr	r5, [pc, #176]	; (405eb0 <__register_exitproc+0xb8>)
  405dfe:	4606      	mov	r6, r0
  405e00:	6828      	ldr	r0, [r5, #0]
  405e02:	4698      	mov	r8, r3
  405e04:	460f      	mov	r7, r1
  405e06:	4691      	mov	r9, r2
  405e08:	f7ff fc1e 	bl	405648 <__retarget_lock_acquire_recursive>
  405e0c:	4b29      	ldr	r3, [pc, #164]	; (405eb4 <__register_exitproc+0xbc>)
  405e0e:	681c      	ldr	r4, [r3, #0]
  405e10:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405e14:	2b00      	cmp	r3, #0
  405e16:	d03e      	beq.n	405e96 <__register_exitproc+0x9e>
  405e18:	685a      	ldr	r2, [r3, #4]
  405e1a:	2a1f      	cmp	r2, #31
  405e1c:	dc1c      	bgt.n	405e58 <__register_exitproc+0x60>
  405e1e:	f102 0e01 	add.w	lr, r2, #1
  405e22:	b176      	cbz	r6, 405e42 <__register_exitproc+0x4a>
  405e24:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405e28:	2401      	movs	r4, #1
  405e2a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  405e2e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  405e32:	4094      	lsls	r4, r2
  405e34:	4320      	orrs	r0, r4
  405e36:	2e02      	cmp	r6, #2
  405e38:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  405e3c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405e40:	d023      	beq.n	405e8a <__register_exitproc+0x92>
  405e42:	3202      	adds	r2, #2
  405e44:	f8c3 e004 	str.w	lr, [r3, #4]
  405e48:	6828      	ldr	r0, [r5, #0]
  405e4a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  405e4e:	f7ff fbfd 	bl	40564c <__retarget_lock_release_recursive>
  405e52:	2000      	movs	r0, #0
  405e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405e58:	4b17      	ldr	r3, [pc, #92]	; (405eb8 <__register_exitproc+0xc0>)
  405e5a:	b30b      	cbz	r3, 405ea0 <__register_exitproc+0xa8>
  405e5c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405e60:	f7fd faf8 	bl	403454 <malloc>
  405e64:	4603      	mov	r3, r0
  405e66:	b1d8      	cbz	r0, 405ea0 <__register_exitproc+0xa8>
  405e68:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  405e6c:	6002      	str	r2, [r0, #0]
  405e6e:	2100      	movs	r1, #0
  405e70:	6041      	str	r1, [r0, #4]
  405e72:	460a      	mov	r2, r1
  405e74:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405e78:	f04f 0e01 	mov.w	lr, #1
  405e7c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405e80:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405e84:	2e00      	cmp	r6, #0
  405e86:	d0dc      	beq.n	405e42 <__register_exitproc+0x4a>
  405e88:	e7cc      	b.n	405e24 <__register_exitproc+0x2c>
  405e8a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  405e8e:	430c      	orrs	r4, r1
  405e90:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405e94:	e7d5      	b.n	405e42 <__register_exitproc+0x4a>
  405e96:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  405e9a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  405e9e:	e7bb      	b.n	405e18 <__register_exitproc+0x20>
  405ea0:	6828      	ldr	r0, [r5, #0]
  405ea2:	f7ff fbd3 	bl	40564c <__retarget_lock_release_recursive>
  405ea6:	f04f 30ff 	mov.w	r0, #4294967295
  405eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405eae:	bf00      	nop
  405eb0:	20400848 	.word	0x20400848
  405eb4:	00406450 	.word	0x00406450
  405eb8:	00403455 	.word	0x00403455

00405ebc <_close_r>:
  405ebc:	b538      	push	{r3, r4, r5, lr}
  405ebe:	4c07      	ldr	r4, [pc, #28]	; (405edc <_close_r+0x20>)
  405ec0:	2300      	movs	r3, #0
  405ec2:	4605      	mov	r5, r0
  405ec4:	4608      	mov	r0, r1
  405ec6:	6023      	str	r3, [r4, #0]
  405ec8:	f7fb f902 	bl	4010d0 <_close>
  405ecc:	1c43      	adds	r3, r0, #1
  405ece:	d000      	beq.n	405ed2 <_close_r+0x16>
  405ed0:	bd38      	pop	{r3, r4, r5, pc}
  405ed2:	6823      	ldr	r3, [r4, #0]
  405ed4:	2b00      	cmp	r3, #0
  405ed6:	d0fb      	beq.n	405ed0 <_close_r+0x14>
  405ed8:	602b      	str	r3, [r5, #0]
  405eda:	bd38      	pop	{r3, r4, r5, pc}
  405edc:	20400d78 	.word	0x20400d78

00405ee0 <_fclose_r>:
  405ee0:	b570      	push	{r4, r5, r6, lr}
  405ee2:	b159      	cbz	r1, 405efc <_fclose_r+0x1c>
  405ee4:	4605      	mov	r5, r0
  405ee6:	460c      	mov	r4, r1
  405ee8:	b110      	cbz	r0, 405ef0 <_fclose_r+0x10>
  405eea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405eec:	2b00      	cmp	r3, #0
  405eee:	d03c      	beq.n	405f6a <_fclose_r+0x8a>
  405ef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405ef2:	07d8      	lsls	r0, r3, #31
  405ef4:	d505      	bpl.n	405f02 <_fclose_r+0x22>
  405ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405efa:	b92b      	cbnz	r3, 405f08 <_fclose_r+0x28>
  405efc:	2600      	movs	r6, #0
  405efe:	4630      	mov	r0, r6
  405f00:	bd70      	pop	{r4, r5, r6, pc}
  405f02:	89a3      	ldrh	r3, [r4, #12]
  405f04:	0599      	lsls	r1, r3, #22
  405f06:	d53c      	bpl.n	405f82 <_fclose_r+0xa2>
  405f08:	4621      	mov	r1, r4
  405f0a:	4628      	mov	r0, r5
  405f0c:	f7fe fee4 	bl	404cd8 <__sflush_r>
  405f10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405f12:	4606      	mov	r6, r0
  405f14:	b133      	cbz	r3, 405f24 <_fclose_r+0x44>
  405f16:	69e1      	ldr	r1, [r4, #28]
  405f18:	4628      	mov	r0, r5
  405f1a:	4798      	blx	r3
  405f1c:	2800      	cmp	r0, #0
  405f1e:	bfb8      	it	lt
  405f20:	f04f 36ff 	movlt.w	r6, #4294967295
  405f24:	89a3      	ldrh	r3, [r4, #12]
  405f26:	061a      	lsls	r2, r3, #24
  405f28:	d422      	bmi.n	405f70 <_fclose_r+0x90>
  405f2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405f2c:	b141      	cbz	r1, 405f40 <_fclose_r+0x60>
  405f2e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405f32:	4299      	cmp	r1, r3
  405f34:	d002      	beq.n	405f3c <_fclose_r+0x5c>
  405f36:	4628      	mov	r0, r5
  405f38:	f7ff f8ec 	bl	405114 <_free_r>
  405f3c:	2300      	movs	r3, #0
  405f3e:	6323      	str	r3, [r4, #48]	; 0x30
  405f40:	6c61      	ldr	r1, [r4, #68]	; 0x44
  405f42:	b121      	cbz	r1, 405f4e <_fclose_r+0x6e>
  405f44:	4628      	mov	r0, r5
  405f46:	f7ff f8e5 	bl	405114 <_free_r>
  405f4a:	2300      	movs	r3, #0
  405f4c:	6463      	str	r3, [r4, #68]	; 0x44
  405f4e:	f7fe ffe7 	bl	404f20 <__sfp_lock_acquire>
  405f52:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405f54:	2200      	movs	r2, #0
  405f56:	07db      	lsls	r3, r3, #31
  405f58:	81a2      	strh	r2, [r4, #12]
  405f5a:	d50e      	bpl.n	405f7a <_fclose_r+0x9a>
  405f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405f5e:	f7ff fb71 	bl	405644 <__retarget_lock_close_recursive>
  405f62:	f7fe ffe3 	bl	404f2c <__sfp_lock_release>
  405f66:	4630      	mov	r0, r6
  405f68:	bd70      	pop	{r4, r5, r6, pc}
  405f6a:	f7fe ffad 	bl	404ec8 <__sinit>
  405f6e:	e7bf      	b.n	405ef0 <_fclose_r+0x10>
  405f70:	6921      	ldr	r1, [r4, #16]
  405f72:	4628      	mov	r0, r5
  405f74:	f7ff f8ce 	bl	405114 <_free_r>
  405f78:	e7d7      	b.n	405f2a <_fclose_r+0x4a>
  405f7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405f7c:	f7ff fb66 	bl	40564c <__retarget_lock_release_recursive>
  405f80:	e7ec      	b.n	405f5c <_fclose_r+0x7c>
  405f82:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405f84:	f7ff fb60 	bl	405648 <__retarget_lock_acquire_recursive>
  405f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405f8c:	2b00      	cmp	r3, #0
  405f8e:	d1bb      	bne.n	405f08 <_fclose_r+0x28>
  405f90:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405f92:	f016 0601 	ands.w	r6, r6, #1
  405f96:	d1b1      	bne.n	405efc <_fclose_r+0x1c>
  405f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405f9a:	f7ff fb57 	bl	40564c <__retarget_lock_release_recursive>
  405f9e:	4630      	mov	r0, r6
  405fa0:	bd70      	pop	{r4, r5, r6, pc}
  405fa2:	bf00      	nop

00405fa4 <_fstat_r>:
  405fa4:	b538      	push	{r3, r4, r5, lr}
  405fa6:	460b      	mov	r3, r1
  405fa8:	4c07      	ldr	r4, [pc, #28]	; (405fc8 <_fstat_r+0x24>)
  405faa:	4605      	mov	r5, r0
  405fac:	4611      	mov	r1, r2
  405fae:	4618      	mov	r0, r3
  405fb0:	2300      	movs	r3, #0
  405fb2:	6023      	str	r3, [r4, #0]
  405fb4:	f7fb f88f 	bl	4010d6 <_fstat>
  405fb8:	1c43      	adds	r3, r0, #1
  405fba:	d000      	beq.n	405fbe <_fstat_r+0x1a>
  405fbc:	bd38      	pop	{r3, r4, r5, pc}
  405fbe:	6823      	ldr	r3, [r4, #0]
  405fc0:	2b00      	cmp	r3, #0
  405fc2:	d0fb      	beq.n	405fbc <_fstat_r+0x18>
  405fc4:	602b      	str	r3, [r5, #0]
  405fc6:	bd38      	pop	{r3, r4, r5, pc}
  405fc8:	20400d78 	.word	0x20400d78

00405fcc <_isatty_r>:
  405fcc:	b538      	push	{r3, r4, r5, lr}
  405fce:	4c07      	ldr	r4, [pc, #28]	; (405fec <_isatty_r+0x20>)
  405fd0:	2300      	movs	r3, #0
  405fd2:	4605      	mov	r5, r0
  405fd4:	4608      	mov	r0, r1
  405fd6:	6023      	str	r3, [r4, #0]
  405fd8:	f7fb f882 	bl	4010e0 <_isatty>
  405fdc:	1c43      	adds	r3, r0, #1
  405fde:	d000      	beq.n	405fe2 <_isatty_r+0x16>
  405fe0:	bd38      	pop	{r3, r4, r5, pc}
  405fe2:	6823      	ldr	r3, [r4, #0]
  405fe4:	2b00      	cmp	r3, #0
  405fe6:	d0fb      	beq.n	405fe0 <_isatty_r+0x14>
  405fe8:	602b      	str	r3, [r5, #0]
  405fea:	bd38      	pop	{r3, r4, r5, pc}
  405fec:	20400d78 	.word	0x20400d78

00405ff0 <_lseek_r>:
  405ff0:	b570      	push	{r4, r5, r6, lr}
  405ff2:	460d      	mov	r5, r1
  405ff4:	4c08      	ldr	r4, [pc, #32]	; (406018 <_lseek_r+0x28>)
  405ff6:	4611      	mov	r1, r2
  405ff8:	4606      	mov	r6, r0
  405ffa:	461a      	mov	r2, r3
  405ffc:	4628      	mov	r0, r5
  405ffe:	2300      	movs	r3, #0
  406000:	6023      	str	r3, [r4, #0]
  406002:	f7fb f86f 	bl	4010e4 <_lseek>
  406006:	1c43      	adds	r3, r0, #1
  406008:	d000      	beq.n	40600c <_lseek_r+0x1c>
  40600a:	bd70      	pop	{r4, r5, r6, pc}
  40600c:	6823      	ldr	r3, [r4, #0]
  40600e:	2b00      	cmp	r3, #0
  406010:	d0fb      	beq.n	40600a <_lseek_r+0x1a>
  406012:	6033      	str	r3, [r6, #0]
  406014:	bd70      	pop	{r4, r5, r6, pc}
  406016:	bf00      	nop
  406018:	20400d78 	.word	0x20400d78

0040601c <_read_r>:
  40601c:	b570      	push	{r4, r5, r6, lr}
  40601e:	460d      	mov	r5, r1
  406020:	4c08      	ldr	r4, [pc, #32]	; (406044 <_read_r+0x28>)
  406022:	4611      	mov	r1, r2
  406024:	4606      	mov	r6, r0
  406026:	461a      	mov	r2, r3
  406028:	4628      	mov	r0, r5
  40602a:	2300      	movs	r3, #0
  40602c:	6023      	str	r3, [r4, #0]
  40602e:	f7fa fbf3 	bl	400818 <_read>
  406032:	1c43      	adds	r3, r0, #1
  406034:	d000      	beq.n	406038 <_read_r+0x1c>
  406036:	bd70      	pop	{r4, r5, r6, pc}
  406038:	6823      	ldr	r3, [r4, #0]
  40603a:	2b00      	cmp	r3, #0
  40603c:	d0fb      	beq.n	406036 <_read_r+0x1a>
  40603e:	6033      	str	r3, [r6, #0]
  406040:	bd70      	pop	{r4, r5, r6, pc}
  406042:	bf00      	nop
  406044:	20400d78 	.word	0x20400d78

00406048 <__aeabi_uldivmod>:
  406048:	b953      	cbnz	r3, 406060 <__aeabi_uldivmod+0x18>
  40604a:	b94a      	cbnz	r2, 406060 <__aeabi_uldivmod+0x18>
  40604c:	2900      	cmp	r1, #0
  40604e:	bf08      	it	eq
  406050:	2800      	cmpeq	r0, #0
  406052:	bf1c      	itt	ne
  406054:	f04f 31ff 	movne.w	r1, #4294967295
  406058:	f04f 30ff 	movne.w	r0, #4294967295
  40605c:	f000 b97a 	b.w	406354 <__aeabi_idiv0>
  406060:	f1ad 0c08 	sub.w	ip, sp, #8
  406064:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406068:	f000 f806 	bl	406078 <__udivmoddi4>
  40606c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406074:	b004      	add	sp, #16
  406076:	4770      	bx	lr

00406078 <__udivmoddi4>:
  406078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40607c:	468c      	mov	ip, r1
  40607e:	460d      	mov	r5, r1
  406080:	4604      	mov	r4, r0
  406082:	9e08      	ldr	r6, [sp, #32]
  406084:	2b00      	cmp	r3, #0
  406086:	d151      	bne.n	40612c <__udivmoddi4+0xb4>
  406088:	428a      	cmp	r2, r1
  40608a:	4617      	mov	r7, r2
  40608c:	d96d      	bls.n	40616a <__udivmoddi4+0xf2>
  40608e:	fab2 fe82 	clz	lr, r2
  406092:	f1be 0f00 	cmp.w	lr, #0
  406096:	d00b      	beq.n	4060b0 <__udivmoddi4+0x38>
  406098:	f1ce 0c20 	rsb	ip, lr, #32
  40609c:	fa01 f50e 	lsl.w	r5, r1, lr
  4060a0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4060a4:	fa02 f70e 	lsl.w	r7, r2, lr
  4060a8:	ea4c 0c05 	orr.w	ip, ip, r5
  4060ac:	fa00 f40e 	lsl.w	r4, r0, lr
  4060b0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4060b4:	0c25      	lsrs	r5, r4, #16
  4060b6:	fbbc f8fa 	udiv	r8, ip, sl
  4060ba:	fa1f f987 	uxth.w	r9, r7
  4060be:	fb0a cc18 	mls	ip, sl, r8, ip
  4060c2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4060c6:	fb08 f309 	mul.w	r3, r8, r9
  4060ca:	42ab      	cmp	r3, r5
  4060cc:	d90a      	bls.n	4060e4 <__udivmoddi4+0x6c>
  4060ce:	19ed      	adds	r5, r5, r7
  4060d0:	f108 32ff 	add.w	r2, r8, #4294967295
  4060d4:	f080 8123 	bcs.w	40631e <__udivmoddi4+0x2a6>
  4060d8:	42ab      	cmp	r3, r5
  4060da:	f240 8120 	bls.w	40631e <__udivmoddi4+0x2a6>
  4060de:	f1a8 0802 	sub.w	r8, r8, #2
  4060e2:	443d      	add	r5, r7
  4060e4:	1aed      	subs	r5, r5, r3
  4060e6:	b2a4      	uxth	r4, r4
  4060e8:	fbb5 f0fa 	udiv	r0, r5, sl
  4060ec:	fb0a 5510 	mls	r5, sl, r0, r5
  4060f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4060f4:	fb00 f909 	mul.w	r9, r0, r9
  4060f8:	45a1      	cmp	r9, r4
  4060fa:	d909      	bls.n	406110 <__udivmoddi4+0x98>
  4060fc:	19e4      	adds	r4, r4, r7
  4060fe:	f100 33ff 	add.w	r3, r0, #4294967295
  406102:	f080 810a 	bcs.w	40631a <__udivmoddi4+0x2a2>
  406106:	45a1      	cmp	r9, r4
  406108:	f240 8107 	bls.w	40631a <__udivmoddi4+0x2a2>
  40610c:	3802      	subs	r0, #2
  40610e:	443c      	add	r4, r7
  406110:	eba4 0409 	sub.w	r4, r4, r9
  406114:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406118:	2100      	movs	r1, #0
  40611a:	2e00      	cmp	r6, #0
  40611c:	d061      	beq.n	4061e2 <__udivmoddi4+0x16a>
  40611e:	fa24 f40e 	lsr.w	r4, r4, lr
  406122:	2300      	movs	r3, #0
  406124:	6034      	str	r4, [r6, #0]
  406126:	6073      	str	r3, [r6, #4]
  406128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40612c:	428b      	cmp	r3, r1
  40612e:	d907      	bls.n	406140 <__udivmoddi4+0xc8>
  406130:	2e00      	cmp	r6, #0
  406132:	d054      	beq.n	4061de <__udivmoddi4+0x166>
  406134:	2100      	movs	r1, #0
  406136:	e886 0021 	stmia.w	r6, {r0, r5}
  40613a:	4608      	mov	r0, r1
  40613c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406140:	fab3 f183 	clz	r1, r3
  406144:	2900      	cmp	r1, #0
  406146:	f040 808e 	bne.w	406266 <__udivmoddi4+0x1ee>
  40614a:	42ab      	cmp	r3, r5
  40614c:	d302      	bcc.n	406154 <__udivmoddi4+0xdc>
  40614e:	4282      	cmp	r2, r0
  406150:	f200 80fa 	bhi.w	406348 <__udivmoddi4+0x2d0>
  406154:	1a84      	subs	r4, r0, r2
  406156:	eb65 0503 	sbc.w	r5, r5, r3
  40615a:	2001      	movs	r0, #1
  40615c:	46ac      	mov	ip, r5
  40615e:	2e00      	cmp	r6, #0
  406160:	d03f      	beq.n	4061e2 <__udivmoddi4+0x16a>
  406162:	e886 1010 	stmia.w	r6, {r4, ip}
  406166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40616a:	b912      	cbnz	r2, 406172 <__udivmoddi4+0xfa>
  40616c:	2701      	movs	r7, #1
  40616e:	fbb7 f7f2 	udiv	r7, r7, r2
  406172:	fab7 fe87 	clz	lr, r7
  406176:	f1be 0f00 	cmp.w	lr, #0
  40617a:	d134      	bne.n	4061e6 <__udivmoddi4+0x16e>
  40617c:	1beb      	subs	r3, r5, r7
  40617e:	0c3a      	lsrs	r2, r7, #16
  406180:	fa1f fc87 	uxth.w	ip, r7
  406184:	2101      	movs	r1, #1
  406186:	fbb3 f8f2 	udiv	r8, r3, r2
  40618a:	0c25      	lsrs	r5, r4, #16
  40618c:	fb02 3318 	mls	r3, r2, r8, r3
  406190:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406194:	fb0c f308 	mul.w	r3, ip, r8
  406198:	42ab      	cmp	r3, r5
  40619a:	d907      	bls.n	4061ac <__udivmoddi4+0x134>
  40619c:	19ed      	adds	r5, r5, r7
  40619e:	f108 30ff 	add.w	r0, r8, #4294967295
  4061a2:	d202      	bcs.n	4061aa <__udivmoddi4+0x132>
  4061a4:	42ab      	cmp	r3, r5
  4061a6:	f200 80d1 	bhi.w	40634c <__udivmoddi4+0x2d4>
  4061aa:	4680      	mov	r8, r0
  4061ac:	1aed      	subs	r5, r5, r3
  4061ae:	b2a3      	uxth	r3, r4
  4061b0:	fbb5 f0f2 	udiv	r0, r5, r2
  4061b4:	fb02 5510 	mls	r5, r2, r0, r5
  4061b8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4061bc:	fb0c fc00 	mul.w	ip, ip, r0
  4061c0:	45a4      	cmp	ip, r4
  4061c2:	d907      	bls.n	4061d4 <__udivmoddi4+0x15c>
  4061c4:	19e4      	adds	r4, r4, r7
  4061c6:	f100 33ff 	add.w	r3, r0, #4294967295
  4061ca:	d202      	bcs.n	4061d2 <__udivmoddi4+0x15a>
  4061cc:	45a4      	cmp	ip, r4
  4061ce:	f200 80b8 	bhi.w	406342 <__udivmoddi4+0x2ca>
  4061d2:	4618      	mov	r0, r3
  4061d4:	eba4 040c 	sub.w	r4, r4, ip
  4061d8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4061dc:	e79d      	b.n	40611a <__udivmoddi4+0xa2>
  4061de:	4631      	mov	r1, r6
  4061e0:	4630      	mov	r0, r6
  4061e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4061e6:	f1ce 0420 	rsb	r4, lr, #32
  4061ea:	fa05 f30e 	lsl.w	r3, r5, lr
  4061ee:	fa07 f70e 	lsl.w	r7, r7, lr
  4061f2:	fa20 f804 	lsr.w	r8, r0, r4
  4061f6:	0c3a      	lsrs	r2, r7, #16
  4061f8:	fa25 f404 	lsr.w	r4, r5, r4
  4061fc:	ea48 0803 	orr.w	r8, r8, r3
  406200:	fbb4 f1f2 	udiv	r1, r4, r2
  406204:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406208:	fb02 4411 	mls	r4, r2, r1, r4
  40620c:	fa1f fc87 	uxth.w	ip, r7
  406210:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406214:	fb01 f30c 	mul.w	r3, r1, ip
  406218:	42ab      	cmp	r3, r5
  40621a:	fa00 f40e 	lsl.w	r4, r0, lr
  40621e:	d909      	bls.n	406234 <__udivmoddi4+0x1bc>
  406220:	19ed      	adds	r5, r5, r7
  406222:	f101 30ff 	add.w	r0, r1, #4294967295
  406226:	f080 808a 	bcs.w	40633e <__udivmoddi4+0x2c6>
  40622a:	42ab      	cmp	r3, r5
  40622c:	f240 8087 	bls.w	40633e <__udivmoddi4+0x2c6>
  406230:	3902      	subs	r1, #2
  406232:	443d      	add	r5, r7
  406234:	1aeb      	subs	r3, r5, r3
  406236:	fa1f f588 	uxth.w	r5, r8
  40623a:	fbb3 f0f2 	udiv	r0, r3, r2
  40623e:	fb02 3310 	mls	r3, r2, r0, r3
  406242:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406246:	fb00 f30c 	mul.w	r3, r0, ip
  40624a:	42ab      	cmp	r3, r5
  40624c:	d907      	bls.n	40625e <__udivmoddi4+0x1e6>
  40624e:	19ed      	adds	r5, r5, r7
  406250:	f100 38ff 	add.w	r8, r0, #4294967295
  406254:	d26f      	bcs.n	406336 <__udivmoddi4+0x2be>
  406256:	42ab      	cmp	r3, r5
  406258:	d96d      	bls.n	406336 <__udivmoddi4+0x2be>
  40625a:	3802      	subs	r0, #2
  40625c:	443d      	add	r5, r7
  40625e:	1aeb      	subs	r3, r5, r3
  406260:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406264:	e78f      	b.n	406186 <__udivmoddi4+0x10e>
  406266:	f1c1 0720 	rsb	r7, r1, #32
  40626a:	fa22 f807 	lsr.w	r8, r2, r7
  40626e:	408b      	lsls	r3, r1
  406270:	fa05 f401 	lsl.w	r4, r5, r1
  406274:	ea48 0303 	orr.w	r3, r8, r3
  406278:	fa20 fe07 	lsr.w	lr, r0, r7
  40627c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406280:	40fd      	lsrs	r5, r7
  406282:	ea4e 0e04 	orr.w	lr, lr, r4
  406286:	fbb5 f9fc 	udiv	r9, r5, ip
  40628a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40628e:	fb0c 5519 	mls	r5, ip, r9, r5
  406292:	fa1f f883 	uxth.w	r8, r3
  406296:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40629a:	fb09 f408 	mul.w	r4, r9, r8
  40629e:	42ac      	cmp	r4, r5
  4062a0:	fa02 f201 	lsl.w	r2, r2, r1
  4062a4:	fa00 fa01 	lsl.w	sl, r0, r1
  4062a8:	d908      	bls.n	4062bc <__udivmoddi4+0x244>
  4062aa:	18ed      	adds	r5, r5, r3
  4062ac:	f109 30ff 	add.w	r0, r9, #4294967295
  4062b0:	d243      	bcs.n	40633a <__udivmoddi4+0x2c2>
  4062b2:	42ac      	cmp	r4, r5
  4062b4:	d941      	bls.n	40633a <__udivmoddi4+0x2c2>
  4062b6:	f1a9 0902 	sub.w	r9, r9, #2
  4062ba:	441d      	add	r5, r3
  4062bc:	1b2d      	subs	r5, r5, r4
  4062be:	fa1f fe8e 	uxth.w	lr, lr
  4062c2:	fbb5 f0fc 	udiv	r0, r5, ip
  4062c6:	fb0c 5510 	mls	r5, ip, r0, r5
  4062ca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4062ce:	fb00 f808 	mul.w	r8, r0, r8
  4062d2:	45a0      	cmp	r8, r4
  4062d4:	d907      	bls.n	4062e6 <__udivmoddi4+0x26e>
  4062d6:	18e4      	adds	r4, r4, r3
  4062d8:	f100 35ff 	add.w	r5, r0, #4294967295
  4062dc:	d229      	bcs.n	406332 <__udivmoddi4+0x2ba>
  4062de:	45a0      	cmp	r8, r4
  4062e0:	d927      	bls.n	406332 <__udivmoddi4+0x2ba>
  4062e2:	3802      	subs	r0, #2
  4062e4:	441c      	add	r4, r3
  4062e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4062ea:	eba4 0408 	sub.w	r4, r4, r8
  4062ee:	fba0 8902 	umull	r8, r9, r0, r2
  4062f2:	454c      	cmp	r4, r9
  4062f4:	46c6      	mov	lr, r8
  4062f6:	464d      	mov	r5, r9
  4062f8:	d315      	bcc.n	406326 <__udivmoddi4+0x2ae>
  4062fa:	d012      	beq.n	406322 <__udivmoddi4+0x2aa>
  4062fc:	b156      	cbz	r6, 406314 <__udivmoddi4+0x29c>
  4062fe:	ebba 030e 	subs.w	r3, sl, lr
  406302:	eb64 0405 	sbc.w	r4, r4, r5
  406306:	fa04 f707 	lsl.w	r7, r4, r7
  40630a:	40cb      	lsrs	r3, r1
  40630c:	431f      	orrs	r7, r3
  40630e:	40cc      	lsrs	r4, r1
  406310:	6037      	str	r7, [r6, #0]
  406312:	6074      	str	r4, [r6, #4]
  406314:	2100      	movs	r1, #0
  406316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40631a:	4618      	mov	r0, r3
  40631c:	e6f8      	b.n	406110 <__udivmoddi4+0x98>
  40631e:	4690      	mov	r8, r2
  406320:	e6e0      	b.n	4060e4 <__udivmoddi4+0x6c>
  406322:	45c2      	cmp	sl, r8
  406324:	d2ea      	bcs.n	4062fc <__udivmoddi4+0x284>
  406326:	ebb8 0e02 	subs.w	lr, r8, r2
  40632a:	eb69 0503 	sbc.w	r5, r9, r3
  40632e:	3801      	subs	r0, #1
  406330:	e7e4      	b.n	4062fc <__udivmoddi4+0x284>
  406332:	4628      	mov	r0, r5
  406334:	e7d7      	b.n	4062e6 <__udivmoddi4+0x26e>
  406336:	4640      	mov	r0, r8
  406338:	e791      	b.n	40625e <__udivmoddi4+0x1e6>
  40633a:	4681      	mov	r9, r0
  40633c:	e7be      	b.n	4062bc <__udivmoddi4+0x244>
  40633e:	4601      	mov	r1, r0
  406340:	e778      	b.n	406234 <__udivmoddi4+0x1bc>
  406342:	3802      	subs	r0, #2
  406344:	443c      	add	r4, r7
  406346:	e745      	b.n	4061d4 <__udivmoddi4+0x15c>
  406348:	4608      	mov	r0, r1
  40634a:	e708      	b.n	40615e <__udivmoddi4+0xe6>
  40634c:	f1a8 0802 	sub.w	r8, r8, #2
  406350:	443d      	add	r5, r7
  406352:	e72b      	b.n	4061ac <__udivmoddi4+0x134>

00406354 <__aeabi_idiv0>:
  406354:	4770      	bx	lr
  406356:	bf00      	nop
  406358:	00000001 	.word	0x00000001
  40635c:	00000002 	.word	0x00000002
  406360:	00000004 	.word	0x00000004
  406364:	00000008 	.word	0x00000008
  406368:	00000010 	.word	0x00000010
  40636c:	00000020 	.word	0x00000020
  406370:	00000040 	.word	0x00000040
  406374:	00000080 	.word	0x00000080
  406378:	00000100 	.word	0x00000100
  40637c:	00000200 	.word	0x00000200
  406380:	00000400 	.word	0x00000400
  406384:	454c4449 	.word	0x454c4449
  406388:	00000000 	.word	0x00000000
  40638c:	51726d54 	.word	0x51726d54
  406390:	00000000 	.word	0x00000000
  406394:	20726d54 	.word	0x20726d54
  406398:	00637653 	.word	0x00637653
  40639c:	0064656c 	.word	0x0064656c
  4063a0:	6c696146 	.word	0x6c696146
  4063a4:	74206465 	.word	0x74206465
  4063a8:	7263206f 	.word	0x7263206f
  4063ac:	65746165 	.word	0x65746165
  4063b0:	73617420 	.word	0x73617420
  4063b4:	656c5f6b 	.word	0x656c5f6b
  4063b8:	000a0d64 	.word	0x000a0d64
  4063bc:	63656661 	.word	0x63656661
  4063c0:	00000000 	.word	0x00000000
  4063c4:	6c696146 	.word	0x6c696146
  4063c8:	74206465 	.word	0x74206465
  4063cc:	7263206f 	.word	0x7263206f
  4063d0:	65746165 	.word	0x65746165
  4063d4:	73617420 	.word	0x73617420
  4063d8:	66615f6b 	.word	0x66615f6b
  4063dc:	0a0d6365 	.word	0x0a0d6365
  4063e0:	00000000 	.word	0x00000000
  4063e4:	686c6166 	.word	0x686c6166
  4063e8:	6d652061 	.word	0x6d652061
  4063ec:	69726320 	.word	0x69726320
  4063f0:	61207261 	.word	0x61207261
  4063f4:	6c696620 	.word	0x6c696620
  4063f8:	000a2061 	.word	0x000a2061
  4063fc:	6f6c6176 	.word	0x6f6c6176
  406400:	6f632072 	.word	0x6f632072
  406404:	67697272 	.word	0x67697272
  406408:	206f6469 	.word	0x206f6469
  40640c:	6425203d 	.word	0x6425203d
  406410:	00000a20 	.word	0x00000a20
  406414:	3a444552 	.word	0x3a444552
  406418:	20642520 	.word	0x20642520
  40641c:	0000000a 	.word	0x0000000a
  406420:	45455247 	.word	0x45455247
  406424:	25203a4e 	.word	0x25203a4e
  406428:	000a2064 	.word	0x000a2064
  40642c:	45554c42 	.word	0x45554c42
  406430:	6425203a 	.word	0x6425203a
  406434:	00000a20 	.word	0x00000a20
  406438:	63617473 	.word	0x63617473
  40643c:	766f206b 	.word	0x766f206b
  406440:	6c667265 	.word	0x6c667265
  406444:	2520776f 	.word	0x2520776f
  406448:	73252078 	.word	0x73252078
  40644c:	00000a0d 	.word	0x00000a0d

00406450 <_global_impure_ptr>:
  406450:	20400010 33323130 37363534 42413938     ..@ 0123456789AB
  406460:	46454443 00000000 33323130 37363534     CDEF....01234567
  406470:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  406480:	0000296c                                l)..

00406484 <blanks.7217>:
  406484:	20202020 20202020 20202020 20202020                     

00406494 <zeroes.7218>:
  406494:	30303030 30303030 30303030 30303030     0000000000000000
  4064a4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004064b4 <_ctype_>:
  4064b4:	20202000 20202020 28282020 20282828     .         ((((( 
  4064c4:	20202020 20202020 20202020 20202020                     
  4064d4:	10108820 10101010 10101010 10101010      ...............
  4064e4:	04040410 04040404 10040404 10101010     ................
  4064f4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406504:	01010101 01010101 01010101 10101010     ................
  406514:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406524:	02020202 02020202 02020202 10101010     ................
  406534:	00000020 00000000 00000000 00000000      ...............
	...

004065b8 <_init>:
  4065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4065ba:	bf00      	nop
  4065bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4065be:	bc08      	pop	{r3}
  4065c0:	469e      	mov	lr, r3
  4065c2:	4770      	bx	lr

004065c4 <__init_array_start>:
  4065c4:	00404cb9 	.word	0x00404cb9

004065c8 <__frame_dummy_init_array_entry>:
  4065c8:	00400165                                e.@.

004065cc <_fini>:
  4065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4065ce:	bf00      	nop
  4065d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4065d2:	bc08      	pop	{r3}
  4065d4:	469e      	mov	lr, r3
  4065d6:	4770      	bx	lr

004065d8 <__fini_array_start>:
  4065d8:	00400141 	.word	0x00400141
